[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/Hyperwallet.js",
    "content": "import objectAssign from \"object-assign\";\nimport ApiClient from \"./utils/ApiClient\";\n\n/**\n * The Hyperwallet SDK Client\n */\nexport default class Hyperwallet {\n    /**\n     * Create a instance of the SDK Client\n     *\n     * @param {Object} config - The API config\n     * @param {string} config.username - The API username\n     * @param {string} config.password - The API password\n     * @param {string} [config.programToken] - The program token that is used for some API calls\n     * @param {Object} [config.encryptionData] - The JSON object of encryption data\n     * @param {string} [config.server=https://api.sandbox.hyperwallet.com] - The API server to connect to\n     */\n    constructor({\n        username, password, programToken, encryptionData, server = \"https://api.sandbox.hyperwallet.com\",\n    }) {\n        if (!username || !password) {\n            throw new Error(\"You need to specify your API username and password!\");\n        }\n        /**\n         * The instance of the ApiClient\n         *\n         * @type {ApiClient}\n         * @protected\n         */\n        this.client = new ApiClient(username, password, server, encryptionData);\n\n        /**\n         * The program token that is used for some API calls\n         *\n         * @type {string}\n         * @protected\n         */\n        this.programToken = programToken;\n    }\n\n    //--------------------------------------\n    // Users\n    //--------------------------------------\n\n    /**\n     * Create a user\n     *\n     * @param {Object} data - The user data\n     * @param {api-callback} callback - The callback for this call\n     */\n    createUser(data, callback) {\n        this.addProgramToken(data);\n        this.client.doPost(\"users\", data, {}, callback);\n    }\n\n    /**\n     * Load a user\n     *\n     * @param {string} userToken - The user token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    getUser(userToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}`, {}, callback);\n    }\n\n    /**\n     * Update a user\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} data - The user data that should be updated\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    updateUser(userToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        this.addProgramToken(data);\n        this.client.doPut(`users/${encodeURIComponent(userToken)}`, data, {}, callback);\n    }\n\n    /**\n     * List all users\n     *\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     */\n    listUsers(options, callback) {\n        const LIST_USER_FILTERS = [\"clientUserId\", \"email\", \"programToken\", \"status\", \"verificationStatus\", \"taxVerificationStatus\",\n            \"createdBefore\", \"createdAfter\", \"sortBy\", \"limit\"];\n        if (options && !Hyperwallet.isValidFilter(options, LIST_USER_FILTERS)) {\n            throw new Error(\"Invalid Filter. Expected - \".concat(LIST_USER_FILTERS));\n        }\n        this.client.doGet(\"users\", options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * Activate a user\n     *\n     * @param {string} userToken -  user token\n     * @param {api-callback} callback -  callback for this call\n     * @throws Will throw an error if userToken is not provided\n     */\n    activateUser(userToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        const transition = {\n            transition: \"ACTIVATED\",\n        };\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/status-transitions`, transition, {}, callback);\n    }\n\n    /**\n     * Deactivate a user\n     *\n     * @param {string} userToken -  user token\n     * @param {api-callback} callback -  callback for this call\n     * @throws Will throw an error if userToken is not provided\n     */\n    deactivateUser(userToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        const transition = {\n            transition: \"DE_ACTIVATED\",\n        };\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/status-transitions`, transition, {}, callback);\n    }\n\n    /**\n     * Lock a user account\n     *\n     * @param {string} userToken -  user token\n     * @param {api-callback} callback -  callback for this call\n     * @throws Will throw an error if userToken is not provided\n     */\n    lockUser(userToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        const transition = {\n            transition: \"LOCKED\",\n        };\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/status-transitions`, transition, {}, callback);\n    }\n\n    /**\n     * Freeze a user account\n     *\n     * @param {string} userToken -  user token\n     * @param {api-callback} callback -  callback for this call\n     * @throws Will throw an error if userToken is not provided\n     */\n    freezeUser(userToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        const transition = {\n            transition: \"FROZEN\",\n        };\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/status-transitions`, transition, {}, callback);\n    }\n\n    /**\n     * Pre-activate a user account\n     *\n     * @param {string} userToken -  user token\n     * @param {api-callback} callback -  callback for this call\n     * @throws Will throw an error if userToken is not provided\n     */\n    preactivateUser(userToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        const transition = {\n            transition: \"PRE_ACTIVATED\",\n        };\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/status-transitions`, transition, {}, callback);\n    }\n\n    /**\n     * Create a user status transition\n     *\n     * @param {string} userToken - user token\n     * @param {Object} data - user status transition data\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken is not provided\n     */\n    createUserStatusTransition(userToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/status-transitions`, data, {}, callback);\n    }\n\n    /**\n     * Get user status transition\n     *\n     * @param {string} userToken - The user token\n     * @param {string} statusTransitionToken - The user status transition token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    getUserStatusTransition(userToken, statusTransitionToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!statusTransitionToken) {\n            throw new Error(\"statusTransitionToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/status-transitions/${encodeURIComponent(statusTransitionToken)}`,\n            {},\n            callback);\n    }\n\n    /**\n     * List all user status transitions\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    listUserStatusTransitions(userToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        const LIST_USER_STATUS_TRANSITION_FILTERS = [\"transition\", \"createdBefore\", \"createdAfter\", \"sortBy\", \"limit\"];\n        if (options && !Hyperwallet.isValidFilter(options, LIST_USER_STATUS_TRANSITION_FILTERS)) {\n            throw new Error(\"Invalid Filter. Expected - \".concat(LIST_USER_STATUS_TRANSITION_FILTERS));\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/status-transitions`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * Upload Documents to User\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} data - JSON object of the data and files to be uploaded\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    uploadDocuments(userToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!data || Object.keys(data).length < 1) {\n            throw new Error(\"Files for upload are required\");\n        }\n        this.client.doPutMultipart(`users/${encodeURIComponent(userToken)}`, data, callback);\n    }\n\n    //--------------------------------------\n    // Prepaid Cards\n    //--------------------------------------\n\n    /**\n     * Create a prepaid card\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} data - The prepaid card data\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    createPrepaidCard(userToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/prepaid-cards`, data, {}, callback);\n    }\n\n    /**\n     * Get a prepaid card\n     *\n     * @param {string} userToken - The user token\n     * @param {string} prepaidCardToken - The prepaid card token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or prepaidCardToken is not provided\n     */\n    getPrepaidCard(userToken, prepaidCardToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!prepaidCardToken) {\n            throw new Error(\"prepaidCardToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/prepaid-cards/${encodeURIComponent(prepaidCardToken)}`, {}, callback);\n    }\n\n    /**\n     * Update a prepaid card\n     *\n     * @param {string} userToken - The user token\n     * @param {string} prepaidCardToken - The prepaid card token\n     * @param {Object} data - The prepaid card data to update\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or prepaidCardToken is not provided\n     */\n    updatePrepaidCard(userToken, prepaidCardToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!prepaidCardToken) {\n            throw new Error(\"prepaidCardToken is required\");\n        }\n        this.client.doPut(`users/${encodeURIComponent(userToken)}/prepaid-cards/${encodeURIComponent(prepaidCardToken)}`, data, {}, callback);\n    }\n\n    /**\n     * List all prepaid cards\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken is not provided\n     */\n    listPrepaidCards(userToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        const LIST_PREPAID_CARDS_FILTERS = [\"status\", \"createdBefore\", \"createdAfter\", \"sortBy\", \"limit\"];\n        if (options && !Hyperwallet.isValidFilter(options, LIST_PREPAID_CARDS_FILTERS)) {\n            throw new Error(\"Invalid Filter. Expected - \".concat(LIST_PREPAID_CARDS_FILTERS));\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/prepaid-cards`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * Suspend a prepaid card\n     *\n     * @param {string} userToken - The user token\n     * @param {string} prepaidCardToken - The prepaid card token\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or prepaidCardToken is not provided\n     */\n    suspendPrepaidCard(userToken, prepaidCardToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!prepaidCardToken) {\n            throw new Error(\"prepaidCardToken is required\");\n        }\n\n        const transition = {\n            transition: \"SUSPENDED\",\n        };\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/prepaid-cards/${encodeURIComponent(prepaidCardToken)}/status-transitions`, transition, {}, callback);\n    }\n\n    /**\n     * Unsuspend a prepaid card\n     *\n     * @param {string} userToken - The user token\n     * @param {string} prepaidCardToken - The prepaid card token\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or prepaidCardToken is not provided\n     */\n    unsuspendPrepaidCard(userToken, prepaidCardToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!prepaidCardToken) {\n            throw new Error(\"prepaidCardToken is required\");\n        }\n\n        const transition = {\n            transition: \"UNSUSPENDED\",\n        };\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/prepaid-cards/${encodeURIComponent(prepaidCardToken)}/status-transitions`, transition, {}, callback);\n    }\n\n    /**\n     * Mark a prepaid card as lost or stolen\n     *\n     * @param {string} userToken - The user token\n     * @param {string} prepaidCardToken - The prepaid card token\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or prepaidCardToken is not provided\n     */\n    lostOrStolenPrepaidCard(userToken, prepaidCardToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!prepaidCardToken) {\n            throw new Error(\"prepaidCardToken is required\");\n        }\n\n        const transition = {\n            transition: \"LOST_OR_STOLEN\",\n        };\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/prepaid-cards/${encodeURIComponent(prepaidCardToken)}/status-transitions`, transition, {}, callback);\n    }\n\n    /**\n     * Deactivate a prepaid card\n     *\n     * @param {string} userToken - The user token\n     * @param {string} prepaidCardToken - The prepaid card token\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or prepaidCardToken is not provided\n     */\n    deactivatePrepaidCard(userToken, prepaidCardToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!prepaidCardToken) {\n            throw new Error(\"prepaidCardToken is required\");\n        }\n\n        const transition = {\n            transition: \"DE_ACTIVATED\",\n        };\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/prepaid-cards/${encodeURIComponent(prepaidCardToken)}/status-transitions`, transition, {}, callback);\n    }\n\n    /**\n     * Lock a prepaid card\n     *\n     * @param {string} userToken - The user token\n     * @param {string} prepaidCardToken - The prepaid card token\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or prepaidCardToken is not provided\n     */\n    lockPrepaidCard(userToken, prepaidCardToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!prepaidCardToken) {\n            throw new Error(\"prepaidCardToken is required\");\n        }\n\n        const transition = {\n            transition: \"LOCKED\",\n        };\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/prepaid-cards/${encodeURIComponent(prepaidCardToken)}/status-transitions`, transition, {}, callback);\n    }\n\n    /**\n     * Unlock a prepaid card\n     *\n     * @param {string} userToken - The user token\n     * @param {string} prepaidCardToken - The prepaid card token\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or prepaidCardToken is not provided\n     */\n    unlockPrepaidCard(userToken, prepaidCardToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!prepaidCardToken) {\n            throw new Error(\"prepaidCardToken is required\");\n        }\n\n        const transition = {\n            transition: \"UNLOCKED\",\n        };\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/prepaid-cards/${encodeURIComponent(prepaidCardToken)}/status-transitions`, transition, {}, callback);\n    }\n\n    /**\n     * Create a prepaid card status transition\n     *\n     * @param {string} userToken - The user token\n     * @param {string} prepaidCardToken - The prepaid card token\n     * @param {Object} data - The prepaid card status transition data\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or prepaidCardToken is not provided\n     */\n    createPrepaidCardStatusTransition(userToken, prepaidCardToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!prepaidCardToken) {\n            throw new Error(\"prepaidCardToken is required\");\n        }\n\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/prepaid-cards/${encodeURIComponent(prepaidCardToken)}/status-transitions`, data, {}, callback);\n    }\n\n    /**\n     * Get a prepaid card status transition\n     *\n     * @param {string} userToken - The user token\n     * @param {string} prepaidCardToken - The prepaid card token\n     * @param {string} statusTransitionToken - The prepaid card status transition token\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken, prepaidCardToken or statusTransitionToken is not provided\n     */\n    getPrepaidCardStatusTransition(userToken, prepaidCardToken, statusTransitionToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!prepaidCardToken) {\n            throw new Error(\"prepaidCardToken is required\");\n        }\n        if (!statusTransitionToken) {\n            throw new Error(\"statusTransitionToken is required\");\n        }\n\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/prepaid-cards/${encodeURIComponent(prepaidCardToken)}/status-transitions/${encodeURIComponent(statusTransitionToken)}`, {}, callback);\n    }\n\n    /**\n     * List all prepaid card status transitions\n     *\n     * @param {string} userToken - The user token\n     * @param {string} prepaidCardToken - The prepaid card token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or prepaidCardToken is not provided\n     */\n    listPrepaidCardStatusTransitions(userToken, prepaidCardToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!prepaidCardToken) {\n            throw new Error(\"prepaidCardToken is required\");\n        }\n        const LIST_PREPAID_CARD_STATUS_TRANSITION_FILTERS = [\"transition\", \"createdBefore\", \"createdAfter\", \"sortBy\", \"limit\"];\n        if (options && !Hyperwallet.isValidFilter(options, LIST_PREPAID_CARD_STATUS_TRANSITION_FILTERS)) {\n            throw new Error(\"Invalid Filter. Expected - \".concat(LIST_PREPAID_CARD_STATUS_TRANSITION_FILTERS));\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/prepaid-cards/${encodeURIComponent(prepaidCardToken)}/status-transitions`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    //--------------------------------------\n    // Bank Cards\n    //--------------------------------------\n\n    /**\n     * Create a Bank card\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} data - The bank card data\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    createBankCard(userToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/bank-cards`, data, {}, callback);\n    }\n\n    /**\n     * Get a bank card\n     *\n     * @param {string} userToken - The user token\n     * @param {string} bankCardToken - The bank card token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or bankCardToken is not provided\n     */\n    getBankCard(userToken, bankCardToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!bankCardToken) {\n            throw new Error(\"bankCardToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/bank-cards/${encodeURIComponent(bankCardToken)}`, {}, callback);\n    }\n\n    /**\n     * Update a bank card\n     *\n     * @param {string} userToken - The user token\n     * @param {string} bankCardToken - The bank card token\n     * @param {Object} data - The bank card data to update\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or bankCardToken is not provided\n     */\n    updateBankCard(userToken, bankCardToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!bankCardToken) {\n            throw new Error(\"bankCardToken is required\");\n        }\n        this.client.doPut(`users/${encodeURIComponent(userToken)}/bank-cards/${encodeURIComponent(bankCardToken)}`, data, {}, callback);\n    }\n\n    /**\n     * List all bank cards\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken is not provided\n     */\n    listBankCards(userToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        const LIST_BANK_CARDS_FILTERS = [\"status\", \"createdBefore\", \"createdAfter\", \"sortBy\", \"limit\"];\n        if (options && !Hyperwallet.isValidFilter(options, LIST_BANK_CARDS_FILTERS)) {\n            throw new Error(\"Invalid Filter. Expected - \".concat(LIST_BANK_CARDS_FILTERS));\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/bank-cards`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * Deactivate a bank card\n     *\n     * @param {string} userToken - The user token\n     * @param {string} bankCardToken - The bank card token\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or bankCardToken is not provided\n     */\n    deactivateBankCard(userToken, bankCardToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!bankCardToken) {\n            throw new Error(\"bankCardToken is required\");\n        }\n\n        const transition = {\n            transition: \"DE_ACTIVATED\",\n        };\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/bank-cards/${encodeURIComponent(bankCardToken)}/status-transitions`, transition, {}, callback);\n    }\n\n    /**\n     * Create a bank card status transition\n     *\n     * @param {string} userToken - The user token\n     * @param {string} bankCardToken - The bank card token\n     * @param {Object} data - The bank card status transition data\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or bankCardToken is not provided\n     */\n    createBankCardStatusTransition(userToken, bankCardToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!bankCardToken) {\n            throw new Error(\"bankCardToken is required\");\n        }\n\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/bank-cards/${encodeURIComponent(bankCardToken)}/status-transitions`, data, {}, callback);\n    }\n\n    /**\n     * Get a bank card status transition\n     *\n     * @param {string} userToken - The user token\n     * @param {string} bankCardToken - The bank card token\n     * @param {string} statusTransitionToken - The bank card status transition token\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken, bankCardToken or statusTransitionToken is not provided\n     */\n    getBankCardStatusTransition(userToken, bankCardToken, statusTransitionToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!bankCardToken) {\n            throw new Error(\"bankCardToken is required\");\n        }\n        if (!statusTransitionToken) {\n            throw new Error(\"statusTransitionToken is required\");\n        }\n\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/bank-cards/${encodeURIComponent(bankCardToken)}/status-transitions/${encodeURIComponent(statusTransitionToken)}`, {}, callback);\n    }\n\n    /**\n     * List all bank card status transitions\n     *\n     * @param {string} userToken - The user token\n     * @param {string} bankCardToken - The bank card token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or bankCardToken is not provided\n     */\n    listBankCardStatusTransitions(userToken, bankCardToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!bankCardToken) {\n            throw new Error(\"bankCardToken is required\");\n        }\n        const LIST_BANK_CARD_STATUS_TRANSITION_FILTERS = [\"transition\", \"createdBefore\", \"createdAfter\", \"sortBy\", \"limit\"];\n        if (options && !Hyperwallet.isValidFilter(options, LIST_BANK_CARD_STATUS_TRANSITION_FILTERS)) {\n            throw new Error(\"Invalid Filter. Expected - \".concat(LIST_BANK_CARD_STATUS_TRANSITION_FILTERS));\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/bank-cards/${encodeURIComponent(bankCardToken)}/status-transitions`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    //--------------------------------------\n    // Authentication Token\n    //--------------------------------------\n\n    /**\n     * Get authentication token\n     *\n     * @param {string} userToken - The user token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    getAuthenticationToken(userToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/authentication-token`, {}, {}, callback);\n    }\n\n    //--------------------------------------\n    // Paper Checks\n    //--------------------------------------\n\n    /**\n     * Create a paper check\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} data - The paper check data\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    createPaperCheck(userToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/paper-checks`, data, {}, callback);\n    }\n\n    /**\n     * Get a paper check\n     *\n     * @param {string} userToken - The user token\n     * @param {string} paperCheckToken - The paper check token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or paperCheckToken is not provided\n     */\n    getPaperCheck(userToken, paperCheckToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!paperCheckToken) {\n            throw new Error(\"paperCheckToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/paper-checks/${encodeURIComponent(paperCheckToken)}`, {}, callback);\n    }\n\n    /**\n     * Update a paper check\n     *\n     * @param {string} userToken - The user token\n     * @param {string} paperCheckToken - The paper check token\n     * @param {Object} data - The paper check data to update\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or paperCheckToken is not provided\n     */\n    updatePaperCheck(userToken, paperCheckToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!paperCheckToken) {\n            throw new Error(\"paperCheckToken is required\");\n        }\n        this.client.doPut(`users/${encodeURIComponent(userToken)}/paper-checks/${encodeURIComponent(paperCheckToken)}`, data, {}, callback);\n    }\n\n    /**\n     * List all paper checks\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken is not provided\n     */\n    listPaperChecks(userToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        const LIST_PAPER_CHECKS_FILTERS = [\"status\", \"createdBefore\", \"createdAfter\", \"sortBy\", \"limit\"];\n        if (options && !Hyperwallet.isValidFilter(options, LIST_PAPER_CHECKS_FILTERS)) {\n            throw new Error(\"Invalid Filter. Expected - \".concat(LIST_PAPER_CHECKS_FILTERS));\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/paper-checks`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * Deactivate a paper check\n     *\n     * @param {string} userToken - The user token\n     * @param {string} paperCheckToken - The paper check token\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or paperCheckToken is not provided\n     */\n    deactivatePaperCheck(userToken, paperCheckToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!paperCheckToken) {\n            throw new Error(\"paperCheckToken is required\");\n        }\n\n        const transition = {\n            transition: \"DE_ACTIVATED\",\n        };\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/paper-checks/${encodeURIComponent(paperCheckToken)}/status-transitions`, transition, {}, callback);\n    }\n\n    /**\n     * Create a paper check status transition\n     *\n     * @param {string} userToken - The user token\n     * @param {string} paperCheckToken - The paper check token\n     * @param {Object} data - The paper check status transition data\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or paperCheckToken is not provided\n     */\n    createPaperCheckStatusTransition(userToken, paperCheckToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!paperCheckToken) {\n            throw new Error(\"paperCheckToken is required\");\n        }\n\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/paper-checks/${encodeURIComponent(paperCheckToken)}/status-transitions`, data, {}, callback);\n    }\n\n    /**\n     * Get a paper check status transition\n     *\n     * @param {string} userToken - The user token\n     * @param {string} paperCheckToken - The paper check token\n     * @param {string} statusTransitionToken - The paper check status transition token\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken, paperCheckToken or statusTransitionToken is not provided\n     */\n    getPaperCheckStatusTransition(userToken, paperCheckToken, statusTransitionToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!paperCheckToken) {\n            throw new Error(\"paperCheckToken is required\");\n        }\n        if (!statusTransitionToken) {\n            throw new Error(\"statusTransitionToken is required\");\n        }\n\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/paper-checks/${encodeURIComponent(paperCheckToken)}/status-transitions/${encodeURIComponent(statusTransitionToken)}`, {}, callback);\n    }\n\n    /**\n     * List all paper check status transitions\n     *\n     * @param {string} userToken - The user token\n     * @param {string} paperCheckToken - The paper check token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or paperCheckToken is not provided\n     */\n    listPaperCheckStatusTransitions(userToken, paperCheckToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!paperCheckToken) {\n            throw new Error(\"paperCheckToken is required\");\n        }\n        const LIST_PAPER_CHECK_STATUS_TRANSITION_FILTERS = [\"transition\", \"createdBefore\", \"createdAfter\", \"sortBy\", \"limit\"];\n        if (options && !Hyperwallet.isValidFilter(options, LIST_PAPER_CHECK_STATUS_TRANSITION_FILTERS)) {\n            throw new Error(\"Invalid Filter. Expected - \".concat(LIST_PAPER_CHECK_STATUS_TRANSITION_FILTERS));\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/paper-checks/${encodeURIComponent(paperCheckToken)}/status-transitions`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    //--------------------------------------\n    // Transfers\n    //--------------------------------------\n\n    /**\n     * Create a transfer\n     *\n     * @param {Object} data - The transfer data\n     * @param {api-callback} callback - The callback for this call\n     */\n    createTransfer(data, callback) {\n        if (!data.sourceToken) {\n            throw new Error(\"sourceToken is required\");\n        }\n        if (!data.destinationToken) {\n            throw new Error(\"destinationToken is required\");\n        }\n        if (!data.clientTransferId) {\n            throw new Error(\"clientTransferId is required\");\n        }\n        this.client.doPost(\"transfers\", data, {}, callback);\n    }\n\n    /**\n     * Get a transfer\n     *\n     * @param {string} transferToken - The transfer token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if transferToken is not provided\n     */\n    getTransfer(transferToken, callback) {\n        if (!transferToken) {\n            throw new Error(\"transferToken is required\");\n        }\n        this.client.doGet(`transfers/${encodeURIComponent(transferToken)}`, {}, callback);\n    }\n\n    /**\n     * List all transfers\n     *\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     */\n    listTransfers(options, callback) {\n        const LIST_TRANSFERS_FILTERS = [\"clientTransferId\", \"sourceToken\", \"destinationToken\", \"createdBefore\", \"createdAfter\", \"limit\"];\n        if (options && !Hyperwallet.isValidFilter(options, LIST_TRANSFERS_FILTERS)) {\n            throw new Error(\"Invalid Filter. Expected - \".concat(LIST_TRANSFERS_FILTERS));\n        }\n        this.client.doGet(\"transfers\", options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * Create a transfer status transition\n     *\n     * @param {string} transferToken - The transfer token\n     * @param {Object} data - The transfer status transition data\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if transferToken is not provided\n     */\n    createTransferStatusTransition(transferToken, data, callback) {\n        if (!transferToken) {\n            throw new Error(\"transferToken is required\");\n        }\n\n        this.client.doPost(`transfers/${encodeURIComponent(transferToken)}/status-transitions`, data, {}, callback);\n    }\n\n    //--------------------------------------\n    // Transfer Refunds\n    //--------------------------------------\n\n    /**\n     * Create a transfer refund\n     *\n     * @param {string} transferToken - The transfer token\n     * @param {Object} data - The transfer refund data\n     * @param {api-callback} callback - The callback for this call\n     */\n    createTransferRefund(transferToken, data, callback) {\n        if (!transferToken) {\n            throw new Error(\"transferToken is required\");\n        }\n        if (!data.clientRefundId) {\n            throw new Error(\"clientRefundId is required\");\n        }\n        this.client.doPost(`transfers/${encodeURIComponent(transferToken)}/refunds`, data, {}, callback);\n    }\n\n    /**\n     * Get a transfer\n     *\n     * @param {string} transferToken - The transfer token\n     * @param {string} transferRefundToken - The transfer refund token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if transferToken is not provided\n     */\n    getTransferRefund(transferToken, transferRefundToken, callback) {\n        if (!transferToken) {\n            throw new Error(\"transferToken is required\");\n        }\n        if (!transferRefundToken) {\n            throw new Error(\"transferRefundToken is required\");\n        }\n        this.client.doGet(`transfers/${encodeURIComponent(transferToken)}/refunds/${encodeURIComponent(transferRefundToken)}`, {}, callback);\n    }\n\n    /**\n     * List all transfers\n     *\n     * @param {string} transferToken - The transfer token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     */\n    listTransferRefunds(transferToken, options, callback) {\n        if (!transferToken) {\n            throw new Error(\"transferToken is required\");\n        }\n        this.client.doGet(`transfers/${encodeURIComponent(transferToken)}/refunds`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    //--------------------------------------\n    // PayPal Accounts\n    //--------------------------------------\n\n    /**\n     * Create a PayPal account\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} data - The PayPal account data\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    createPayPalAccount(userToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!data.transferMethodCountry) {\n            throw new Error(\"transferMethodCountry is required\");\n        }\n        if (!data.transferMethodCurrency) {\n            throw new Error(\"transferMethodCurrency is required\");\n        }\n        if (!data.email) {\n            throw new Error(\"email is required\");\n        }\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/paypal-accounts`, data, {}, callback);\n    }\n\n    /**\n     * Get a PayPal account\n     *\n     * @param {string} userToken - The user token\n     * @param {string} payPalAccountToken - The PayPal account token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or payPalAccountToken is not provided\n     */\n    getPayPalAccount(userToken, payPalAccountToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!payPalAccountToken) {\n            throw new Error(\"payPalAccountToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/paypal-accounts/${encodeURIComponent(payPalAccountToken)}`, {}, callback);\n    }\n\n    /**\n     * List all PayPal accounts\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken is not provided\n     */\n    listPayPalAccounts(userToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        const LIST_PAYPAL_ACCOUNTS_FILTERS = [\"status\", \"createdBefore\", \"createdAfter\", \"sortBy\", \"limit\"];\n        if (options && !Hyperwallet.isValidFilter(options, LIST_PAYPAL_ACCOUNTS_FILTERS)) {\n            throw new Error(\"Invalid Filter. Expected - \".concat(LIST_PAYPAL_ACCOUNTS_FILTERS));\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/paypal-accounts`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * Update a PayPal account\n     *\n     * @param {string} userToken - The user token\n     * @param {string} payPalAccountToken - The PayPal account token\n     * @param {Object} data - The PayPal account data to update\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or payPalAccountToken is not provided\n     */\n    updatePayPalAccount(userToken, payPalAccountToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!payPalAccountToken) {\n            throw new Error(\"payPalAccountToken is required\");\n        }\n        this.client.doPut(`users/${encodeURIComponent(userToken)}/paypal-accounts/${encodeURIComponent(payPalAccountToken)}`, data, {}, callback);\n    }\n\n    /**\n     * Activate a PayPal account\n     *\n     * @param {string} userToken - The user token\n     * @param {string} payPalAccountToken - The PayPal account token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or payPalAccountToken is not provided\n     */\n    activatePayPalAccount(userToken, payPalAccountToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!payPalAccountToken) {\n            throw new Error(\"payPalAccountToken is required\");\n        }\n\n        const transition = {\n            transition: \"ACTIVATED\",\n        };\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/paypal-accounts/${encodeURIComponent(payPalAccountToken)}/status-transitions`, transition, {}, callback);\n    }\n\n    /**\n     * Deactivate a PayPal account\n     *\n     * @param {string} userToken - The user token\n     * @param {string} payPalAccountToken - The PayPal account token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or payPalAccountToken is not provided\n     */\n    deactivatePayPalAccount(userToken, payPalAccountToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!payPalAccountToken) {\n            throw new Error(\"payPalAccountToken is required\");\n        }\n\n        const transition = {\n            transition: \"DE_ACTIVATED\",\n        };\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/paypal-accounts/${encodeURIComponent(payPalAccountToken)}/status-transitions`, transition, {}, callback);\n    }\n\n    /**\n     * Create PayPal account status transition\n     *\n     * @param {string} userToken - The user token\n     * @param {string} payPalAccountToken - PayPal account token\n     * @param {Object} data - PayPal account status transition data\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or payPalAccountToken is not provided\n     */\n    createPayPalAccountStatusTransition(userToken, payPalAccountToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!payPalAccountToken) {\n            throw new Error(\"payPalAccountToken is required\");\n        }\n\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/paypal-accounts/${encodeURIComponent(payPalAccountToken)}/status-transitions`, data, {}, callback);\n    }\n\n    /**\n     * Get PayPal account status transition\n     *\n     * @param {string} userToken - The user token\n     * @param {string} payPalAccountToken - PayPal account token\n     * @param {string} statusTransitionToken - The PayPal account status transition token\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or payPalAccountToken or statusTransitionToken is not provided\n     */\n    getPayPalAccountStatusTransition(userToken, payPalAccountToken, statusTransitionToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!payPalAccountToken) {\n            throw new Error(\"payPalAccountToken is required\");\n        }\n        if (!statusTransitionToken) {\n            throw new Error(\"statusTransitionToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/paypal-accounts/${encodeURIComponent(payPalAccountToken)}/status-transitions/${encodeURIComponent(statusTransitionToken)}`,\n            {}, callback);\n    }\n\n    /**\n     * List PayPal account status transition\n     *\n     * @param {string} userToken - The user token\n     * @param {string} payPalAccountToken - PayPal account token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or payPalAccountToken is not provided\n     */\n    listPayPalAccountStatusTransitions(userToken, payPalAccountToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!payPalAccountToken) {\n            throw new Error(\"payPalAccountToken is required\");\n        }\n        const LIST_PAYPAL_ACCOUNTS_STATUS_TRANSITION_FILTERS = [\"transition\", \"createdBefore\", \"createdAfter\", \"sortBy\", \"limit\"];\n        if (options && !Hyperwallet.isValidFilter(options, LIST_PAYPAL_ACCOUNTS_STATUS_TRANSITION_FILTERS)) {\n            throw new Error(\"Invalid Filter. Expected - \".concat(LIST_PAYPAL_ACCOUNTS_STATUS_TRANSITION_FILTERS));\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/paypal-accounts/${encodeURIComponent(payPalAccountToken)}/status-transitions`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    //--------------------------------------\n    // Bank Accounts\n    //--------------------------------------\n\n    /**\n     * Create a bank account\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} data - The bank account data\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    createBankAccount(userToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/bank-accounts`, data, {}, callback);\n    }\n\n    /**\n     * Get a bank account\n     *\n     * @param {string} userToken - The user token\n     * @param {string} bankAccountToken - The bank account token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or bankAccountToken is not provided\n     */\n    getBankAccount(userToken, bankAccountToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!bankAccountToken) {\n            throw new Error(\"bankAccountToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/bank-accounts/${encodeURIComponent(bankAccountToken)}`, {}, callback);\n    }\n\n    /**\n     * Update a bank account\n     *\n     * @param {string} userToken - The user token\n     * @param {string} bankAccountToken - The bank account token\n     * @param {Object} data - The bank account data to update\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or bankAccountToken is not provided\n     */\n    updateBankAccount(userToken, bankAccountToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!bankAccountToken) {\n            throw new Error(\"bankAccountToken is required\");\n        }\n        this.client.doPut(`users/${encodeURIComponent(userToken)}/bank-accounts/${encodeURIComponent(bankAccountToken)}`, data, {}, callback);\n    }\n\n    /**\n     * List all bank accounts\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken is not provided\n     */\n    listBankAccounts(userToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        const LIST_BANK_ACCOUNTS_FILTERS = [\"type\", \"status\", \"createdBefore\", \"createdAfter\", \"sortBy\", \"limit\"];\n        if (options && !Hyperwallet.isValidFilter(options, LIST_BANK_ACCOUNTS_FILTERS)) {\n            throw new Error(\"Invalid Filter. Expected - \".concat(LIST_BANK_ACCOUNTS_FILTERS));\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/bank-accounts`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * Deactivate a bank account\n     *\n     * @param {string} userToken - The user token\n     * @param {string} bankAccountToken - The bank account token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or bankAccountToken is not provided\n     */\n    deactivateBankAccount(userToken, bankAccountToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!bankAccountToken) {\n            throw new Error(\"bankAccountToken is required\");\n        }\n        const transition = {\n            transition: \"DE_ACTIVATED\",\n        };\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/bank-accounts/${encodeURIComponent(bankAccountToken)}/status-transitions`, transition, {}, callback);\n    }\n\n    /**\n     * Create a bank account status transition\n     *\n     * @param {string} userToken - The user token\n     * @param {string} bankAccountToken - The bank account token\n     * @param {Object} data - The bank account status transition data\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or bankAccountToken is not provided\n     */\n    createBankAccountStatusTransition(userToken, bankAccountToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!bankAccountToken) {\n            throw new Error(\"bankAccountToken is required\");\n        }\n\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/bank-accounts/${encodeURIComponent(bankAccountToken)}/status-transitions`, data, {}, callback);\n    }\n\n    /**\n     * Get bank account status transition\n     *\n     * @param {string} userToken - The user token\n     * @param {string} bankAccountToken - The bank account token\n     * @param {string} bankAccountToken - The bank account token\n     * @param {string} statusTransitionToken - The bank account status transition token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or bankAccountToken is not provided\n     */\n    getBankAccountStatusTransition(userToken, bankAccountToken, statusTransitionToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!bankAccountToken) {\n            throw new Error(\"bankAccountToken is required\");\n        }\n        if (!statusTransitionToken) {\n            throw new Error(\"statusTransitionToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/bank-accounts/${encodeURIComponent(bankAccountToken)}/status-transitions/${encodeURIComponent(statusTransitionToken)}`,\n            {},\n            callback);\n    }\n\n    /**\n     * List all bank account status transitions\n     *\n     * @param {string} userToken - The user token\n     * @param {string} bankAccountToken - The bank account token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or bankAccountToken is not provided\n     */\n    listBankAccountStatusTransitions(userToken, bankAccountToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!bankAccountToken) {\n            throw new Error(\"bankAccountToken is required\");\n        }\n        const LIST_BANK_ACCOUNT_STATUS_TRANSITION_FILTERS = [\"transition\", \"createdBefore\", \"createdAfter\", \"sortBy\", \"limit\"];\n        if (options && !Hyperwallet.isValidFilter(options, LIST_BANK_ACCOUNT_STATUS_TRANSITION_FILTERS)) {\n            throw new Error(\"Invalid Filter. Expected - \".concat(LIST_BANK_ACCOUNT_STATUS_TRANSITION_FILTERS));\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/bank-accounts/${encodeURIComponent(bankAccountToken)}/status-transitions`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    //--------------------------------------\n    // Balances\n    //--------------------------------------\n\n    /**\n     * List balances for a user\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    listBalancesForUser(userToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        const LIST_USER_BALANCE_FILTERS = [\"currency\", \"limit\"];\n        if (options && !Hyperwallet.isValidFilter(options, LIST_USER_BALANCE_FILTERS)) {\n            throw new Error(\"Invalid Filter. Expected - \".concat(LIST_USER_BALANCE_FILTERS));\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/balances`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * List balances for a prepaid card\n     *\n     * @param {string} userToken - The user token\n     * @param {string} prepaidCardToken - The prepaid card token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or prepaidCardToken is not provided\n     */\n    listBalancesForPrepaidCard(userToken, prepaidCardToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!prepaidCardToken) {\n            throw new Error(\"prepaidCardToken is required\");\n        }\n        const LIST_PREPAID_CARD_BALANCE_FILTERS = [\"sortBy\", \"limit\"];\n        if (options && !Hyperwallet.isValidFilter(options, LIST_PREPAID_CARD_BALANCE_FILTERS)) {\n            throw new Error(\"Invalid Filter. Expected - \".concat(LIST_PREPAID_CARD_BALANCE_FILTERS));\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/prepaid-cards/${encodeURIComponent(prepaidCardToken)}/balances`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * List balances for a program accounts\n     *\n     * @param {string} programToken - The program token\n     * @param {string} accountToken - The account token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if programToken or accountToken is not provided\n     */\n    listBalancesForAccount(programToken, accountToken, options, callback) {\n        if (!programToken) {\n            throw new Error(\"programToken is required\");\n        }\n        if (!accountToken) {\n            throw new Error(\"accountToken is required\");\n        }\n        const LIST_ACCOUNT_BALANCE_FILTERS = [\"currency\", \"sortBy\", \"limit\"];\n        if (options && !Hyperwallet.isValidFilter(options, LIST_ACCOUNT_BALANCE_FILTERS)) {\n            throw new Error(\"Invalid Filter. Expected - \".concat(LIST_ACCOUNT_BALANCE_FILTERS));\n        }\n        this.client.doGet(`programs/${encodeURIComponent(programToken)}/accounts/${encodeURIComponent(accountToken)}/balances`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    //--------------------------------------\n    // Payments\n    //--------------------------------------\n\n    /**\n     * Create a payment\n     *\n     * @param {Object} data - The payment data\n     * @param {api-callback} callback - The callback for this call\n     */\n    createPayment(data, callback) {\n        this.addProgramToken(data);\n        this.client.doPost(\"payments\", data, {}, callback);\n    }\n\n    /**\n     * Get a payment\n     *\n     * @param {string} paymentToken - The payment token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if paymentToken is not provided\n     */\n    getPayment(paymentToken, callback) {\n        if (!paymentToken) {\n            throw new Error(\"paymentToken is required\");\n        }\n        this.client.doGet(`payments/${encodeURIComponent(paymentToken)}`, {}, callback);\n    }\n\n\n    /**\n     * List all payments\n     *\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if invalid payment is provided\n     */\n    listPayments(options, callback) {\n        const LIST_PAYMENT_FILTERS = [\"clientPaymentId\", \"releaseDate\", \"createdBefore\", \"createdAfter\", \"sortBy\", \"limit\"];\n        if (options && !Hyperwallet.isValidFilter(options, LIST_PAYMENT_FILTERS)) {\n            throw new Error(\"Invalid Filter. Expected - \".concat(LIST_PAYMENT_FILTERS));\n        }\n        this.client.doGet(\"payments\", options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * Create a payment status transition\n     *\n     * @param {string} paymentToken - The payment token\n     * @param {Object} data - The payment status transition data\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if paymentToken is not provided\n     */\n    createPaymentStatusTransition(paymentToken, data, callback) {\n        if (!paymentToken) {\n            throw new Error(\"paymentToken is required\");\n        }\n\n        this.client.doPost(`payments/${encodeURIComponent(paymentToken)}/status-transitions`, data, {}, callback);\n    }\n\n    /**\n     * Get payment status transition\n     *\n     * @param {string} paymentToken - The payment token\n     * @param {string} statusTransitionToken - The payment status transition token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if paymentToken is not provided\n     */\n    getPaymentStatusTransition(paymentToken, statusTransitionToken, callback) {\n        if (!paymentToken) {\n            throw new Error(\"paymentToken is required\");\n        }\n        if (!statusTransitionToken) {\n            throw new Error(\"statusTransitionToken is required\");\n        }\n        this.client.doGet(`payments/${encodeURIComponent(paymentToken)}/status-transitions/${encodeURIComponent(statusTransitionToken)}`,\n            {},\n            callback);\n    }\n\n    /**\n     * List all payment status transitions\n     *\n     * @param {string} paymentToken - The payment token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if paymentToken is not provided\n     */\n    listPaymentStatusTransitions(paymentToken, options, callback) {\n        if (!paymentToken) {\n            throw new Error(\"paymentToken is required\");\n        }\n        const LIST_PAYMENT_STATUS_TRANSITION_FILTERS = [\"transition\", \"createdBefore\", \"createdAfter\", \"sortBy\", \"limit\"];\n        if (options && !Hyperwallet.isValidFilter(options, LIST_PAYMENT_STATUS_TRANSITION_FILTERS)) {\n            throw new Error(\"Invalid Filter. Expected - \".concat(LIST_PAYMENT_STATUS_TRANSITION_FILTERS));\n        }\n\n        this.client.doGet(`payments/${encodeURIComponent(paymentToken)}/status-transitions`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    //--------------------------------------\n    // Programs\n    //--------------------------------------\n\n    /**\n     * Get a program\n     *\n     * @param {string} programToken - The program token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if programToken is not provided\n     */\n    getProgram(programToken, callback) {\n        if (!programToken) {\n            throw new Error(\"programToken is required\");\n        }\n        this.client.doGet(`programs/${encodeURIComponent(programToken)}`, {}, callback);\n    }\n\n    //--------------------------------------\n    // Program Accounts\n    //--------------------------------------\n\n    /**\n     * Get a program account\n     *\n     * @param {string} programToken - The program token\n     * @param {string} accountToken - The account token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if programToken is not provided\n     */\n    getProgramAccount(programToken, accountToken, callback) {\n        if (!programToken) {\n            throw new Error(\"programToken is required\");\n        }\n        if (!accountToken) {\n            throw new Error(\"accountToken is required\");\n        }\n        this.client.doGet(`programs/${encodeURIComponent(programToken)}/accounts/${encodeURIComponent(accountToken)}`, {}, callback);\n    }\n\n\n    //--------------------------------------\n    // Transfer Method Configurations\n    //--------------------------------------\n\n    /**\n     * Get a transfer method configuration\n     *\n     * @param {string} userToken - The user token\n     * @param {string} country - The transfer method country\n     * @param {string} currency - The transfer method currency\n     * @param {string} type - The transfer method type\n     * @param {string} profileType - The profile type\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken, country, currency, type or profileType is not provided\n     */\n    getTransferMethodConfiguration(userToken, country, currency, type, profileType, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!country) {\n            throw new Error(\"country is required\");\n        }\n        if (!currency) {\n            throw new Error(\"currency is required\");\n        }\n        if (!type) {\n            throw new Error(\"type is required\");\n        }\n        if (!profileType) {\n            throw new Error(\"profileType is required\");\n        }\n        this.client.doGet(\"transfer-method-configurations\", {\n            userToken,\n            country,\n            currency,\n            type,\n            profileType,\n        }, callback);\n    }\n\n    /**\n     * List all transfer method configurations\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    listTransferMethodConfigurations(userToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        const LIST_TRANSFER_METHOD_CONFIG_FILTERS = [\"userToken\", \"limit\"];\n        if (options && !Hyperwallet.isValidFilter(options, LIST_TRANSFER_METHOD_CONFIG_FILTERS)) {\n            throw new Error(\"Invalid Filter. Expected - \".concat(LIST_TRANSFER_METHOD_CONFIG_FILTERS));\n        }\n        const params = options ? objectAssign({}, options, { userToken }) : { userToken };\n        this.client.doGet(\"transfer-method-configurations\", params, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * Create a transfer method\n     *\n     * @param {string} userToken The user token\n     * @param {string} jsonCacheToken The json cache token supplied by the widget\n     * @param {Object} data - Transfer method data\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     * @throws Will throw an error if jsonCacheToken is not provided\n     */\n    createTransferMethod(userToken, jsonCacheToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n\n        if (!jsonCacheToken) {\n            throw new Error(\"jsonCacheToken is required\");\n        }\n\n        const headers = { \"Json-Cache-Token\": jsonCacheToken };\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/transfer-methods`, data, headers, callback);\n    }\n\n    //--------------------------------------\n    // Receipts\n    //--------------------------------------\n\n    /**\n     * List all program account receipts\n     *\n     * @param {string} programToken - The program token\n     * @param {string} accountToken - The account token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if programToken or accountToken is not provided\n     */\n    listReceiptsForProgramAccount(programToken, accountToken, options, callback) {\n        if (!programToken) {\n            throw new Error(\"programToken is required\");\n        }\n        if (!accountToken) {\n            throw new Error(\"accountToken is required\");\n        }\n        const LIST_ACCOUNT_RECEIPTS_FILTERS = [\"currency\", \"createdBefore\", \"createdAfter\", \"sortBy\", \"limit\"];\n        if (options && !Hyperwallet.isValidFilter(options, LIST_ACCOUNT_RECEIPTS_FILTERS)) {\n            throw new Error(\"Invalid Filter. Expected - \".concat(LIST_ACCOUNT_RECEIPTS_FILTERS));\n        }\n        this.client.doGet(`programs/${encodeURIComponent(programToken)}/accounts/${encodeURIComponent(accountToken)}/receipts`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * List all user receipts\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    listReceiptsForUser(userToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        const LIST_USER_RECEIPTS_FILTERS = [\"createdBefore\", \"createdAfter\", \"sortBy\", \"limit\"];\n        if (options && !Hyperwallet.isValidFilter(options, LIST_USER_RECEIPTS_FILTERS)) {\n            throw new Error(\"Invalid Filter. Expected - \".concat(LIST_USER_RECEIPTS_FILTERS));\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/receipts`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * List all prepaid card receipts\n     *\n     * @param {string} userToken - The user token\n     * @param {string} prepaidCardToken - The prepaid card token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or prepaidCardToken is not provided\n     */\n    listReceiptsForPrepaidCard(userToken, prepaidCardToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!prepaidCardToken) {\n            throw new Error(\"prepaidCardToken is required\");\n        }\n        const LIST_PREPAID_CARD_RECEIPTS_FILTERS = [\"createdBefore\", \"createdAfter\"];\n        if (options && !Hyperwallet.isValidFilter(options, LIST_PREPAID_CARD_RECEIPTS_FILTERS)) {\n            throw new Error(\"Invalid Filter. Expected - \".concat(LIST_PREPAID_CARD_RECEIPTS_FILTERS));\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/prepaid-cards/${encodeURIComponent(prepaidCardToken)}/receipts`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    //--------------------------------------\n    // Webhooks: Notifications\n    //-------------------------------------\n\n    /**\n     * List webhook notifications\n     *\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     */\n    listWebhookNotifications(options, callback) {\n        const LIST_WEBHOOK_NOTIFICATIONS_FILTERS = [\"programToken\", \"createdBefore\", \"createdAfter\",\n            \"type\", \"sortBy\", \"limit\"];\n\n        if (options && !Hyperwallet.isValidFilter(options, LIST_WEBHOOK_NOTIFICATIONS_FILTERS)) {\n            throw new Error(\"Invalid Filter. Expected - \".concat(LIST_WEBHOOK_NOTIFICATIONS_FILTERS));\n        }\n        this.client.doGet(\"webhook-notifications\", options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * Get a single webhook notification\n     *\n     * @param {string} webhookToken - Webhook token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if webhookToken is not provided\n     */\n    getWebhookNotification(webhookToken, callback) {\n        if (!webhookToken) {\n            throw new Error(\"webhookToken is required\");\n        }\n        this.client.doGet(`webhook-notifications/${encodeURIComponent(webhookToken)}`, {}, callback);\n    }\n\n    //--------------------------------------\n    // Internal utils\n    //--------------------------------------\n\n    /**\n     * Add program token to data object if not already set\n     *\n     * @param {Object} data - The data object\n     * @returns {Object} - The adjusted object\n     *\n     * @private\n     */\n    addProgramToken(data) {\n        if (!data || !this.programToken) {\n            return data;\n        }\n        if (data.programToken) {\n            return data;\n        }\n\n        data.programToken = this.programToken; // eslint-disable-line no-param-reassign\n        return data;\n    }\n\n    /**\n     * Handle 204 response for list calls\n     *\n     * @param {api-callback} callback - The api callback\n     * @returns {api-callback} - A wrapper api callback\n     *\n     * @private\n     */\n    static handle204Response(callback) {\n        return (err, data, res) => {\n            if (!err && res.status === 204) {\n                callback(err, {\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                }, res);\n                return;\n            }\n            callback(err, data, res);\n        };\n    }\n\n    //--------------------------------------\n    // Venmo Accounts\n    //--------------------------------------\n\n    /**\n     * Create a Venmo account\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} data - The Venmo account data\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    createVenmoAccount(userToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!data.transferMethodCountry) {\n            throw new Error(\"transferMethodCountry is required\");\n        }\n        if (!data.transferMethodCurrency) {\n            throw new Error(\"transferMethodCurrency is required\");\n        }\n        if (!data.accountId) {\n            throw new Error(\"Account is required\");\n        }\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/venmo-accounts`, data, {}, callback);\n    }\n\n    /**\n     * Get a Venmo account\n     *\n     * @param {string} userToken - The user token\n     * @param {string} venmoAccountToken - The venmo account token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or venmoAccountToken is not provided\n     */\n    getVenmoAccount(userToken, venmoAccountToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!venmoAccountToken) {\n            throw new Error(\"venmoAccountToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/venmo-accounts/${encodeURIComponent(venmoAccountToken)}`, {}, callback);\n    }\n\n    /**\n     * List all Venmo accounts\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken is not provided\n     */\n    listVenmoAccounts(userToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        const LIST_VENMO_ACCOUNTS_FILTERS = [\"type\", \"status\", \"createdBefore\", \"createdAfter\", \"sortBy\", \"limit\"];\n        if (options && !Hyperwallet.isValidFilter(options, LIST_VENMO_ACCOUNTS_FILTERS)) {\n            throw new Error(\"Invalid Filter. Expected - \".concat(LIST_VENMO_ACCOUNTS_FILTERS));\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/venmo-accounts`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * Update a venmo account\n     *\n     * @param {string} userToken - The user token\n     * @param {string} venmoAccountToken - The bank account token\n     * @param {Object} data - The venmo account data to update\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or venmoAccountToken is not provided\n     */\n    updateVenmoAccount(userToken, venmoAccountToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!venmoAccountToken) {\n            throw new Error(\"venmoAccountToken is required\");\n        }\n        this.client.doPut(`users/${encodeURIComponent(userToken)}/venmo-accounts/${encodeURIComponent(venmoAccountToken)}`, data, {}, callback);\n    }\n\n    /**\n     * Deactivate a venmo account\n     *\n     * @param {string} userToken -  user token\n     * @param {string} venmoAccountToken - Venmo account token\n     * @param {api-callback} callback - callback for this call\n     *\n     * @throws Will throw an error if userToken or venmoAccountToken is not provided\n     */\n\n    deactivateVenmoAccount(userToken, venmoAccountToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!venmoAccountToken) {\n            throw new Error(\"venmoAccountToken is required\");\n        }\n\n        const transition = {\n            transition: \"DE_ACTIVATED\",\n        };\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/venmo-accounts/${encodeURIComponent(venmoAccountToken)}/status-transitions`, transition, {}, callback);\n    }\n\n    /**\n     * Create Venmo account status transition\n     *\n     * @param {string} userToken - The user token\n     * @param {string} venmoAccountToken - venmo account token\n     * @param {Object} data - Venmo account status transition data\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken or venmoAccountToken is not provided\n     */\n    createVenmoAccountStatusTransition(userToken, venmoAccountToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!venmoAccountToken) {\n            throw new Error(\"venmoAccountToken is required\");\n        }\n\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/venmo-accounts/${encodeURIComponent(venmoAccountToken)}/status-transitions`, data, {}, callback);\n    }\n\n    /**\n     * Get Venmo account status transition\n     *\n     * @param {string} userToken -user token\n     * @param {string} venmoAccountToken - The venmo account token\n     * @param {string} statusTransitionToken - The venmo account status transition token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or venmoAccountToken is not provided\n     */\n    getVenmoAccountStatusTransition(userToken, venmoAccountToken, statusTransitionToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!venmoAccountToken) {\n            throw new Error(\"venmoAccountToken is required\");\n        }\n        if (!statusTransitionToken) {\n            throw new Error(\"statusTransitionToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/venmo-accounts/${encodeURIComponent(venmoAccountToken)}/status-transitions/${encodeURIComponent(statusTransitionToken)}`,\n            {},\n            callback);\n    }\n\n    /**\n     * List all venmo account status transitions\n     *\n     * @param {string} userToken - user token\n     * @param {string} venmoAccountToken - venmo account token\n     * @param {Object} options - query parameters to send\n     * @param {api-callback} callback - callback for this call\n     *\n     * @throws Will throw an error if userToken or venmoAccountToken is not provided\n     */\n    listVenmoAccountStatusTransitions(userToken, venmoAccountToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!venmoAccountToken) {\n            throw new Error(\"venmoAccountToken is required\");\n        }\n        const LIST_VENMO_ACCOUNT_STATUS_TRANSITION_FILTERS = [\"transition\", \"createdBefore\", \"createdAfter\", \"sortBy\", \"limit\"];\n        if (options && !Hyperwallet.isValidFilter(options, LIST_VENMO_ACCOUNT_STATUS_TRANSITION_FILTERS)) {\n            throw new Error(\"Invalid Filter. Expected - \".concat(LIST_VENMO_ACCOUNT_STATUS_TRANSITION_FILTERS));\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/venmo-accounts/${encodeURIComponent(venmoAccountToken)}/status-transitions`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * Validate the options filter\n     *\n     * @param {Object} options - The query parameters in the URI\n     * @param {Object} listFilters - Defined list of filters for a business object\n     */\n\n    static isValidFilter(options, listFilters) {\n        return Object.keys(options).every(elem => listFilters.includes(elem));\n    }\n\n    //--------------------------------------\n    // Business StakeHolder\n    //--------------------------------------\n\n    /**\n     * Create a Business Stakeholder\n     *\n     * @param {string} userToken - The Stakeholder token\n     * @param {Object} data - The Stakeholder data\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    createBusinessStakeholder(userToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/business-stakeholders`, data, {}, callback);\n    }\n\n    /**\n     * Update a Business Stakeholder\n     *\n     * @param {string} userToken - The user token\n     * @param {string} stakeholderToken - The user token\n     * @param {Object} data - The Stakeholder data that should be updated\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    updateBusinessStakeholder(userToken, stakeholderToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!stakeholderToken) {\n            throw new Error(\"stakeholderToken is required\");\n        }\n        this.client.doPut(`users/${encodeURIComponent(userToken)}/business-stakeholders/${encodeURIComponent(stakeholderToken)}`, data, {}, callback);\n    }\n\n    /**\n     * List all Business Stakeholder\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    listBusinessStakeholders(userToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        const LIST_BUSINESS_STAKEHOLDERS_FILTERS = [\"status\", \"createdBefore\", \"createdAfter\", \"sortBy\", \"limit\"];\n        // TODO: Is this included in api, if so follow rules of user listing?\n        if (options && !Hyperwallet.isValidFilter(options, LIST_BUSINESS_STAKEHOLDERS_FILTERS)) {\n            throw new Error(\"Invalid Filter. Expected - \".concat(LIST_BUSINESS_STAKEHOLDERS_FILTERS));\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/business-stakeholders`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * Activate a Business Stakeholder transition\n     *\n     * @param {string} userToken -  user token\n     * @param {string} stakeholderToken -  stakeholder token\n     * @param {api-callback} callback -  callback for this call\n     * @throws Will throw an error if userToken is not provided\n     */\n    activateBusinessStakeholder(userToken, stakeholderToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!stakeholderToken) {\n            throw new Error(\"stakeholderToken is required\");\n        }\n        const data = {\n            transition: \"ACTIVATED\",\n        };\n        this.createBusinessStakeholderStatusTransition(userToken, stakeholderToken, data, callback);\n    }\n\n    /**\n     * Deactivate a Business Stakeholder transition\n     *\n     * @param {string} userToken -  user token\n     * @param {string} stakeholderToken -  stakeholder token\n     * @param {api-callback} callback -  callback for this call\n     * @throws Will throw an error if userToken is not provided\n     */\n    deactivateBusinessStakeholder(userToken, stakeholderToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!stakeholderToken) {\n            throw new Error(\"stakeholderToken is required\");\n        }\n        const data = {\n            transition: \"DE_ACTIVATED\",\n        };\n        this.createBusinessStakeholderStatusTransition(userToken, stakeholderToken, data, callback);\n    }\n\n    /**\n     * Create a Business Stakeholder transition\n     *\n     * @param {string} userToken - user token\n     * @param {string} stakeholderToken -  stakeholder token\n     * @param {Object} data - Stakeholder transition data\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken is not provided\n     */\n    createBusinessStakeholderStatusTransition(userToken, stakeholderToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!stakeholderToken) {\n            throw new Error(\"stakeholderToken is required\");\n        }\n        this.client.doPost(`users/${encodeURIComponent(userToken)}/business-stakeholders/${encodeURIComponent(stakeholderToken)}/status-transitions`, data, {}, callback);\n    }\n\n    /**\n     * Get Business Stakeholder status transition\n     *\n     * @param {string} userToken -user token\n     * @param {string} stakeholderToken - The Business Stakeholder token\n     * @param {string} statusTransitionToken - The Business Stakeholder status transition token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken or stakeholderToken is not provided\n     */\n    getBusinessStakeholderStatusTransition(userToken, stakeholderToken, statusTransitionToken, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!stakeholderToken) {\n            throw new Error(\"stakeholderToken is required\");\n        }\n        if (!statusTransitionToken) {\n            throw new Error(\"statusTransitionToken is required\");\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/business-stakeholders/${encodeURIComponent(stakeholderToken)}/status-transitions/${encodeURIComponent(statusTransitionToken)}`,\n            {},\n            callback);\n    }\n\n    /**\n     * List all Business Stakeholder status transitions\n     *\n     * @param {string} userToken - user token\n     * @param {string} stakeholderToken - Business Stakeholder token\n     * @param {Object} options - query parameters to send\n     * @param {api-callback} callback - callback for this call\n     *\n     * @throws Will throw an error if userToken or stakeholderToken is not provided\n     */\n    listBusinessStakeholderStatusTransitions(userToken, stakeholderToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!stakeholderToken) {\n            throw new Error(\"stakeholderToken is required\");\n        }\n        const LIST_BUSINESS_STAKEHOLDER_STATUS_TRANSITION_FILTERS = [\"transition\", \"createdBefore\", \"createdAfter\", \"sortBy\", \"offset\", \"limit\"];\n        if (options && !Hyperwallet.isValidFilter(options, LIST_BUSINESS_STAKEHOLDER_STATUS_TRANSITION_FILTERS)) {\n            throw new Error(\"Invalid Filter. Expected - \".concat(LIST_BUSINESS_STAKEHOLDER_STATUS_TRANSITION_FILTERS));\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/business-stakeholders/${encodeURIComponent(stakeholderToken)}/status-transitions`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * Upload Documents to Business Stakeholder\n     *\n     * @param {string} userToken - The user token\n     * @param {string} stakeholderToken -  stakeholder token\n     * @param {Object} data - JSON object of the data and files to be uploaded\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if userToken is not provided\n     */\n    uploadBusinessStakeholderDocuments(userToken, stakeholderToken, data, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        if (!stakeholderToken) {\n            throw new Error(\"stakeholderToken is required\");\n        }\n        if (!data || Object.keys(data).length < 1) {\n            throw new Error(\"Files for upload are required\");\n        }\n        this.client.doPutMultipart(`users/${encodeURIComponent(userToken)}/business-stakeholders/${encodeURIComponent(stakeholderToken)}`, data, callback);\n    }\n\n    /**\n     * List of Transfer Methods\n     *\n     * @param {string} userToken - The user token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     * @throws Will throw an error if userToken is not provided\n     */\n    listTransferMethods(userToken, options, callback) {\n        if (!userToken) {\n            throw new Error(\"userToken is required\");\n        }\n        const LIST_TRANSFER_METHODS_FILTERS = [\"status\", \"type\", \"createdBefore\", \"createdAfter\", \"sortBy\", \"limit\"];\n        if (options && !Hyperwallet.isValidFilter(options, LIST_TRANSFER_METHODS_FILTERS)) {\n            throw new Error(\"Invalid Filter. Expected - \".concat(LIST_TRANSFER_METHODS_FILTERS));\n        }\n        this.client.doGet(`users/${encodeURIComponent(userToken)}/transfer-methods`, options, Hyperwallet.handle204Response(callback));\n    }\n\n    /**\n     * Get a transfer status transition\n     *\n     * @param {string} transferToken - The transfer token\n     * @param {string} statusTransitionToken - The status transition token token\n     * @param {api-callback} callback - The callback for this call\n     *\n     * @throws Will throw an error if transferToken is not provided\n     * @throws Will throw an error if statusTransitionToken is not provided\n     */\n    getTransferStatusTransition(transferToken, statusTransitionToken, callback) {\n        if (!transferToken) {\n            throw new Error(\"transferToken is required\");\n        }\n        if (!statusTransitionToken) {\n            throw new Error(\"statusTransitionToken is required\");\n        }\n        this.client.doGet(`transfers/${encodeURIComponent(transferToken)}/status-transitions/${encodeURIComponent(statusTransitionToken)}`, {}, callback);\n    }\n\n    /**\n     * List all transfer status transitions\n     *\n     * @param {string} transferToken - The transfer token\n     * @param {Object} options - The query parameters to send\n     * @param {api-callback} callback - The callback for this call\n     */\n    listTransferStatusTransition(transferToken, options, callback) {\n        if (!transferToken) {\n            throw new Error(\"transferToken is required\");\n        }\n        this.client.doGet(`transfers/${encodeURIComponent(transferToken)}/status-transitions`, options, Hyperwallet.handle204Response(callback));\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/node-sdk/node-sdk/src/Hyperwallet.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Hyperwallet",
    "memberof": "src/Hyperwallet.js",
    "static": true,
    "longname": "src/Hyperwallet.js~Hyperwallet",
    "access": "public",
    "export": true,
    "importPath": "hyperwallet-sdk/src/Hyperwallet.js",
    "importStyle": "Hyperwallet",
    "description": "The Hyperwallet SDK Client",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#constructor",
    "access": "public",
    "description": "Create a instance of the SDK Client",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "config",
        "description": "The API config"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "config.username",
        "description": "The API username"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "config.password",
        "description": "The API password"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "config.programToken",
        "description": "The program token that is used for some API calls"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "config.encryptionData",
        "description": "The JSON object of encryption data"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "https://api.sandbox.hyperwallet.com",
        "defaultRaw": "https://api.sandbox.hyperwallet.com",
        "name": "config.server",
        "description": "The API server to connect to"
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "client",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#client",
    "access": "protected",
    "description": "The instance of the ApiClient",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "ApiClient"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "programToken",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#programToken",
    "access": "protected",
    "description": "The program token that is used for some API calls",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "createUser",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createUser",
    "access": "public",
    "description": "Create a user",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The user data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "return": null
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "getUser",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getUser",
    "access": "public",
    "description": "Load a user",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "updateUser",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#updateUser",
    "access": "public",
    "description": "Update a user",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The user data that should be updated"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "listUsers",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listUsers",
    "access": "public",
    "description": "List all users",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "return": null
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "activateUser",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#activateUser",
    "access": "public",
    "description": "Activate a user",
    "lineNumber": 110,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "user token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "deactivateUser",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#deactivateUser",
    "access": "public",
    "description": "Deactivate a user",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "user token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "lockUser",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#lockUser",
    "access": "public",
    "description": "Lock a user account",
    "lineNumber": 144,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "user token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "freezeUser",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#freezeUser",
    "access": "public",
    "description": "Freeze a user account",
    "lineNumber": 161,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "user token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "preactivateUser",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#preactivateUser",
    "access": "public",
    "description": "Pre-activate a user account",
    "lineNumber": 178,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "user token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "createUserStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createUserStatusTransition",
    "access": "public",
    "description": "Create a user status transition",
    "lineNumber": 196,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "user status transition data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "getUserStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getUserStatusTransition",
    "access": "public",
    "description": "Get user status transition",
    "lineNumber": 213,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "statusTransitionToken",
        "description": "The user status transition token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "listUserStatusTransitions",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listUserStatusTransitions",
    "access": "public",
    "description": "List all user status transitions",
    "lineNumber": 234,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "uploadDocuments",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#uploadDocuments",
    "access": "public",
    "description": "Upload Documents to User",
    "lineNumber": 254,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "JSON object of the data and files to be uploaded"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "createPrepaidCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createPrepaidCard",
    "access": "public",
    "description": "Create a prepaid card",
    "lineNumber": 277,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The prepaid card data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "getPrepaidCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getPrepaidCard",
    "access": "public",
    "description": "Get a prepaid card",
    "lineNumber": 293,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prepaidCardToken",
        "description": "The prepaid card token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or prepaidCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "updatePrepaidCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#updatePrepaidCard",
    "access": "public",
    "description": "Update a prepaid card",
    "lineNumber": 313,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prepaidCardToken",
        "description": "The prepaid card token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The prepaid card data to update"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or prepaidCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "listPrepaidCards",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listPrepaidCards",
    "access": "public",
    "description": "List all prepaid cards",
    "lineNumber": 331,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "suspendPrepaidCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#suspendPrepaidCard",
    "access": "public",
    "description": "Suspend a prepaid card",
    "lineNumber": 350,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prepaidCardToken",
        "description": "The prepaid card token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or prepaidCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "unsuspendPrepaidCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#unsuspendPrepaidCard",
    "access": "public",
    "description": "Unsuspend a prepaid card",
    "lineNumber": 372,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prepaidCardToken",
        "description": "The prepaid card token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or prepaidCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "lostOrStolenPrepaidCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#lostOrStolenPrepaidCard",
    "access": "public",
    "description": "Mark a prepaid card as lost or stolen",
    "lineNumber": 394,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prepaidCardToken",
        "description": "The prepaid card token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or prepaidCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "deactivatePrepaidCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#deactivatePrepaidCard",
    "access": "public",
    "description": "Deactivate a prepaid card",
    "lineNumber": 416,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prepaidCardToken",
        "description": "The prepaid card token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or prepaidCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "lockPrepaidCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#lockPrepaidCard",
    "access": "public",
    "description": "Lock a prepaid card",
    "lineNumber": 438,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prepaidCardToken",
        "description": "The prepaid card token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or prepaidCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "unlockPrepaidCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#unlockPrepaidCard",
    "access": "public",
    "description": "Unlock a prepaid card",
    "lineNumber": 460,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prepaidCardToken",
        "description": "The prepaid card token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or prepaidCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "createPrepaidCardStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createPrepaidCardStatusTransition",
    "access": "public",
    "description": "Create a prepaid card status transition",
    "lineNumber": 483,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prepaidCardToken",
        "description": "The prepaid card token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The prepaid card status transition data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or prepaidCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "getPrepaidCardStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getPrepaidCardStatusTransition",
    "access": "public",
    "description": "Get a prepaid card status transition",
    "lineNumber": 503,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prepaidCardToken",
        "description": "The prepaid card token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "statusTransitionToken",
        "description": "The prepaid card status transition token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken, prepaidCardToken or statusTransitionToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "listPrepaidCardStatusTransitions",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listPrepaidCardStatusTransitions",
    "access": "public",
    "description": "List all prepaid card status transitions",
    "lineNumber": 526,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prepaidCardToken",
        "description": "The prepaid card token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or prepaidCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "createBankCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createBankCard",
    "access": "public",
    "description": "Create a Bank card",
    "lineNumber": 553,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The bank card data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "getBankCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getBankCard",
    "access": "public",
    "description": "Get a bank card",
    "lineNumber": 569,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bankCardToken",
        "description": "The bank card token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or bankCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "updateBankCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#updateBankCard",
    "access": "public",
    "description": "Update a bank card",
    "lineNumber": 589,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bankCardToken",
        "description": "The bank card token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The bank card data to update"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or bankCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "listBankCards",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listBankCards",
    "access": "public",
    "description": "List all bank cards",
    "lineNumber": 607,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "deactivateBankCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#deactivateBankCard",
    "access": "public",
    "description": "Deactivate a bank card",
    "lineNumber": 626,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bankCardToken",
        "description": "The bank card token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or bankCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "createBankCardStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createBankCardStatusTransition",
    "access": "public",
    "description": "Create a bank card status transition",
    "lineNumber": 649,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bankCardToken",
        "description": "The bank card token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The bank card status transition data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or bankCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "getBankCardStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getBankCardStatusTransition",
    "access": "public",
    "description": "Get a bank card status transition",
    "lineNumber": 669,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bankCardToken",
        "description": "The bank card token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "statusTransitionToken",
        "description": "The bank card status transition token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken, bankCardToken or statusTransitionToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "listBankCardStatusTransitions",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listBankCardStatusTransitions",
    "access": "public",
    "description": "List all bank card status transitions",
    "lineNumber": 692,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bankCardToken",
        "description": "The bank card token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or bankCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "getAuthenticationToken",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getAuthenticationToken",
    "access": "public",
    "description": "Get authentication token",
    "lineNumber": 718,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "createPaperCheck",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createPaperCheck",
    "access": "public",
    "description": "Create a paper check",
    "lineNumber": 738,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The paper check data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "getPaperCheck",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getPaperCheck",
    "access": "public",
    "description": "Get a paper check",
    "lineNumber": 754,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "paperCheckToken",
        "description": "The paper check token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or paperCheckToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "updatePaperCheck",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#updatePaperCheck",
    "access": "public",
    "description": "Update a paper check",
    "lineNumber": 774,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "paperCheckToken",
        "description": "The paper check token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The paper check data to update"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or paperCheckToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "listPaperChecks",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listPaperChecks",
    "access": "public",
    "description": "List all paper checks",
    "lineNumber": 792,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "deactivatePaperCheck",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#deactivatePaperCheck",
    "access": "public",
    "description": "Deactivate a paper check",
    "lineNumber": 811,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "paperCheckToken",
        "description": "The paper check token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or paperCheckToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "createPaperCheckStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createPaperCheckStatusTransition",
    "access": "public",
    "description": "Create a paper check status transition",
    "lineNumber": 834,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "paperCheckToken",
        "description": "The paper check token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The paper check status transition data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or paperCheckToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "getPaperCheckStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getPaperCheckStatusTransition",
    "access": "public",
    "description": "Get a paper check status transition",
    "lineNumber": 854,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "paperCheckToken",
        "description": "The paper check token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "statusTransitionToken",
        "description": "The paper check status transition token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken, paperCheckToken or statusTransitionToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "listPaperCheckStatusTransitions",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listPaperCheckStatusTransitions",
    "access": "public",
    "description": "List all paper check status transitions",
    "lineNumber": 877,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "paperCheckToken",
        "description": "The paper check token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or paperCheckToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "createTransfer",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createTransfer",
    "access": "public",
    "description": "Create a transfer",
    "lineNumber": 901,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The transfer data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "return": null
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "getTransfer",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getTransfer",
    "access": "public",
    "description": "Get a transfer",
    "lineNumber": 922,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "transferToken",
        "description": "The transfer token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if transferToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "listTransfers",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listTransfers",
    "access": "public",
    "description": "List all transfers",
    "lineNumber": 935,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "return": null
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "createTransferStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createTransferStatusTransition",
    "access": "public",
    "description": "Create a transfer status transition",
    "lineNumber": 951,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "transferToken",
        "description": "The transfer token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The transfer status transition data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if transferToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "createTransferRefund",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createTransferRefund",
    "access": "public",
    "description": "Create a transfer refund",
    "lineNumber": 970,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "transferToken",
        "description": "The transfer token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The transfer refund data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "return": null
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "getTransferRefund",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getTransferRefund",
    "access": "public",
    "description": "Get a transfer",
    "lineNumber": 989,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "transferToken",
        "description": "The transfer token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "transferRefundToken",
        "description": "The transfer refund token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if transferToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "listTransferRefunds",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listTransferRefunds",
    "access": "public",
    "description": "List all transfers",
    "lineNumber": 1006,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "transferToken",
        "description": "The transfer token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "createPayPalAccount",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createPayPalAccount",
    "access": "public",
    "description": "Create a PayPal account",
    "lineNumber": 1026,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The PayPal account data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "getPayPalAccount",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getPayPalAccount",
    "access": "public",
    "description": "Get a PayPal account",
    "lineNumber": 1051,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "payPalAccountToken",
        "description": "The PayPal account token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or payPalAccountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "listPayPalAccounts",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listPayPalAccounts",
    "access": "public",
    "description": "List all PayPal accounts",
    "lineNumber": 1069,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "updatePayPalAccount",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#updatePayPalAccount",
    "access": "public",
    "description": "Update a PayPal account",
    "lineNumber": 1090,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "payPalAccountToken",
        "description": "The PayPal account token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The PayPal account data to update"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or payPalAccountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "activatePayPalAccount",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#activatePayPalAccount",
    "access": "public",
    "description": "Activate a PayPal account",
    "lineNumber": 1109,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "payPalAccountToken",
        "description": "The PayPal account token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or payPalAccountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "deactivatePayPalAccount",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#deactivatePayPalAccount",
    "access": "public",
    "description": "Deactivate a PayPal account",
    "lineNumber": 1132,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "payPalAccountToken",
        "description": "The PayPal account token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or payPalAccountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "createPayPalAccountStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createPayPalAccountStatusTransition",
    "access": "public",
    "description": "Create PayPal account status transition",
    "lineNumber": 1155,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "payPalAccountToken",
        "description": "PayPal account token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "PayPal account status transition data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or payPalAccountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "getPayPalAccountStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getPayPalAccountStatusTransition",
    "access": "public",
    "description": "Get PayPal account status transition",
    "lineNumber": 1175,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "payPalAccountToken",
        "description": "PayPal account token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "statusTransitionToken",
        "description": "The PayPal account status transition token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or payPalAccountToken or statusTransitionToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "listPayPalAccountStatusTransitions",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listPayPalAccountStatusTransitions",
    "access": "public",
    "description": "List PayPal account status transition",
    "lineNumber": 1198,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "payPalAccountToken",
        "description": "PayPal account token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or payPalAccountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "createBankAccount",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createBankAccount",
    "access": "public",
    "description": "Create a bank account",
    "lineNumber": 1225,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The bank account data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "getBankAccount",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getBankAccount",
    "access": "public",
    "description": "Get a bank account",
    "lineNumber": 1241,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bankAccountToken",
        "description": "The bank account token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or bankAccountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "updateBankAccount",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#updateBankAccount",
    "access": "public",
    "description": "Update a bank account",
    "lineNumber": 1261,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bankAccountToken",
        "description": "The bank account token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The bank account data to update"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or bankAccountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "listBankAccounts",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listBankAccounts",
    "access": "public",
    "description": "List all bank accounts",
    "lineNumber": 1279,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "deactivateBankAccount",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#deactivateBankAccount",
    "access": "public",
    "description": "Deactivate a bank account",
    "lineNumber": 1299,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bankAccountToken",
        "description": "The bank account token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or bankAccountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "createBankAccountStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createBankAccountStatusTransition",
    "access": "public",
    "description": "Create a bank account status transition",
    "lineNumber": 1321,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bankAccountToken",
        "description": "The bank account token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The bank account status transition data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or bankAccountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "getBankAccountStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getBankAccountStatusTransition",
    "access": "public",
    "description": "Get bank account status transition",
    "lineNumber": 1343,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bankAccountToken",
        "description": "The bank account token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bankAccountToken",
        "description": "The bank account token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "statusTransitionToken",
        "description": "The bank account status transition token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or bankAccountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "listBankAccountStatusTransitions",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listBankAccountStatusTransitions",
    "access": "public",
    "description": "List all bank account status transitions",
    "lineNumber": 1368,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "bankAccountToken",
        "description": "The bank account token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or bankAccountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "listBalancesForUser",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listBalancesForUser",
    "access": "public",
    "description": "List balances for a user",
    "lineNumber": 1395,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "listBalancesForPrepaidCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listBalancesForPrepaidCard",
    "access": "public",
    "description": "List balances for a prepaid card",
    "lineNumber": 1416,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prepaidCardToken",
        "description": "The prepaid card token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or prepaidCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "listBalancesForAccount",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listBalancesForAccount",
    "access": "public",
    "description": "List balances for a program accounts",
    "lineNumber": 1440,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "programToken",
        "description": "The program token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountToken",
        "description": "The account token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if programToken or accountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "createPayment",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createPayment",
    "access": "public",
    "description": "Create a payment",
    "lineNumber": 1464,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The payment data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "return": null
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "getPayment",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getPayment",
    "access": "public",
    "description": "Get a payment",
    "lineNumber": 1477,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "paymentToken",
        "description": "The payment token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if paymentToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "listPayments",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listPayments",
    "access": "public",
    "description": "List all payments",
    "lineNumber": 1492,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if invalid payment is provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "createPaymentStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createPaymentStatusTransition",
    "access": "public",
    "description": "Create a payment status transition",
    "lineNumber": 1508,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "paymentToken",
        "description": "The payment token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The payment status transition data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if paymentToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "getPaymentStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getPaymentStatusTransition",
    "access": "public",
    "description": "Get payment status transition",
    "lineNumber": 1525,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "paymentToken",
        "description": "The payment token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "statusTransitionToken",
        "description": "The payment status transition token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if paymentToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "listPaymentStatusTransitions",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listPaymentStatusTransitions",
    "access": "public",
    "description": "List all payment status transitions",
    "lineNumber": 1546,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "paymentToken",
        "description": "The payment token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if paymentToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "getProgram",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getProgram",
    "access": "public",
    "description": "Get a program",
    "lineNumber": 1570,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "programToken",
        "description": "The program token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if programToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "getProgramAccount",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getProgramAccount",
    "access": "public",
    "description": "Get a program account",
    "lineNumber": 1590,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "programToken",
        "description": "The program token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountToken",
        "description": "The account token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if programToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "getTransferMethodConfiguration",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getTransferMethodConfiguration",
    "access": "public",
    "description": "Get a transfer method configuration",
    "lineNumber": 1617,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "country",
        "description": "The transfer method country"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "currency",
        "description": "The transfer method currency"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The transfer method type"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "profileType",
        "description": "The profile type"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken, country, currency, type or profileType is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "listTransferMethodConfigurations",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listTransferMethodConfigurations",
    "access": "public",
    "description": "List all transfer method configurations",
    "lineNumber": 1651,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "createTransferMethod",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createTransferMethod",
    "access": "public",
    "description": "Create a transfer method",
    "lineNumber": 1674,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "jsonCacheToken",
        "description": "The json cache token supplied by the widget"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Transfer method data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      },
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if jsonCacheToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "listReceiptsForProgramAccount",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listReceiptsForProgramAccount",
    "access": "public",
    "description": "List all program account receipts",
    "lineNumber": 1701,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "programToken",
        "description": "The program token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "accountToken",
        "description": "The account token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if programToken or accountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "listReceiptsForUser",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listReceiptsForUser",
    "access": "public",
    "description": "List all user receipts",
    "lineNumber": 1724,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "listReceiptsForPrepaidCard",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listReceiptsForPrepaidCard",
    "access": "public",
    "description": "List all prepaid card receipts",
    "lineNumber": 1745,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prepaidCardToken",
        "description": "The prepaid card token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or prepaidCardToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "listWebhookNotifications",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listWebhookNotifications",
    "access": "public",
    "description": "List webhook notifications",
    "lineNumber": 1769,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "return": null
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "getWebhookNotification",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getWebhookNotification",
    "access": "public",
    "description": "Get a single webhook notification",
    "lineNumber": 1787,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "webhookToken",
        "description": "Webhook token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if webhookToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "addProgramToken",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#addProgramToken",
    "access": "private",
    "description": "Add program token to data object if not already set",
    "lineNumber": 1806,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - The adjusted object"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The adjusted object"
    }
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "handle204Response",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Hyperwallet.js~Hyperwallet.handle204Response",
    "access": "private",
    "description": "Handle 204 response for list calls",
    "lineNumber": 1826,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{api-callback} - A wrapper api callback"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The api callback"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "api-callback"
      ],
      "spread": false,
      "description": "A wrapper api callback"
    }
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "createVenmoAccount",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createVenmoAccount",
    "access": "public",
    "description": "Create a Venmo account",
    "lineNumber": 1854,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The Venmo account data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "getVenmoAccount",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getVenmoAccount",
    "access": "public",
    "description": "Get a Venmo account",
    "lineNumber": 1879,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "venmoAccountToken",
        "description": "The venmo account token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or venmoAccountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "listVenmoAccounts",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listVenmoAccounts",
    "access": "public",
    "description": "List all Venmo accounts",
    "lineNumber": 1897,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "updateVenmoAccount",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#updateVenmoAccount",
    "access": "public",
    "description": "Update a venmo account",
    "lineNumber": 1918,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "venmoAccountToken",
        "description": "The bank account token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The venmo account data to update"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or venmoAccountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "deactivateVenmoAccount",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#deactivateVenmoAccount",
    "access": "public",
    "description": "Deactivate a venmo account",
    "lineNumber": 1938,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "venmoAccountToken",
        "description": "Venmo account token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or venmoAccountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "createVenmoAccountStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createVenmoAccountStatusTransition",
    "access": "public",
    "description": "Create Venmo account status transition",
    "lineNumber": 1961,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "venmoAccountToken",
        "description": "venmo account token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Venmo account status transition data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or venmoAccountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "getVenmoAccountStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getVenmoAccountStatusTransition",
    "access": "public",
    "description": "Get Venmo account status transition",
    "lineNumber": 1982,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "venmoAccountToken",
        "description": "The venmo account token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "statusTransitionToken",
        "description": "The venmo account status transition token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or venmoAccountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "listVenmoAccountStatusTransitions",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listVenmoAccountStatusTransitions",
    "access": "public",
    "description": "List all venmo account status transitions",
    "lineNumber": 2007,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "venmoAccountToken",
        "description": "venmo account token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or venmoAccountToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "isValidFilter",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Hyperwallet.js~Hyperwallet.isValidFilter",
    "access": "public",
    "description": "Validate the options filter",
    "lineNumber": 2028,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters in the URI"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "listFilters",
        "description": "Defined list of filters for a business object"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "createBusinessStakeholder",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createBusinessStakeholder",
    "access": "public",
    "description": "Create a Business Stakeholder",
    "lineNumber": 2045,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The Stakeholder token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The Stakeholder data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "updateBusinessStakeholder",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#updateBusinessStakeholder",
    "access": "public",
    "description": "Update a Business Stakeholder",
    "lineNumber": 2062,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "stakeholderToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The Stakeholder data that should be updated"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "listBusinessStakeholders",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listBusinessStakeholders",
    "access": "public",
    "description": "List all Business Stakeholder",
    "lineNumber": 2081,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "activateBusinessStakeholder",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#activateBusinessStakeholder",
    "access": "public",
    "description": "Activate a Business Stakeholder transition",
    "lineNumber": 2101,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "stakeholderToken",
        "description": "stakeholder token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "deactivateBusinessStakeholder",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#deactivateBusinessStakeholder",
    "access": "public",
    "description": "Deactivate a Business Stakeholder transition",
    "lineNumber": 2122,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "stakeholderToken",
        "description": "stakeholder token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "createBusinessStakeholderStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#createBusinessStakeholderStatusTransition",
    "access": "public",
    "description": "Create a Business Stakeholder transition",
    "lineNumber": 2144,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "stakeholderToken",
        "description": "stakeholder token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Stakeholder transition data"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "getBusinessStakeholderStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getBusinessStakeholderStatusTransition",
    "access": "public",
    "description": "Get Business Stakeholder status transition",
    "lineNumber": 2164,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "stakeholderToken",
        "description": "The Business Stakeholder token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "statusTransitionToken",
        "description": "The Business Stakeholder status transition token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or stakeholderToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "listBusinessStakeholderStatusTransitions",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listBusinessStakeholderStatusTransitions",
    "access": "public",
    "description": "List all Business Stakeholder status transitions",
    "lineNumber": 2189,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "stakeholderToken",
        "description": "Business Stakeholder token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken or stakeholderToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "uploadBusinessStakeholderDocuments",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#uploadBusinessStakeholderDocuments",
    "access": "public",
    "description": "Upload Documents to Business Stakeholder",
    "lineNumber": 2213,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "stakeholderToken",
        "description": "stakeholder token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "JSON object of the data and files to be uploaded"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "listTransferMethods",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listTransferMethods",
    "access": "public",
    "description": "List of Transfer Methods",
    "lineNumber": 2234,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "userToken",
        "description": "The user token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if userToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "getTransferStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#getTransferStatusTransition",
    "access": "public",
    "description": "Get a transfer status transition",
    "lineNumber": 2255,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "transferToken",
        "description": "The transfer token"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "statusTransitionToken",
        "description": "The status transition token token"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if transferToken is not provided"
      },
      {
        "types": [
          "*"
        ],
        "description": "Will throw an error if statusTransitionToken is not provided"
      }
    ],
    "return": null
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "listTransferStatusTransition",
    "memberof": "src/Hyperwallet.js~Hyperwallet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Hyperwallet.js~Hyperwallet#listTransferStatusTransition",
    "access": "public",
    "description": "List all transfer status transitions",
    "lineNumber": 2272,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "transferToken",
        "description": "The transfer token"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The query parameters to send"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "return": null
  },
  {
    "__docId__": 162,
    "kind": "file",
    "name": "src/index.js",
    "content": "import Hyperwallet from \"./Hyperwallet\";\n\nmodule.exports = Hyperwallet;\n",
    "static": true,
    "longname": "/home/runner/work/node-sdk/node-sdk/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 163,
    "kind": "file",
    "name": "src/utils/ApiClient.js",
    "content": "import request from \"superagent\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport packageJson from \"../../package.json\";\nimport Encryption from \"./Encryption\";\nimport HyperwalletVerificationDocument from \"../models/HyperwalletVerificationDocument\";\nimport HyperwalletVerificationDocumentReason from \"../models/HyperwalletVerificationDocumentReason\";\n\n/**\n * The callback interface for api calls\n *\n * @typedef {function} api-callback\n * @param {Object[]} [errors] - In case of an error an array with error objects otherwise undefined\n * @param {string} [errors[].fieldName] - The field name (if error is caused by a particular field)\n * @param {string} errors[].message - The error message\n * @param {string} errors[].code - The error code\n * @param {Object} data - The rest response body\n * @param {Object} res - The raw superagent response object\n */\n\n/**\n * The Hyperwallet API Client\n */\nexport default class ApiClient {\n    /**\n     * Create a instance of the API client\n     *\n     * @param {string} username - The API username\n     * @param {string} password - The API password\n     * @param {string} server - The API server to connect to\n     * @param {string} encryptionData - The API encryption data\n     */\n    constructor(username, password, server, encryptionData) {\n        /**\n         * The API username\n         *\n         * @type {string}\n         * @protected\n         */\n        this.username = username;\n\n        /**\n         * The API password\n         *\n         * @type {string}\n         * @protected\n         */\n        this.password = password;\n\n        /**\n         * The API server to connect to\n         * @type {string}\n         * @protected\n         */\n        this.server = server;\n\n        /**\n         * The Node SDK Version number\n         *\n         * @type {string}\n         * @protected\n         */\n        this.version = packageJson.version;\n\n        /**\n         * The flag shows if encryption is enabled\n         *\n         * @type {boolean}\n         * @protected\n         */\n        this.isEncrypted = false;\n        this.contextId = uuidv4();\n        if (encryptionData && encryptionData.clientPrivateKeySetPath && encryptionData.hyperwalletKeySetPath) {\n            this.isEncrypted = true;\n            this.clientPrivateKeySetPath = encryptionData.clientPrivateKeySetPath;\n            this.hyperwalletKeySetPath = encryptionData.hyperwalletKeySetPath;\n            this.encryption = new Encryption(this.clientPrivateKeySetPath, this.hyperwalletKeySetPath);\n        }\n    }\n\n    /**\n     * Format response to documents model before passing to callback\n     *\n     * @param {Object} res - Response object\n     *\n     */\n    static formatResForCallback(res) {\n        const retRes = res;\n\n        if (res && res.body) {\n            const retBody = res.body;\n            const { documents } = retBody;\n            if (documents && documents.length > 0) {\n                const documentsArr = [];\n                documents.forEach((dVal) => {\n                    const doc = dVal;\n                    if (dVal.reasons && dVal.reasons.length > 0) {\n                        const reasonsArr = [];\n                        dVal.reasons.forEach((rVal) => {\n                            reasonsArr.push(new HyperwalletVerificationDocumentReason(rVal));\n                        });\n                        doc.reasons = reasonsArr;\n                    }\n                    documentsArr.push(new HyperwalletVerificationDocument(doc));\n                });\n                retBody.documents = documentsArr;\n                retRes.body = retBody;\n            }\n        }\n        return retRes;\n    }\n\n    /**\n     * Do a POST call to the Hyperwallet API server\n     *\n     * @param {string} partialUrl - The api endpoint to call (gets prefixed by `server` and `/rest/v4/`)\n     * @param {Object} data - The data to send to the server\n     * @param {Object} params - Query parameters to send in this call\n     * @param {api-callback} callback - The callback for this call\n     */\n    doPost(partialUrl, data, params, callback) {\n        let contentType = \"application/json\";\n        let accept = \"application/json\";\n        let requestDataPromise = new Promise(resolve => resolve(data));\n        if (this.isEncrypted) {\n            contentType = \"application/jose+json\";\n            accept = \"application/jose+json\";\n            ApiClient.createJoseJsonParser();\n            requestDataPromise = this.encryption.encrypt(data);\n        }\n        requestDataPromise.then((requestData) => {\n            request\n                .post(`${this.server}/rest/v4/${partialUrl}`)\n                .auth(this.username, this.password)\n                .set(\"User-Agent\", `Hyperwallet Node SDK v${this.version}`)\n                .set(\"x-sdk-version\", this.version)\n                .set(\"x-sdk-type\", \"NodeJS\")\n                .set(\"x-sdk-contextId\", this.contextId)\n                .type(contentType)\n                .accept(accept)\n                .query(params)\n                .send(requestData)\n                .end(this.wrapCallback(\"POST\", callback));\n        }).catch(() => callback([{ message: \"Failed to encrypt body for POST request\" }], undefined, undefined));\n    }\n\n    /**\n     * Do a PUT call to the Hyperwallet API server to upload documents\n     *\n     * @param {string} partialUrl - The api endpoint to call (gets prefixed by `server` and `/rest/v4/`)\n     * @param {Object} data - The data to send to the server\n     * @param {api-callback} callback - The callback for this call\n     */\n    doPutMultipart(partialUrl, data, callback) {\n        let contentType = \"multipart/form-data\";\n        let accept = \"application/json\";\n        /* eslint-disable no-unused-vars */\n        const keys = Object.keys(data);\n        /* eslint-enable no-unused-vars */\n\n        let requestDataPromise = new Promise(resolve => resolve(data));\n        if (this.isEncrypted) {\n            contentType = \"multipart/form-data\";\n            accept = \"application/jose+json\";\n            ApiClient.createJoseJsonParser();\n            requestDataPromise = this.encryption.encrypt(data);\n        }\n        requestDataPromise.then(() => {\n            const req = request\n                .put(`${this.server}/rest/v4/${partialUrl}`)\n                .auth(this.username, this.password)\n                .set(\"User-Agent\", `Hyperwallet Node SDK v${this.version}`)\n                .set(\"x-sdk-version\", this.version)\n                .set(\"x-sdk-type\", \"NodeJS\")\n                .set(\"x-sdk-contextId\", this.contextId)\n                .type(contentType)\n                .accept(accept);\n            keys.forEach((key) => {\n                if (key === \"data\") {\n                    req.field(key, JSON.stringify(data[key]));\n                } else {\n                    req.attach(key, data[key]);\n                }\n            });\n            req.end(this.wrapCallback(\"PUT\", callback));\n        }).catch(err => callback(err, undefined, undefined));\n    }\n\n    /**\n     * Do a PUT call to the Hyperwallet API server\n     *\n     * @param {string} partialUrl - The api endpoint to call (gets prefixed by server and /rest/v4/)\n     * @param {Object} data - The data to send to the server\n     * @param {Object} params - Query parameters to send in this call\n     * @param {api-callback} callback - The callback for this call\n     */\n    doPut(partialUrl, data, params, callback) {\n        let contentType = \"application/json\";\n        let accept = \"application/json\";\n        let requestDataPromise = new Promise(resolve => resolve(data));\n        if (this.isEncrypted) {\n            contentType = \"application/jose+json\";\n            accept = \"application/jose+json\";\n            ApiClient.createJoseJsonParser();\n            requestDataPromise = this.encryption.encrypt(data);\n        }\n        requestDataPromise.then((requestData) => {\n            request\n                .put(`${this.server}/rest/v4/${partialUrl}`)\n                .auth(this.username, this.password)\n                .set(\"User-Agent\", `Hyperwallet Node SDK v${this.version}`)\n                .set(\"x-sdk-version\", this.version)\n                .set(\"x-sdk-type\", \"NodeJS\")\n                .set(\"x-sdk-contextId\", this.contextId)\n                .type(contentType)\n                .accept(accept)\n                .query(params)\n                .send(requestData)\n                .end(this.wrapCallback(\"PUT\", callback));\n        }).catch(() => callback([{ message: \"Failed to encrypt body for PUT request\" }], undefined, undefined));\n    }\n\n    /**\n     * Do a GET call to the Hyperwallet API server\n     *\n     * @param {string} partialUrl - The api endpoint to call (gets prefixed by `server` and `/rest/v4/`)\n     * @param {Object} params - Query parameters to send in this call\n     * @param {api-callback} callback - The callback for this call\n     */\n    doGet(partialUrl, params, callback) {\n        let contentType = \"application/json\";\n        let accept = \"application/json\";\n        if (this.isEncrypted) {\n            contentType = \"application/jose+json\";\n            accept = \"application/jose+json\";\n            ApiClient.createJoseJsonParser();\n        }\n        request\n            .get(`${this.server}/rest/v4/${partialUrl}`)\n            .auth(this.username, this.password)\n            .set(\"User-Agent\", `Hyperwallet Node SDK v${this.version}`)\n            .set(\"x-sdk-version\", this.version)\n            .set(\"x-sdk-type\", \"NodeJS\")\n            .set(\"x-sdk-contextId\", this.contextId)\n            .type(contentType)\n            .accept(accept)\n            .query(params)\n            .end(this.wrapCallback(\"GET\", callback));\n    }\n\n    /**\n     * Wrap a callback to process possible API and network errors\n     *\n     * @param {string} httpMethod - The http method that is currently processing\n     * @param {api-callback} callback - The final callback\n     * @returns {function(err: Object, res: Object)} - The super agent callback\n     *\n     * @private\n     */\n    wrapCallback(httpMethod, callback = () => null) {\n        return (err, res) => {\n            const contentTypeHeader = res && res.header ? res.header[\"content-type\"] : undefined;\n            if (!err) {\n                const expectedContentType = (this.isEncrypted) ? \"application/jose+json\" : \"application/json\";\n                if (res && res.status !== 204 && contentTypeHeader && !contentTypeHeader.includes(expectedContentType)) {\n                    callback([{\n                        message: \"Invalid Content-Type specified in Response Header\",\n                    }], res ? res.body : undefined, res);\n                    return;\n                }\n            }\n            if (this.isEncrypted && contentTypeHeader && contentTypeHeader.includes(\"application/jose+json\")\n              && res.body && !ApiClient.isEmptyResponseBody(res.body)) {\n                this.processEncryptedResponse(httpMethod, err, res.body, callback);\n            } else {\n                this.processNonEncryptedResponse(err, res, callback);\n            }\n        };\n    }\n\n    /**\n     * Process non encrypted response from server\n     *\n     * @param {Object} err - Error object\n     * @param {Object} res - Response object\n     * @param {api-callback} callback - The final callback\n     *\n     * @private\n     */\n    processNonEncryptedResponse(err, res, callback) {\n        if (!err) {\n            const formattedRes = ApiClient.formatResForCallback(res);\n            callback(undefined, formattedRes.body, formattedRes);\n            return;\n        }\n\n        let errors = [\n            {\n                message: err.status ? err.message : `Could not communicate with ${this.server}`,\n                code: err.status ? err.status.toString() : \"COMMUNICATION_ERROR\",\n            },\n        ];\n        if (res && res.body && res.body.errors) {\n            // eslint-disable-next-line prefer-destructuring\n            errors = res.body.errors;\n        }\n        callback(errors, res ? res.body : undefined, res);\n    }\n\n    /**\n     * Process encrypted response from server\n     *\n     * @param {string} httpMethod - The http method that is currently processing\n     * @param {Object} err - Error object\n     * @param {Object} res - Response object\n     * @param {api-callback} callback - The final callback\n     *\n     * @private\n     */\n    processEncryptedResponse(httpMethod, err, res, callback) {\n        this.encryption.decrypt(res)\n            .then((decryptedData) => {\n                const responseBody = JSON.parse(decryptedData.payload.toString());\n                if (responseBody.errors) {\n                    const responseWithErrors = {};\n                    responseWithErrors.body = responseBody;\n                    this.processNonEncryptedResponse(responseBody, responseWithErrors, callback);\n                } else {\n                    const formattedRes = ApiClient.formatResForCallback({ body: responseBody });\n                    callback(undefined, formattedRes.body, decryptedData);\n                }\n            })\n            .catch(() => callback([{ message: `Failed to decrypt response for ${httpMethod} request` }], res, res));\n    }\n\n    /**\n     * Creates response body parser for application/jose+json content-type\n     *\n     * @private\n     */\n    static createJoseJsonParser() {\n        request.parse[\"application/jose+json\"] = (res, callback) => {\n            let data = \"\";\n            res.on(\"data\", (chunk) => {\n                data += chunk;\n            });\n            res.on(\"end\", () => {\n                callback(null, data);\n            });\n        };\n    }\n\n    /**\n     * Helper function to check if the response body is an empty object\n     *\n     * @private\n     */\n    static isEmptyResponseBody(body) {\n        return Object.keys(body).length === 0 && Object.getPrototypeOf(body) === Object.prototype;\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/node-sdk/node-sdk/src/utils/ApiClient.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 164,
    "kind": "typedef",
    "name": "api-callback",
    "memberof": "src/utils/ApiClient.js",
    "static": true,
    "longname": "src/utils/ApiClient.js~api-callback",
    "access": "public",
    "description": "The callback interface for api calls",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": true,
        "name": "errors",
        "description": "In case of an error an array with error objects otherwise undefined"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "errors[].fieldName",
        "description": "The field name (if error is caused by a particular field)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "errors[].message",
        "description": "The error message"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "errors[].code",
        "description": "The error code"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The rest response body"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "The raw superagent response object"
      }
    ],
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "api-callback"
    }
  },
  {
    "__docId__": 165,
    "kind": "class",
    "name": "ApiClient",
    "memberof": "src/utils/ApiClient.js",
    "static": true,
    "longname": "src/utils/ApiClient.js~ApiClient",
    "access": "public",
    "export": true,
    "importPath": "hyperwallet-sdk/src/utils/ApiClient.js",
    "importStyle": "ApiClient",
    "description": "The Hyperwallet API Client",
    "lineNumber": 23,
    "interface": false
  },
  {
    "__docId__": 166,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#constructor",
    "access": "public",
    "description": "Create a instance of the API client",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "username",
        "description": "The API username"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "password",
        "description": "The API password"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "server",
        "description": "The API server to connect to"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "encryptionData",
        "description": "The API encryption data"
      }
    ]
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "username",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#username",
    "access": "protected",
    "description": "The API username",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "password",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#password",
    "access": "protected",
    "description": "The API password",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "server",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#server",
    "access": "protected",
    "description": "The API server to connect to",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "version",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#version",
    "access": "protected",
    "description": "The Node SDK Version number",
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 171,
    "kind": "member",
    "name": "isEncrypted",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#isEncrypted",
    "access": "protected",
    "description": "The flag shows if encryption is enabled",
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 172,
    "kind": "member",
    "name": "contextId",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#contextId",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "member",
    "name": "clientPrivateKeySetPath",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#clientPrivateKeySetPath",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "hyperwalletKeySetPath",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#hyperwalletKeySetPath",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "member",
    "name": "encryption",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#encryption",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "formatResForCallback",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/ApiClient.js~ApiClient.formatResForCallback",
    "access": "public",
    "description": "Format response to documents model before passing to callback",
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Response object"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "doPost",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#doPost",
    "access": "public",
    "description": "Do a POST call to the Hyperwallet API server",
    "lineNumber": 120,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "partialUrl",
        "description": "The api endpoint to call (gets prefixed by `server` and `/rest/v4/`)"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data to send to the server"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Query parameters to send in this call"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "return": null
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "doPutMultipart",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#doPutMultipart",
    "access": "public",
    "description": "Do a PUT call to the Hyperwallet API server to upload documents",
    "lineNumber": 153,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "partialUrl",
        "description": "The api endpoint to call (gets prefixed by `server` and `/rest/v4/`)"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data to send to the server"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "return": null
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "doPut",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#doPut",
    "access": "public",
    "description": "Do a PUT call to the Hyperwallet API server",
    "lineNumber": 196,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "partialUrl",
        "description": "The api endpoint to call (gets prefixed by server and /rest/v4/)"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data to send to the server"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Query parameters to send in this call"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "return": null
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "doGet",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#doGet",
    "access": "public",
    "description": "Do a GET call to the Hyperwallet API server",
    "lineNumber": 229,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "partialUrl",
        "description": "The api endpoint to call (gets prefixed by `server` and `/rest/v4/`)"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Query parameters to send in this call"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback for this call"
      }
    ],
    "return": null
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "wrapCallback",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#wrapCallback",
    "access": "private",
    "description": "Wrap a callback to process possible API and network errors",
    "lineNumber": 259,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{function(err: Object, res: Object)} - The super agent callback"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "httpMethod",
        "description": "The http method that is currently processing"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The final callback"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "function(err: Object, res: Object)"
      ],
      "spread": false,
      "description": "The super agent callback"
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "processNonEncryptedResponse",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#processNonEncryptedResponse",
    "access": "private",
    "description": "Process non encrypted response from server",
    "lineNumber": 289,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": "Error object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Response object"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The final callback"
      }
    ],
    "return": null
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "processEncryptedResponse",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/ApiClient.js~ApiClient#processEncryptedResponse",
    "access": "private",
    "description": "Process encrypted response from server",
    "lineNumber": 319,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "httpMethod",
        "description": "The http method that is currently processing"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": "Error object"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "res",
        "description": "Response object"
      },
      {
        "nullable": null,
        "types": [
          "api-callback"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The final callback"
      }
    ],
    "return": null
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "createJoseJsonParser",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/ApiClient.js~ApiClient.createJoseJsonParser",
    "access": "private",
    "description": "Creates response body parser for application/jose+json content-type",
    "lineNumber": 340,
    "params": [],
    "return": null
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "isEmptyResponseBody",
    "memberof": "src/utils/ApiClient.js~ApiClient",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/ApiClient.js~ApiClient.isEmptyResponseBody",
    "access": "private",
    "description": "Helper function to check if the response body is an empty object",
    "lineNumber": 357,
    "params": [
      {
        "name": "body",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "file",
    "name": "src/utils/Encryption.js",
    "content": "import jose from \"node-jose\";\nimport fs from \"fs\";\nimport request from \"superagent\";\n\n/**\n * The Hyperwallet Encryption processor\n */\nexport default class Encryption {\n    /**\n     * Create a instance of the Encryption service\n     *\n     * @param {string} clientPrivateKeySetLocation - String that can be a URL or path to file with client JWK set\n     * @param {string} hyperwalletKeySetLocation - String that can be a URL or path to file with hyperwallet JWK set\n     * @param {string} encryptionAlgorithm - JWE encryption algorithm, by default value = RSA-OAEP-256\n     * @param {string} signAlgorithm - JWS signature algorithm, by default value = RS256\n     * @param {string} encryptionMethod - JWE encryption method, by default value = A256CBC-HS512\n     * @param {string} jwsExpirationMinutes - Minutes when JWS signature is valid\n     */\n    constructor(clientPrivateKeySetLocation, hyperwalletKeySetLocation, encryptionAlgorithm = \"RSA-OAEP-256\",\n        signAlgorithm = \"RS256\", encryptionMethod = \"A256CBC-HS512\", jwsExpirationMinutes = 5) {\n        /**\n         * String that can be a URL or path to file with client JWK set\n         *\n         * @type {string}\n         * @protected\n         */\n        this.clientPrivateKeySetLocation = clientPrivateKeySetLocation;\n\n        /**\n         * String that can be a URL or path to file with hyperwallet JWK set\n         *\n         * @type {string}\n         * @protected\n         */\n        this.hyperwalletKeySetLocation = hyperwalletKeySetLocation;\n\n        /**\n         * Client KeyStore object\n         *\n         * @type {string}\n         * @protected\n         */\n        this.clientKeyStore = null;\n\n        /**\n         * Hyperwallet KeyStore object\n         *\n         * @type {string}\n         * @protected\n         */\n        this.hwKeyStore = null;\n\n        /**\n         * JWE encryption algorithm, by default value = RSA-OAEP-256\n         *\n         * @type {string}\n         * @protected\n         */\n        this.encryptionAlgorithm = encryptionAlgorithm;\n\n        /**\n         * JWS signature algorithm, by default value = RS256\n         *\n         * @type {string}\n         * @protected\n         */\n        this.signAlgorithm = signAlgorithm;\n\n        /**\n         * JWE encryption method, by default value = A256CBC-HS512\n         *\n         * @type {string}\n         * @protected\n         */\n        this.encryptionMethod = encryptionMethod;\n\n        /**\n         * Minutes when JWS signature is valid, by default value = 5\n         *\n         * @type {number}\n         * @protected\n         */\n        this.jwsExpirationMinutes = jwsExpirationMinutes;\n    }\n\n    /**\n     * Makes an encrypted request : 1) signs the request body; 2) encrypts payload after signature\n     *\n     * @param {string} body - The request body to be encrypted\n     */\n    encrypt(body) {\n        return new Promise((resolve, reject) => {\n            const keyStorePromise = (this.clientKeyStore && this.hwKeyStore) ? Promise.resolve(this.keyStore) : this.createKeyStore();\n            keyStorePromise\n                .then(() => this.signBody(body))\n                .then(signedBody => this.encryptBody(signedBody))\n                .then(result => resolve(result))\n                .catch(error => reject(error));\n        });\n    }\n\n    /**\n     * Decrypts encrypted response : 1) decrypts the request body; 2) verifies the payload signature\n     *\n     * @param {string} body - The response body to be decrypted\n     */\n    decrypt(body) {\n        return new Promise((resolve, reject) => {\n            const keyStorePromise = this.keyStore ? Promise.resolve(this.keyStore) : this.createKeyStore();\n            keyStorePromise\n                .then(() => this.decryptBody(body))\n                .then(decryptedBody => this.checkSignature(decryptedBody.plaintext))\n                .then(result => resolve(result))\n                .catch(error => reject(error));\n        });\n    }\n\n    /**\n     * Verify if response body has a valid signature\n     *\n     * @param {string} body - The response body to be verified\n     */\n    checkSignature(body) {\n        return new Promise((resolve, reject) => {\n            const key = this.hwKeyStore.all({ alg: this.signAlgorithm })[0];\n            if (!key) {\n                reject(new Error(`JWK set doesn't contain key with algorithm = ${this.signAlgorithm}`));\n                return;\n            }\n            const options = {\n                handlers: {\n                    exp: (jws) => {\n                        if (Encryption.getCurrentTime() > jws.header.exp) {\n                            reject(new Error(\"JWS signature has expired\"));\n                        }\n                    },\n                },\n            };\n            jose.JWS.createVerify(key, options)\n                .verify(body.toString())\n                .then(result => resolve(result))\n                .catch(() => reject(new Error(`Failed to verify signature with key id = ${key.kid}`)));\n        });\n    }\n\n    /**\n     * Decrypts the response body\n     *\n     * @param {string} body - The response body to be decrypted\n     */\n    decryptBody(body) {\n        return new Promise((resolve, reject) => {\n            const key = this.clientKeyStore.all({ alg: this.encryptionAlgorithm })[0];\n            if (!key) {\n                reject(new Error(`JWK set doesn't contain key with algorithm = ${this.encryptionAlgorithm}`));\n                return;\n            }\n            jose.JWE.createDecrypt(key)\n                .decrypt(body)\n                .then(result => resolve(result))\n                .catch(() => reject(new Error(`Failed to decrypt payload with key id = ${key.kid}`)));\n        });\n    }\n\n    /**\n     * Encrypts the request body\n     *\n     * @param {string} body - The request body to be encrypted\n     */\n    encryptBody(body) {\n        return new Promise((resolve, reject) => {\n            const key = this.hwKeyStore.all({ alg: this.encryptionAlgorithm })[0];\n            if (!key) {\n                reject(new Error(`JWK set doesn't contain key with algorithm = ${this.encryptionAlgorithm}`));\n                return;\n            }\n            const encryptionHeader = {\n                format: \"compact\",\n                alg: key.alg,\n                enc: this.encryptionMethod,\n                kid: key.kid,\n            };\n            jose.JWE.createEncrypt(encryptionHeader, key)\n                .update(body)\n                .final()\n                .then(result => resolve(result))\n                .catch(() => reject(new Error(`Failed to encrypt payload with key id = ${key.kid}`)));\n        });\n    }\n\n    /**\n     * Makes signature for request body\n     *\n     * @param {string} body - The request body to be signed\n     */\n    signBody(body) {\n        return new Promise((resolve, reject) => {\n            const key = this.clientKeyStore.all({ alg: this.signAlgorithm })[0];\n            if (!key) {\n                reject(new Error(`JWK set doesn't contain key with algorithm = ${this.signAlgorithm}`));\n                return;\n            }\n            const signHeader = {\n                format: \"compact\",\n                alg: key.alg,\n                fields: {\n                    crit: [\"exp\"],\n                    exp: this.getSignatureExpirationTime(),\n                    kid: key.kid,\n                },\n            };\n            jose.JWS.createSign(signHeader, key)\n                .update(JSON.stringify(body), \"utf8\")\n                .final()\n                .then(result => resolve(result))\n                .catch(() => reject(new Error(`Failed to sign with key id = ${key.kid}`)));\n        });\n    }\n\n    /**\n     * Calculates signature expiration time in seconds ( by default expiration time = 5 minutes )\n     */\n    getSignatureExpirationTime() {\n        const millisecondsInMinute = 60000;\n        const millisecondsInSecond = 1000;\n        const currentTime = new Date(new Date().getTime() + this.jwsExpirationMinutes * millisecondsInMinute).getTime();\n        return Math.round(currentTime / millisecondsInSecond);\n    }\n\n    /**\n     * Get current time in seconds\n     */\n    static getCurrentTime() {\n        const millisecondsInSecond = 1000;\n        return Math.round(new Date().getTime() / millisecondsInSecond);\n    }\n\n    /**\n     * Creates 2 JWK key stores : 1) for client keys 2) for hyperwallet keys\n     */\n    createKeyStore() {\n        return new Promise((resolve, reject) => {\n            Encryption.readKeySet(this.hyperwalletKeySetLocation)\n                .then(jwkSet => this.createKeyStoreFromJwkSet(this.hyperwalletKeySetLocation, jwkSet))\n                .then(() => Encryption.readKeySet(this.clientPrivateKeySetLocation))\n                .then(jwkSet => this.createKeyStoreFromJwkSet(this.clientPrivateKeySetLocation, jwkSet))\n                .then(result => resolve(result))\n                .catch(error => reject(error));\n        });\n    }\n\n    /**\n     * Converts JWK set in JSON format to JOSE key store format\n     *\n     * @param {string} jwkSetPath - The location of JWK set (can be URL string or path to file)\n     * @param {string} jwkSet - The JSON representation of JWK set, to be converted to keystore\n     */\n    createKeyStoreFromJwkSet(jwkSetPath, jwkSet) {\n        return new Promise((resolve, reject) => {\n            jose.JWK.asKeyStore(jwkSet)\n                .then((result) => {\n                    if (jwkSetPath === this.clientPrivateKeySetLocation) {\n                        this.clientKeyStore = result;\n                    } else {\n                        this.hwKeyStore = result;\n                    }\n                    resolve(result);\n                })\n                .catch(() => reject(new Error(\"Failed to create keyStore from given jwkSet\")));\n        });\n    }\n\n    /**\n     * Reads JWK set in JSON format either from given URL or path to local file\n     *\n     * @param {string} keySetPath - The location of JWK set (can be URL string or path to file)\n     */\n    static readKeySet(keySetPath) {\n        return new Promise((resolve, reject) => {\n            if (fs.existsSync(keySetPath)) {\n                fs.readFile(keySetPath, { encoding: \"utf-8\" }, (err, keySetData) => {\n                    if (!err) {\n                        resolve(keySetData);\n                    } else {\n                        reject(new Error(err));\n                    }\n                });\n            } else {\n                Encryption.checkUrlIsValid(keySetPath, (isValid) => {\n                    if (isValid) {\n                        request(keySetPath, (error, response) => {\n                            if (!error) {\n                                const responseBody = response.body && Object.keys(response.body).length !== 0 ? response.body : response.text;\n                                resolve(responseBody);\n                            }\n                        });\n                    } else {\n                        reject(new Error(`Wrong JWK set location path = ${keySetPath}`));\n                    }\n                });\n            }\n        });\n    }\n\n    /**\n     * Checks if an input string is a valid URL\n     *\n     * @param {string} url - The URL string to be verified\n     * @param {string} callback - The callback method to process the verification result of input url\n     */\n    static checkUrlIsValid(url, callback) {\n        request(url, (error, response) => {\n            callback(!error && response.statusCode === 200);\n        });\n    }\n\n    /**\n     * Convert encrypted string to array of Buffer\n     *\n     * @param {string} encryptedBody - Encrypted body to be decoded\n     */\n    static base64Decode(encryptedBody) {\n        const parts = encryptedBody.split(\".\");\n        const decodedParts = [];\n        parts.forEach((elem) => {\n            decodedParts.push(jose.util.base64url.decode(elem));\n        });\n        const decodedBody = {};\n        decodedBody.parts = decodedParts;\n        return decodedBody;\n    }\n\n    /**\n     * Convert array of Buffer to encrypted string\n     *\n     * @param {string} decodedBody - Array of Buffer to be decoded to encrypted string\n     */\n    static base64Encode(decodedBody) {\n        const encodedParts = [];\n        decodedBody.parts.forEach((part) => {\n            encodedParts.push(jose.util.base64url.encode(Buffer.from(JSON.parse(JSON.stringify(part)).data)));\n        });\n        return encodedParts.join(\".\");\n    }\n}\n",
    "static": true,
    "longname": "/home/runner/work/node-sdk/node-sdk/src/utils/Encryption.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 188,
    "kind": "class",
    "name": "Encryption",
    "memberof": "src/utils/Encryption.js",
    "static": true,
    "longname": "src/utils/Encryption.js~Encryption",
    "access": "public",
    "export": true,
    "importPath": "hyperwallet-sdk/src/utils/Encryption.js",
    "importStyle": "Encryption",
    "description": "The Hyperwallet Encryption processor",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 189,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#constructor",
    "access": "public",
    "description": "Create a instance of the Encryption service",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "clientPrivateKeySetLocation",
        "description": "String that can be a URL or path to file with client JWK set"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "hyperwalletKeySetLocation",
        "description": "String that can be a URL or path to file with hyperwallet JWK set"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "encryptionAlgorithm",
        "description": "JWE encryption algorithm, by default value = RSA-OAEP-256"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "signAlgorithm",
        "description": "JWS signature algorithm, by default value = RS256"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "encryptionMethod",
        "description": "JWE encryption method, by default value = A256CBC-HS512"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "jwsExpirationMinutes",
        "description": "Minutes when JWS signature is valid"
      }
    ]
  },
  {
    "__docId__": 190,
    "kind": "member",
    "name": "clientPrivateKeySetLocation",
    "memberof": "src/utils/Encryption.js~Encryption",
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#clientPrivateKeySetLocation",
    "access": "protected",
    "description": "String that can be a URL or path to file with client JWK set",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 191,
    "kind": "member",
    "name": "hyperwalletKeySetLocation",
    "memberof": "src/utils/Encryption.js~Encryption",
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#hyperwalletKeySetLocation",
    "access": "protected",
    "description": "String that can be a URL or path to file with hyperwallet JWK set",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 192,
    "kind": "member",
    "name": "clientKeyStore",
    "memberof": "src/utils/Encryption.js~Encryption",
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#clientKeyStore",
    "access": "protected",
    "description": "Client KeyStore object",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 193,
    "kind": "member",
    "name": "hwKeyStore",
    "memberof": "src/utils/Encryption.js~Encryption",
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#hwKeyStore",
    "access": "protected",
    "description": "Hyperwallet KeyStore object",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 194,
    "kind": "member",
    "name": "encryptionAlgorithm",
    "memberof": "src/utils/Encryption.js~Encryption",
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#encryptionAlgorithm",
    "access": "protected",
    "description": "JWE encryption algorithm, by default value = RSA-OAEP-256",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 195,
    "kind": "member",
    "name": "signAlgorithm",
    "memberof": "src/utils/Encryption.js~Encryption",
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#signAlgorithm",
    "access": "protected",
    "description": "JWS signature algorithm, by default value = RS256",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 196,
    "kind": "member",
    "name": "encryptionMethod",
    "memberof": "src/utils/Encryption.js~Encryption",
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#encryptionMethod",
    "access": "protected",
    "description": "JWE encryption method, by default value = A256CBC-HS512",
    "lineNumber": 75,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 197,
    "kind": "member",
    "name": "jwsExpirationMinutes",
    "memberof": "src/utils/Encryption.js~Encryption",
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#jwsExpirationMinutes",
    "access": "protected",
    "description": "Minutes when JWS signature is valid, by default value = 5",
    "lineNumber": 83,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "encrypt",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#encrypt",
    "access": "public",
    "description": "Makes an encrypted request : 1) signs the request body; 2) encrypts payload after signature",
    "lineNumber": 91,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The request body to be encrypted"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "decrypt",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#decrypt",
    "access": "public",
    "description": "Decrypts encrypted response : 1) decrypts the request body; 2) verifies the payload signature",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The response body to be decrypted"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "checkSignature",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#checkSignature",
    "access": "public",
    "description": "Verify if response body has a valid signature",
    "lineNumber": 123,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The response body to be verified"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "decryptBody",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#decryptBody",
    "access": "public",
    "description": "Decrypts the response body",
    "lineNumber": 151,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The response body to be decrypted"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "encryptBody",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#encryptBody",
    "access": "public",
    "description": "Encrypts the request body",
    "lineNumber": 170,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The request body to be encrypted"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "signBody",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#signBody",
    "access": "public",
    "description": "Makes signature for request body",
    "lineNumber": 196,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "body",
        "description": "The request body to be signed"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "getSignatureExpirationTime",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#getSignatureExpirationTime",
    "access": "public",
    "description": "Calculates signature expiration time in seconds ( by default expiration time = 5 minutes )",
    "lineNumber": 223,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "getCurrentTime",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/Encryption.js~Encryption.getCurrentTime",
    "access": "public",
    "description": "Get current time in seconds",
    "lineNumber": 233,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "createKeyStore",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#createKeyStore",
    "access": "public",
    "description": "Creates 2 JWK key stores : 1) for client keys 2) for hyperwallet keys",
    "lineNumber": 241,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "createKeyStoreFromJwkSet",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Encryption.js~Encryption#createKeyStoreFromJwkSet",
    "access": "public",
    "description": "Converts JWK set in JSON format to JOSE key store format",
    "lineNumber": 258,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "jwkSetPath",
        "description": "The location of JWK set (can be URL string or path to file)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "jwkSet",
        "description": "The JSON representation of JWK set, to be converted to keystore"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "readKeySet",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/Encryption.js~Encryption.readKeySet",
    "access": "public",
    "description": "Reads JWK set in JSON format either from given URL or path to local file",
    "lineNumber": 278,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "keySetPath",
        "description": "The location of JWK set (can be URL string or path to file)"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "checkUrlIsValid",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/Encryption.js~Encryption.checkUrlIsValid",
    "access": "public",
    "description": "Checks if an input string is a valid URL",
    "lineNumber": 311,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "The URL string to be verified"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback method to process the verification result of input url"
      }
    ],
    "return": null
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "base64Decode",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/Encryption.js~Encryption.base64Decode",
    "access": "public",
    "description": "Convert encrypted string to array of Buffer",
    "lineNumber": 322,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "encryptedBody",
        "description": "Encrypted body to be decoded"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "base64Encode",
    "memberof": "src/utils/Encryption.js~Encryption",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/Encryption.js~Encryption.base64Encode",
    "access": "public",
    "description": "Convert array of Buffer to encrypted string",
    "lineNumber": 338,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "decodedBody",
        "description": "Array of Buffer to be decoded to encrypted string"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "[![Build Status](https://travis-ci.org/hyperwallet/node-sdk.png?branch=master)](https://travis-ci.org/hyperwallet/node-sdk)\n[![Coverage Status](https://coveralls.io/repos/github/hyperwallet/node-sdk/badge.svg?branch=master)](https://coveralls.io/github/hyperwallet/node-sdk?branch=master)\n[![Document](http://hyperwallet.github.io/node-sdk/badge.svg?t=0)](http://hyperwallet.github.io/node-sdk)\n[![NPM version](https://badge.fury.io/js/hyperwallet-sdk.png)](http://badge.fury.io/js/hyperwallet-sdk)\n\nHyperwallet REST SDK (Beta)\n===========================\n\nA library to manage users, transfer methods and payments through the Hyperwallet Rest V4 API\nTo access Rest V3 APIs please use SDK v1.5\n\nPrerequisites\n------------\n\nHyperwallet's NodeJS server SDK requires at minimum NodeJS 6.15.1 and above.\n\nInstallation\n------------\n\n```bash\n$ npm install hyperwallet-sdk\n```\n\n\nDocumentation\n-------------\n\nDocumentation is available at http://hyperwallet.github.io/node-sdk.\n\n\nAPI Overview\n------------\n\nTo write an app using the SDK\n\n* Register for a sandbox account and get your username, password and program token at the [Hyperwallet Program Portal](https://portal.hyperwallet.com).\n* Add dependency `hyperwallet-sdk` to your `package.json`.\n* Require `hyperwallet-sdk` in your file\n  ```js\n  var Hyperwallet = require(\"hyperwallet-sdk\");\n  ```\n  \n* Create a instance of the Hyperwallet Client (with username, password and program token)\n  ```js\n  var client = new Hyperwallet({\n    username: \"restapiuser@4917301618\",\n    password: \"mySecurePassword!\",\n    programToken: \"prg-645fc30d-83ed-476c-a412-32c82738a20e\",\n  });\n  ```\n* Start making API calls (e.g. create a user)\n  ```js\n  var userData = {\n     clientUserId: \"test-client-id-1\",\n     profileType: \"INDIVIDUAL\",\n     firstName: \"Daffyd\",\n     lastName: \"y Goliath\",\n     email: \"testmail-1@hyperwallet.com\",\n     addressLine1: \"123 Main Street\",\n     city: \"Austin\",\n     stateProvince: \"TX\",\n     country: \"US\",\n     postalCode: \"78701\",\n  };\n\n  client.createUser(userData, function(errors, body, res) {\n     if (errors) {\n        console.log(\"Create User Failed\");\n        console.log(errors);\n     } else {\n        console.log(\"Create User Response\");\n        console.log(body);\n     }\n  });\n  ```\n  The displayed callback format is valid for all SDK methods. For more information see the [Callback Documentation](http://hyperwallet.github.io/node-sdk/typedef/index.html#static-typedef-api-callback).\n\n\nDevelopment\n-----------\n\nRun the tests using [`npm`](https://www.npmjs.com/):\n\n```bash\n$ npm install\n$ npm test\n```\n\n\nReference\n---------\n\n[REST API Reference](https://sandbox.hyperwallet.com/developer-portal/#/docs)\n\n\nLicense\n-------\n\n[MIT](https://raw.githubusercontent.com/hyperwallet/node-sdk/master/LICENSE)\n",
    "longname": "/home/runner/work/node-sdk/node-sdk/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"hyperwallet-sdk\",\n  \"version\": \"2.1.0\",\n  \"description\": \"A library to manage users, transfer methods and payments through the Hyperwallet API\",\n  \"main\": \"lib/index.js\",\n  \"dependencies\": {\n    \"form-data\": \"^3.0.0\",\n    \"node-jose\": \"^2.1.0\",\n    \"object-assign\": \"^4.1.0\",\n    \"superagent\": \"^4.0.0\",\n    \"uuid\": \"^8.3.1\"\n  },\n  \"scripts\": {\n    \"lint\": \"eslint ./src && eslint ./test && eslint ./examples\",\n    \"prod\": \"babel src -d lib\",\n    \"docs\": \"esdoc -c ./.esdoc.json\",\n    \"deploy-docs\": \"npm run docs && gh-pages -d docs\",\n    \"test\": \"npm run lint && npm run test-unit\",\n    \"test-unit\": \"nyc --reporter lcov mocha --require babel-core/register test/**/*.js test/*.js\",\n    \"test-coverage\": \"nyc npm run test\",\n    \"coveralls\": \"npm run test-coverage && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js\",\n    \"prepublish-prod\": \"npm test && npm run prod\",\n    \"publish-please\": \"publish-please\",\n    \"prepublish\": \"publish-please guard\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/hyperwallet/node-sdk.git\"\n  },\n  \"keywords\": [\n    \"hyperwallet\",\n    \"sdk\",\n    \"rest\",\n    \"bankaccount\",\n    \"payout\",\n    \"creditcard\",\n    \"ach\"\n  ],\n  \"author\": \"Florian Krauthan <fkrauthan@hyperwallet.com>\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/hyperwallet/node-sdk/issues\"\n  },\n  \"homepage\": \"http://hyperwallet.github.io/node-sdk\",\n  \"devDependencies\": {\n    \"babel-eslint\": \"^8.2.6\",\n    \"babel-preset-es2015\": \"^6.9.0\",\n    \"babel-preset-stage-0\": \"^6.5.0\",\n    \"babel-register\": \"^6.9.0\",\n    \"chai\": \"^3.5.0\",\n    \"coveralls\": \"^3.0.2\",\n    \"dirty-chai\": \"^1.2.2\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^4.19.1\",\n    \"eslint-config-airbnb-base\": \"^13.2.0\",\n    \"eslint-plugin-import\": \"^2.17.2\",\n    \"gh-pages\": \"^3.1.0\",\n    \"mocha\": \"^5.2.0\",\n    \"nock\": \"^10.0.4\",\n    \"nyc\": \"^15.0.0\",\n    \"publish-please\": \"^5.4.3\",\n    \"sinon\": \"^1.17.4\",\n    \"sinon-chai\": \"^2.8.0\"\n  },\n  \"engines\": {\n    \"node\": \">=0.12\",\n    \"iojs\": \">=1.0\"\n  }\n}\n",
    "longname": "/home/runner/work/node-sdk/node-sdk/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 214,
    "kind": "testFile",
    "name": "test/Hyperwallet.spec.js",
    "content": "import chai, { expect } from \"chai\";\nimport dirtyChai from \"dirty-chai\";\nimport sinon from \"sinon\";\nimport sinonChai from \"sinon-chai\";\n\nimport Hyperwallet from \"../src/Hyperwallet\";\nimport ApiClient from \"../src/utils/ApiClient\";\n\nchai.should();\nchai.use(dirtyChai);\nchai.use(sinonChai);\n\n/** @test {Hyperwallet} */\ndescribe(\"Hyperwallet\", () => {\n    /** @test {Hyperwallet#constructor} */\n    describe(\"constructor()\", () => {\n        /** @test {Hyperwallet#constructor} */\n        it(\"should initialize ApiClient with default server\", () => {\n            const client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client.username.should.be.equal(\"test-username\");\n            client.client.password.should.be.equal(\"test-password\");\n            client.client.server.should.be.equal(\"https://api.sandbox.hyperwallet.com\");\n        });\n\n        /** @test {Hyperwallet#constructor} */\n        it(\"should set programToken to undefined if not provided\", () => {\n            const client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n\n            expect(client.programToken).to.be.undefined();\n        });\n\n        /** @test {Hyperwallet#constructor} */\n        it(\"should set programToken if provided\", () => {\n            const client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n                programToken: \"test-program-token\",\n            });\n\n            client.programToken.should.be.equal(\"test-program-token\");\n        });\n\n        /** @test {Hyperwallet#constructor} */\n        it(\"should initialize ApiClient with provided server\", () => {\n            const client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n                server: \"test-server\",\n            });\n\n            client.client.server.should.be.equal(\"test-server\");\n        });\n\n        /** @test {Hyperwallet#constructor} */\n        it(\"should throw error if username is missing\", () => {\n            expect(() => new Hyperwallet({\n                password: \"test-password\",\n            })).to.throw(\"You need to specify your API username and password!\");\n        });\n\n        /** @test {Hyperwallet#constructor} */\n        it(\"should throw error if password is missing\", () => {\n            expect(() => new Hyperwallet({\n                username: \"test-username\",\n            })).to.throw(\"You need to specify your API username and password!\");\n        });\n\n        /** @test {Hyperwallet#constructor} */\n        it(\"should throw error if username and password is missing\", () => {\n            expect(() => new Hyperwallet({\n            })).to.throw(\"You need to specify your API username and password!\");\n        });\n    });\n\n    //--------------------------------------\n    // TLS verification\n    //--------------------------------------\n\n    describe(\"listUsers()\", () => {\n        it(\"should not have any TLS issues\", (cb) => {\n            const client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.listUsers({}, (err, body, res) => {\n                res.status.should.be.equal(401);\n                cb();\n            });\n        });\n    });\n\n    //--------------------------------------\n    // Helpers\n    //--------------------------------------\n\n    /** @test {Hyperwallet#formatResForCallback} */\n    describe(\"formatResForCallback()\", () => {\n        /** @test {Hyperwallet#formatResForCallback} */\n        it(\"should return a formated response body, parse reasons\", () => {\n            const uploadRejectionData = {\n                body: {\n                    token: \"tkn-12345\",\n                    documents: [{\n                        category: \"IDENTIFICATION\",\n                        type: \"DRIVERS_LICENSE\",\n                        country: \"AL\",\n                        status: \"INVALID\",\n                        reasons: [\n                            {\n                                name: \"DOCUMENT_CORRECTION_REQUIRED\",\n                                description: \"Document requires correction\",\n                            },\n                            {\n                                name: \"DOCUMENT_NOT_DECISIVE\",\n                                description: \"Decision cannot be made based on document. Alternative document required\",\n                            },\n                        ],\n                        createdOn: \"2020-11-24T19:05:02\",\n                    }],\n                },\n            };\n            const formattedRes = ApiClient.formatResForCallback(uploadRejectionData);\n            expect(formattedRes.body.documents[0].type).to.equal(uploadRejectionData.body.documents[0].type);\n            expect(formattedRes.body.documents[0].reasons[0].name).to.equal(uploadRejectionData.body.documents[0].reasons[0].name);\n            expect(formattedRes.body.documents[0].createdOn).to.equal(uploadRejectionData.body.documents[0].createdOn);\n        });\n\n        /** @test {Hyperwallet#formatResForCallback} */\n        it(\"should return a formated response body, parse documents\", () => {\n            const uploadRejectionData = {\n                body: {\n                    token: \"tkn-12345\",\n                    documents: [{\n                        category: \"IDENTIFICATION\",\n                        type: \"DRIVERS_LICENSE\",\n                        country: \"AL\",\n                        status: \"NEW\",\n                        createdOn: \"2020-11-24T19:05:02\",\n                    }],\n                },\n            };\n            const formattedRes = ApiClient.formatResForCallback(uploadRejectionData);\n            expect(formattedRes.body.documents[0].type).to.equal(uploadRejectionData.body.documents[0].type);\n            expect(formattedRes.body.documents[0].createdOn).to.equal(uploadRejectionData.body.documents[0].createdOn);\n        });\n\n        /** @test {Hyperwallet#formatResForCallback} */\n        it(\"should not modify response body with no documents\", () => {\n            const uploadData = { body: { token: \"tkn-12345\" } };\n            const formattedRes = ApiClient.formatResForCallback(uploadData);\n            expect(formattedRes.body.token).to.equal(uploadData.body.token);\n        });\n    });\n    //--------------------------------------\n    // Users\n    //--------------------------------------\n\n    /** @test {Hyperwallet#createUser} */\n    describe(\"createUser()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createUser} */\n        it(\"should do post call to users endpoint without programToken added\", () => {\n            const callback = () => null;\n            client.createUser({\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n\n        /** @test {Hyperwallet#createUser} */\n        it(\"should do post call to users endpoint with programToken added\", () => {\n            client.programToken = \"test-program-token\";\n\n            const callback = () => null;\n            client.createUser({\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users\", {\n                test: \"value\",\n                programToken: \"test-program-token\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getUser} */\n    describe(\"getUser()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getUser} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getUser(undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getUser} */\n        it(\"should do get call if userToken is provided\", () => {\n            const callback = () => null;\n            client.getUser(\"test-user-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#updateUser} */\n    describe(\"updateUser()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPut: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#updateUser} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.updateUser(undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#updateUser} */\n        it(\"should do put call to users endpoint without programToken added\", () => {\n            const callback = () => null;\n            client.updateUser(\"test-user-token\", {\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n\n        /** @test {Hyperwallet#updateUser} */\n        it(\"should do put call to users endpoint with programToken added\", () => {\n            client.programToken = \"test-program-token\";\n\n            const callback = () => null;\n            client.updateUser(\"test-user-token\", {\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token\", {\n                test: \"value\",\n                programToken: \"test-program-token\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listUsers} */\n    describe(\"listUsers()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listUsers} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            const options = {\n                clientUserId: \"test-client-user-id\",\n                email: \"test-email\",\n                programToken: \"test-programToken\",\n                status: \"test-status\",\n                verificationStatus: \"test-verificationStatus\",\n                taxVerificationStatus: \"test-taxVerificationStatus\",\n                createdBefore: \"test-createdBefore\",\n                createdAfter: \"test-createdBefore\",\n                sortBy: \"test-sortBy\",\n                limit: \"test-limit\",\n            };\n            client.listUsers(options, callback);\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users\", options);\n        });\n\n        /** @test {Hyperwallet#listUsers} */\n        it(\"should throw error for invalid filter\", () => {\n            const callback = () => null;\n            expect(() => client.listUsers({ clientUserId: \"test-client-user-id\", test1: \"value\" }, callback))\n                .to.throw(\"Invalid Filter. Expected - clientUserId,email,programToken,status,verificationStatus,taxVerificationStatus,createdBefore,createdAfter,sortBy,limit\");\n        });\n        /** @test {Hyperwallet#listUsers} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listUsers({}, callback);\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users\", {});\n        });\n\n        /** @test {Hyperwallet#listUsers} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listUsers({}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    /** @test {Hyperwallet#activateUser} */\n    describe(\"activateUser()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /**\n         * @test {Hyperwallet#activateUser}\n         */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.activateUser(undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /**\n         * @test {Hyperwallet#activateUser}\n         */\n        it(\"should send transition to 'ACTIVATED'\", () => {\n            const callback = () => null;\n            client.activateUser(\"test-user-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/status-transitions\", {\n                transition: \"ACTIVATED\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#deactivateUser} */\n    describe(\"deactivateUser()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /**\n         * @test {Hyperwallet#deactivateUser}\n         */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.deactivateUser(undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /**\n         * @test {Hyperwallet#deactivateUser}\n         */\n        it(\"should send transition to 'DE_ACTIVATED'\", () => {\n            const callback = () => null;\n            client.deactivateUser(\"test-user-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/status-transitions\", {\n                transition: \"DE_ACTIVATED\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#lockUser} */\n    describe(\"lockUser()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /**\n         * @test {Hyperwallet#lockUser}\n         */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.lockUser(undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /**\n         * @test {Hyperwallet#lockUser}\n         */\n        it(\"should send transition to 'LOCKED'\", () => {\n            const callback = () => null;\n            client.lockUser(\"test-user-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/status-transitions\", {\n                transition: \"LOCKED\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#freezeUser} */\n    describe(\"freezeUser()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /**\n         * @test {Hyperwallet#freezeUser}\n         */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.freezeUser(undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /**\n         * @test {Hyperwallet#freezeUser}\n         */\n        it(\"should send transition to 'FROZEN'\", () => {\n            const callback = () => null;\n            client.freezeUser(\"test-user-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/status-transitions\", {\n                transition: \"FROZEN\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#preactivateUser} */\n    describe(\"preactivateUser()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /**\n         * @test {Hyperwallet#preactivateUser}\n         */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.preactivateUser(undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /**\n         * @test {Hyperwallet#preactivateUser}\n         */\n        it(\"should send transition to 'PRE_ACTIVATED'\", () => {\n            const callback = () => null;\n            client.preactivateUser(\"test-user-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/status-transitions\", {\n                transition: \"PRE_ACTIVATED\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#createUserStatusTransition} */\n    describe(\"createUserStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createUserStatusTransition} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createUserStatusTransition(undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#createUserStatusTransition} */\n        it(\"should send post call to user status transition endpoint\", () => {\n            const callback = () => null;\n            client.createUserStatusTransition(\"test-user-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/status-transitions\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getUserStatusTransition} */\n    describe(\"getUserStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getUserStatusTransition} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getUserStatusTransition(undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getUserStatusTransition} */\n        it(\"should throw error if statusTransitionToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getUserStatusTransition(\"test-user-token\", undefined, callback)).to.throw(\"statusTransitionToken is required\");\n        });\n\n        /** @test {Hyperwallet#getUserStatusTransition} */\n        it(\"should do get call if userToken and statusTransitionToken is provided\", () => {\n            const callback = () => null;\n            client.getUserStatusTransition(\"test-user-token\", \"status-transition-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/status-transitions/status-transition-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listUserStatusTransitions} */\n    describe(\"listUserStatusTransitions()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listUserStatusTransitions} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            const options = {\n                transition: \"test-transition\",\n                createdBefore: \"test-createdBefore\",\n                createdAfter: \"test-createdBefore\",\n                sortBy: \"test-sortBy\",\n                limit: \"test-limit\",\n            };\n            client.listUserStatusTransitions(\"test-user-token\", options, callback);\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/status-transitions\", options);\n        });\n\n        /** @test {Hyperwallet#listUserStatusTransitions} */\n        it(\"should throw error for invalid filter\", () => {\n            const callback = () => null;\n            expect(() => client.listUserStatusTransitions(\"test-user-token\", { transition: \"test-transition\", test1: \"value\" }, callback))\n                .to.throw(\"Invalid Filter. Expected - transition,createdBefore,createdAfter,sortBy,limit\");\n        });\n\n        /** @test {Hyperwallet#listUserStatusTransitions} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listUserStatusTransitions(undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listUserStatusTransitions} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listUserStatusTransitions(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/status-transitions\", {});\n        });\n\n        /** @test {Hyperwallet#listUserStatusTransitions} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listUserStatusTransitions(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/status-transitions\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    describe(\"uploadDocuments()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPutMultipart: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#uploadDocuments} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.uploadDocuments(undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#uploadDocuments} */\n        it(\"should throw error if data is missing\", () => {\n            const callback = () => null;\n            expect(() => client.uploadDocuments(\"test-user-token\", null, callback)).to.throw(\"Files for upload are require\");\n        });\n\n\n        /** @test {Hyperwallet#uploadDocuments} */\n        it(\"should do put call to upload multipart\", () => {\n            const callback = () => null;\n\n            client.uploadDocuments(\"users/test-user-token\", {\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n        });\n    });\n\n    //--------------------------------------\n    // Bank Cards\n    //--------------------------------------\n\n    /** @test {Hyperwallet#createBankCard} */\n    describe(\"createBankCard()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createBankCard} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createBankCard(undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#createBankCard} */\n        it(\"should do post call to bank cards endpoint\", () => {\n            const callback = () => null;\n            client.createBankCard(\"test-user-token\", {\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-cards\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getBankCard} */\n    describe(\"getBankCard()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getBankCard} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getBankCard(undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getBankCard} */\n        it(\"should throw error if bankCardToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getBankCard(\"test-user-token\", undefined, callback)).to.throw(\"bankCardToken is required\");\n        });\n\n        /** @test {Hyperwallet#getBankCard} */\n        it(\"should do get call if userToken and bankCardToken is provided\", () => {\n            const callback = () => null;\n            client.getBankCard(\"test-user-token\", \"test-bank-card-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-cards/test-bank-card-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#updateBankCard} */\n    describe(\"updateBankCard()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPut: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#updateBankCard} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.updateBankCard(undefined, undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#updateBankCard} */\n        it(\"should throw error if bankCardToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.updateBankCard(\"test-user-token\", undefined, { test: \"value\" }, callback)).to.throw(\"bankCardToken is required\");\n        });\n\n        /** @test {Hyperwallet#updateBankCard} */\n        it(\"should do put call to bank cards endpoint\", () => {\n            const callback = () => null;\n            client.updateBankCard(\"test-user-token\", \"test-bank-card-token\", {\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-cards/test-bank-card-token\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listBankCards} */\n    describe(\"listBankCards()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listBankCards} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listBankCards(undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listBankCards} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            const options = {\n                status: \"test-status\",\n                createdBefore: \"test-createdBefore\",\n                createdAfter: \"test-createdBefore\",\n                sortBy: \"test-sortBy\",\n                limit: \"test-limit\",\n            };\n            client.listBankCards(\"test-user-token\", options, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-cards\", options);\n        });\n\n        /** @test {Hyperwallet#listBankCards} */\n        it(\"should throw error for invalid filter\", () => {\n            const callback = () => null;\n            expect(() => client.listBankCards(\"test-user-token\", { status: \"test-status\", test: \"value\" }, callback))\n                .to.throw(\"Invalid Filter. Expected - status,createdBefore,createdAfter,sortBy,limit\");\n        });\n\n        /** @test {Hyperwallet#listBankCards} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listBankCards(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-cards\", {});\n        });\n\n        /** @test {Hyperwallet#listBankCards} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listBankCards(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-cards\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    /** @test {Hyperwallet#deactivateBankCard} */\n    describe(\"deactivate()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /**\n         * @test {Hyperwallet#deactivateBankCard}\n         */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.deactivateBankCard(undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /**\n         * @test {Hyperwallet#deactivateBankCard}\n         */\n        it(\"should throw error if bankCardToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.deactivateBankCard(\"test-user-token\", undefined, callback)).to.throw(\"bankCardToken is required\");\n        });\n\n        /**\n         * @test {Hyperwallet#deactivateBankCard}\n         */\n        it(\"should send transition to 'DE_ACTIVATED'\", () => {\n            const callback = () => null;\n            client.deactivateBankCard(\"test-user-token\", \"test-bank-card-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-cards/test-bank-card-token/status-transitions\", {\n                transition: \"DE_ACTIVATED\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#createBankCardStatusTransition} */\n    describe(\"createBankCardStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createBankCardStatusTransition} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createBankCardStatusTransition(undefined, undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#createBankCardStatusTransition} */\n        it(\"should throw error if bankCardToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createBankCardStatusTransition(\"test-user-token\", undefined, { test: \"value\" }, callback)).to.throw(\"bankCardToken is required\");\n        });\n\n        /** @test {Hyperwallet#createBankCardStatusTransition} */\n        it(\"should send post call to bank card status transition endpoint\", () => {\n            const callback = () => null;\n            client.createBankCardStatusTransition(\"test-user-token\", \"test-bank-card-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-cards/test-bank-card-token/status-transitions\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getBankCardStatusTransition} */\n    describe(\"getBankCardStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getBankCardStatusTransition} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getBankCardStatusTransition(undefined, undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getBankCardStatusTransition} */\n        it(\"should throw error if bankCardToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getBankCardStatusTransition(\"test-user-token\", undefined, undefined, callback)).to.throw(\"bankCardToken is required\");\n        });\n\n        /** @test {Hyperwallet#getBankCardStatusTransition} */\n        it(\"should throw error if statusTransitionToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getBankCardStatusTransition(\"test-user-token\", \"test-bank-card-token\", undefined, callback)).to.throw(\"statusTransitionToken is required\");\n        });\n\n        /** @test {Hyperwallet#getBankCardStatusTransition} */\n        it(\"should do get call if userToken, bankCardToken and statusTransitionToken is provided\", () => {\n            const callback = () => null;\n            client.getBankCardStatusTransition(\"test-user-token\", \"test-bank-card-token\", \"status-transition-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-cards/test-bank-card-token/status-transitions/status-transition-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listBankCardStatusTransitions} */\n    describe(\"listBankCardStatusTransitions()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listBankCardStatusTransitions} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listBankCardStatusTransitions(undefined, undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listBankCardStatusTransitions} */\n        it(\"should throw error if bankCardToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listBankCardStatusTransitions(\"test-user-token\", undefined, {}, callback)).to.throw(\"bankCardToken is required\");\n        });\n\n        /** @test {Hyperwallet#listBankCardStatusTransitions} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            const options = {\n                transition: \"test-transition\",\n                createdBefore: \"test-createdBefore\",\n                createdAfter: \"test-createdBefore\",\n                sortBy: \"test-sortBy\",\n                limit: \"test-limit\",\n            };\n            client.listBankCardStatusTransitions(\"test-user-token\", \"test-bank-card-token\", options, callback);\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-cards/test-bank-card-token/status-transitions\", options);\n        });\n\n        /** @test {Hyperwallet#listBankCardStatusTransitions} */\n        it(\"should throw error for invalid filter\", () => {\n            const callback = () => null;\n            expect(() => client.listBankCardStatusTransitions(\"test-user-token\", \"test-bank-card-token\", { transition: \"test-transition\", test: \"value\" }, callback))\n                .to.throw(\"Invalid Filter. Expected - transition,createdBefore,createdAfter,sortBy,limit\");\n        });\n\n        /** @test {Hyperwallet#listBankCardStatusTransitions} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listBankCardStatusTransitions(\"test-user-token\", \"test-bank-card-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-cards/test-bank-card-token/status-transitions\", {});\n        });\n\n        /** @test {Hyperwallet#listBankCardStatusTransitions} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listBankCardStatusTransitions(\"test-user-token\", \"test-bank-card-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-cards/test-bank-card-token/status-transitions\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    //--------------------------------------\n    // Authentication Token\n    //--------------------------------------\n\n    /** @test {Hyperwallet#getAuthenticationToken} */\n    describe(\"getAuthenticationToken()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getAuthenticationToken} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getAuthenticationToken(undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getAuthenticationToken} */\n        it(\"should do post call to authentication token endpoint\", () => {\n            const callback = () => null;\n            client.getAuthenticationToken(\"test-user-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/authentication-token\", {}, {}, callback);\n        });\n    });\n\n    //--------------------------------------\n    // Paper Checks\n    //--------------------------------------\n\n    /** @test {Hyperwallet#createPaperCheck} */\n    describe(\"createPaperCheck()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createPaperCheck} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createPaperCheck(undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#createPaperCheck} */\n        it(\"should do post call to paper checks endpoint\", () => {\n            const callback = () => null;\n            client.createPaperCheck(\"test-user-token\", {\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paper-checks\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getPaperCheck} */\n    describe(\"getPaperCheck()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getPaperCheck} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPaperCheck(undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPaperCheck} */\n        it(\"should throw error if paperCheckToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPaperCheck(\"test-user-token\", undefined, callback)).to.throw(\"paperCheckToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPaperCheck} */\n        it(\"should do get call if userToken and paperCheckToken is provided\", () => {\n            const callback = () => null;\n            client.getPaperCheck(\"test-user-token\", \"test-paper-check-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paper-checks/test-paper-check-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#updatePaperCheck} */\n    describe(\"updatePaperCheck()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPut: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#updatePaperCheck} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.updatePaperCheck(undefined, undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#updatePaperCheck} */\n        it(\"should throw error if paperCheckToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.updatePaperCheck(\"test-user-token\", undefined, { test: \"value\" }, callback)).to.throw(\"paperCheckToken is required\");\n        });\n\n        /** @test {Hyperwallet#updatePaperCheck} */\n        it(\"should do put call to paper checks endpoint\", () => {\n            const callback = () => null;\n            client.updatePaperCheck(\"test-user-token\", \"test-paper-check-token\", {\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paper-checks/test-paper-check-token\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listPaperChecks} */\n    describe(\"listPaperChecks()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listPaperChecks} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listPaperChecks(undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listPaperChecks} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            const options = {\n                status: \"test-status\",\n                createdBefore: \"test-createdBefore\",\n                createdAfter: \"test-createdBefore\",\n                sortBy: \"test-sortBy\",\n                limit: \"test-limit\",\n            };\n            client.listPaperChecks(\"test-user-token\", options, callback);\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paper-checks\", options);\n        });\n\n        /** @test {Hyperwallet#listPaperChecks} */\n        it(\"should throw error for invalid filter\", () => {\n            const callback = () => null;\n            expect(() => client.listPaperChecks(\"test-user-token\", { status: \"test-status\", test: \"value\" }, callback))\n                .to.throw(\"Invalid Filter. Expected - status,createdBefore,createdAfter,sortBy,limit\");\n        });\n\n        /** @test {Hyperwallet#listPaperChecks} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listPaperChecks(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paper-checks\", {});\n        });\n\n        /** @test {Hyperwallet#listPaperChecks} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listPaperChecks(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paper-checks\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    /** @test {Hyperwallet#deactivatePaperCheck} */\n    describe(\"deactivate()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /**\n         * @test {Hyperwallet#deactivatePaperCheck}\n         */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.deactivatePaperCheck(undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /**\n         * @test {Hyperwallet#deactivatePaperCheck}\n         */\n        it(\"should throw error if paperCheckToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.deactivatePaperCheck(\"test-user-token\", undefined, callback)).to.throw(\"paperCheckToken is required\");\n        });\n\n        /**\n         * @test {Hyperwallet#deactivatePaperCheck}\n         */\n        it(\"should send transition to 'DE_ACTIVATED'\", () => {\n            const callback = () => null;\n            client.deactivatePaperCheck(\"test-user-token\", \"test-paper-check-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paper-checks/test-paper-check-token/status-transitions\", {\n                transition: \"DE_ACTIVATED\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#createPaperCheckStatusTransition} */\n    describe(\"createPaperCheckStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createPaperCheckStatusTransition} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createPaperCheckStatusTransition(undefined, undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#createPaperCheckStatusTransition} */\n        it(\"should throw error if paperCheckToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createPaperCheckStatusTransition(\"test-user-token\", undefined, { test: \"value\" }, callback)).to.throw(\"paperCheckToken is required\");\n        });\n\n        /** @test {Hyperwallet#createPaperCheckStatusTransition} */\n        it(\"should send post call to paper check status transition endpoint\", () => {\n            const callback = () => null;\n            client.createPaperCheckStatusTransition(\"test-user-token\", \"test-paper-check-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paper-checks/test-paper-check-token/status-transitions\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getPaperCheckStatusTransition} */\n    describe(\"getPaperCheckStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getPaperCheckStatusTransition} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPaperCheckStatusTransition(undefined, undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPaperCheckStatusTransition} */\n        it(\"should throw error if paperCheckToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPaperCheckStatusTransition(\"test-user-token\", undefined, undefined, callback)).to.throw(\"paperCheckToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPaperCheckStatusTransition} */\n        it(\"should throw error if statusTransitionToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPaperCheckStatusTransition(\"test-user-token\", \"test-paper-check-token\", undefined, callback)).to.throw(\"statusTransitionToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPaperCheckStatusTransition} */\n        it(\"should do get call if userToken, paperCheckToken and statusTransitionToken is provided\", () => {\n            const callback = () => null;\n            client.getPaperCheckStatusTransition(\"test-user-token\", \"test-paper-check-token\", \"status-transition-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paper-checks/test-paper-check-token/status-transitions/status-transition-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listPaperCheckStatusTransitions} */\n    describe(\"listPaperCheckStatusTransitions()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listPaperCheckStatusTransitions} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listPaperCheckStatusTransitions(undefined, undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listPaperCheckStatusTransitions} */\n        it(\"should throw error if paperCheckToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listPaperCheckStatusTransitions(\"test-user-token\", undefined, {}, callback)).to.throw(\"paperCheckToken is required\");\n        });\n\n        /** @test {Hyperwallet#listPaperCheckStatusTransitions} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            const options = {\n                transition: \"test-transition\",\n                createdBefore: \"test-createdBefore\",\n                createdAfter: \"test-createdBefore\",\n                sortBy: \"test-sortBy\",\n                limit: \"test-limit\",\n            };\n            client.listPaperCheckStatusTransitions(\"test-user-token\", \"test-paper-check-token\", options, callback);\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paper-checks/test-paper-check-token/status-transitions\", options);\n        });\n\n        /** @test {Hyperwallet#listPaperCheckStatusTransitions} */\n        it(\"should throw error for invalid filter\", () => {\n            const callback = () => null;\n            expect(() => client.listPaperCheckStatusTransitions(\"test-user-token\", \"test-paper-check-token\", { transition: \"test-transition\", test: \"value\" }, callback))\n                .to.throw(\"Invalid Filter. Expected - transition,createdBefore,createdAfter,sortBy,limit\");\n        });\n\n        /** @test {Hyperwallet#listPaperCheckStatusTransitions} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listPaperCheckStatusTransitions(\"test-user-token\", \"test-paper-check-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paper-checks/test-paper-check-token/status-transitions\", {});\n        });\n\n        /** @test {Hyperwallet#listPaperCheckStatusTransitions} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listPaperCheckStatusTransitions(\"test-user-token\", \"test-paper-check-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paper-checks/test-paper-check-token/status-transitions\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    //--------------------------------------\n    // Transfers\n    //--------------------------------------\n\n    /** @test {Hyperwallet#createTransfer} */\n    describe(\"createTransfer()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createTransfer} */\n        it(\"should throw error if sourceToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createTransfer({\n                test: \"value\",\n            }, callback)).to.throw(\"sourceToken is required\");\n        });\n\n        /** @test {Hyperwallet#createTransfer} */\n        it(\"should throw error if destinationToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createTransfer({\n                sourceToken: \"sourceToken\",\n            }, callback)).to.throw(\"destinationToken is required\");\n        });\n\n        /** @test {Hyperwallet#createTransfer} */\n        it(\"should throw error if clientTransferId is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createTransfer({\n                sourceToken: \"sourceToken\",\n                destinationToken: \"destinationToken\",\n            }, callback)).to.throw(\"clientTransferId is required\");\n        });\n\n        /** @test {Hyperwallet#createTransfer} */\n        it(\"should do post call to transfers endpoint\", () => {\n            const callback = () => null;\n            client.createTransfer({\n                sourceToken: \"sourceToken\",\n                destinationToken: \"destinationToken\",\n                clientTransferId: \"clientTransferId\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"transfers\", {\n                sourceToken: \"sourceToken\",\n                destinationToken: \"destinationToken\",\n                clientTransferId: \"clientTransferId\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getTransfer} */\n    describe(\"getTransfer()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getTransfer} */\n        it(\"should throw error if transferToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getTransfer(undefined, callback)).to.throw(\"transferToken is required\");\n        });\n\n        /** @test {Hyperwallet#getTransfer} */\n        it(\"should do get call if transferToken is provided\", () => {\n            const callback = () => null;\n            client.getTransfer(\"test-transfer-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"transfers/test-transfer-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listTransfers} */\n    describe(\"listTransfers()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listTransfers} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            const options = {\n                clientTransferId: \"test-clientTransferId\",\n                sourceToken: \"test-sourceToken\",\n                destinationToken: \"test-destinationToken\",\n                createdBefore: \"test-createdBefore\",\n                createdAfter: \"test-createdBefore\",\n                limit: \"test-limit\",\n            };\n            client.listTransfers(options, callback);\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"transfers\", options);\n        });\n\n        /** @test {Hyperwallet#listTransfers} */\n        it(\"should throw error for invalid filter\", () => {\n            const callback = () => null;\n            expect(() => client.listTransfers({ clientTransferId: \"test-clientTransferId\", test: \"value\" }, callback))\n                .to.throw(\"Invalid Filter. Expected - clientTransferId,sourceToken,destinationToken,createdBefore,createdAfter,limit\");\n        });\n\n        /** @test {Hyperwallet#listTransfers} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listTransfers({}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"transfers\", {});\n        });\n\n        /** @test {Hyperwallet#listTransfers} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listTransfers({}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"transfers\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    /** @test {Hyperwallet#createTransferStatusTransition} */\n    describe(\"createTransferStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createTransferStatusTransition} */\n        it(\"should throw error if transferToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createTransferStatusTransition(undefined, { test: \"value\" }, callback)).to.throw(\"transferToken is required\");\n        });\n\n        /** @test {Hyperwallet#createTransferStatusTransition} */\n        it(\"should send post call to transfer status transition endpoint\", () => {\n            const callback = () => null;\n            client.createTransferStatusTransition(\"test-transfer-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"transfers/test-transfer-token/status-transitions\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    //--------------------------------------\n    // Transfer Refunds\n    //--------------------------------------\n\n    /** @test {Hyperwallet#createTransferRefund} */\n    describe(\"createTransferRefund()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createTransferRefund} */\n        it(\"should throw error if transferToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createTransferRefund(undefined, {\n                clientRefundId: \"value\",\n            }, callback)).to.throw(\"transferToken is required\");\n        });\n\n        /** @test {Hyperwallet#createTransferRefund} */\n        it(\"should throw error if clientRefundId is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createTransferRefund(\"test-transfer-token\", {\n                test: \"value\",\n            }, callback)).to.throw(\"clientRefundId is required\");\n        });\n\n        /** @test {Hyperwallet#createTransferRefund} */\n        it(\"should do post call to transfer refunds endpoint\", () => {\n            const callback = () => null;\n            client.createTransferRefund(\"test-transfer-token\", {\n                clientRefundId: \"clientRefundId\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"transfers/test-transfer-token/refunds\", {\n                clientRefundId: \"clientRefundId\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getTransferRefund} */\n    describe(\"getTransferRefund()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getTransferRefund} */\n        it(\"should throw error if transferToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getTransferRefund(undefined, \"test-transfer-refund-token\",\n                callback)).to.throw(\"transferToken is required\");\n        });\n\n        /** @test {Hyperwallet#getTransferRefund} */\n        it(\"should throw error if transferRefundToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getTransferRefund(\"test-transfer-token\", undefined,\n                callback)).to.throw(\"transferRefundToken is required\");\n        });\n\n        /** @test {Hyperwallet#getTransferRefund} */\n        it(\"should do get call if transferToken is provided\", () => {\n            const callback = () => null;\n            client.getTransferRefund(\"test-transfer-token\", \"test-transfer-refund-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"transfers/test-transfer-token/refunds/test-transfer-refund-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listTransferRefunds} */\n    describe(\"listTransferRefunds()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listTransferRefunds} */\n        it(\"should throw error if transferToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listTransferRefunds(undefined, {\n                test: \"value\",\n            }, callback)).to.throw(\"transferToken is required\");\n        });\n\n        /** @test {Hyperwallet#listTransferRefunds} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listTransferRefunds(\"test-transfer-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"transfers/test-transfer-token/refunds\", { test: \"value\" });\n        });\n\n        /** @test {Hyperwallet#listTransferRefunds} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listTransferRefunds(\"test-transfer-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"transfers/test-transfer-token/refunds\", {});\n        });\n\n        /** @test {Hyperwallet#listTransferRefunds} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listTransferRefunds(\"test-transfer-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"transfers/test-transfer-token/refunds\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    //--------------------------------------\n    // PayPal accounts\n    //--------------------------------------\n\n    /** @test {Hyperwallet#createPayPalAccount} */\n    describe(\"createPayPalAccount()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createPayPalAccount} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createPayPalAccount(undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#createPayPalAccount} */\n        it(\"should throw error if transferMethodCountry is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createPayPalAccount(\"test-user-token\", { test: \"value\" }, callback)).to.throw(\"transferMethodCountry is required\");\n        });\n\n        /** @test {Hyperwallet#createPayPalAccount} */\n        it(\"should throw error if transferMethodCurrency is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createPayPalAccount(\"test-user-token\", {\n                transferMethodCountry: \"test-transferMethodCountry\",\n            }, callback)).to.throw(\"transferMethodCurrency is required\");\n        });\n\n        /** @test {Hyperwallet#createPayPalAccount} */\n        it(\"should throw error if email is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createPayPalAccount(\"test-user-token\", {\n                transferMethodCountry: \"test-transferMethodCountry\",\n                transferMethodCurrency: \"test-transferMethodCurrency\",\n            }, callback)).to.throw(\"email is required\");\n        });\n\n        /** @test {Hyperwallet#createPayPalAccount} */\n        it(\"should do post call to PayPal account endpoint\", () => {\n            const callback = () => null;\n            client.createPayPalAccount(\"test-user-token\", {\n                transferMethodCountry: \"test-transferMethodCountry\",\n                transferMethodCurrency: \"test-transferMethodCurrency\",\n                email: \"email\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paypal-accounts\", {\n                transferMethodCountry: \"test-transferMethodCountry\",\n                transferMethodCurrency: \"test-transferMethodCurrency\",\n                email: \"email\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getPayPalAccount} */\n    describe(\"getPayPalAccount()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getPayPalAccount} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPayPalAccount(undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPayPalAccount} */\n        it(\"should throw error if payPalAccountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPayPalAccount(\"test-user-token\", undefined, callback)).to.throw(\"payPalAccountToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPayPalAccount} */\n        it(\"should do get call if userToken and payPalAccountToken is provided\", () => {\n            const callback = () => null;\n            client.getPayPalAccount(\"test-user-token\", \"test-paypal-account-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paypal-accounts/test-paypal-account-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listPayPalAccounts} */\n    describe(\"listPayPalAccounts()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listPayPalAccounts} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listPayPalAccounts(undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listPayPalAccounts} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            const options = {\n                status: \"test-status\",\n                createdBefore: \"test-createdBefore\",\n                createdAfter: \"test-createdBefore\",\n                sortBy: \"test-sortBy\",\n                limit: \"test-limit\",\n            };\n            client.listPayPalAccounts(\"test-user-token\", options, callback);\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paypal-accounts\", options);\n        });\n\n        /** @test {Hyperwallet#listPayPalAccounts} */\n        it(\"should throw error for invalid filter\", () => {\n            const callback = () => null;\n            expect(() => client.listPayPalAccounts(\"test-user-token\", { status: \"test-status\", test: \"value\" }, callback))\n                .to.throw(\"Invalid Filter. Expected - status,createdBefore,createdAfter,sortBy,limit\");\n        });\n\n        /** @test {Hyperwallet#listPayPalAccounts} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listPayPalAccounts(\"test-user-token\", {}, callback);\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paypal-accounts\", {});\n        });\n\n        /** @test {Hyperwallet#listPayPalAccounts} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listPayPalAccounts(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paypal-accounts\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    /** @test {Hyperwallet#updatePayPalAccount} */\n    describe(\"updatePayPalAccount()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPut: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#updatePayPalAccount} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.updatePayPalAccount(undefined, undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#updatePayPalAccount} */\n        it(\"should throw error if payPalAccountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.updatePayPalAccount(\"test-user-token\", undefined, { test: \"value\" }, callback)).to.throw(\"payPalAccountToken is required\");\n        });\n\n        /** @test {Hyperwallet#updatePayPalAccount} */\n        it(\"should do put call to paypal account endpoint\", () => {\n            const callback = () => null;\n            client.updatePayPalAccount(\"test-user-token\", \"test-paypal-account-token\", {\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paypal-accounts/test-paypal-account-token\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#activatePayPalAccount} */\n    describe(\"activatePayPalAccount()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#activatePayPalAccount} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.activatePayPalAccount(undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#activatePayPalAccount} */\n        it(\"should throw error if payPalAccountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.activatePayPalAccount(\"test-user-token\", undefined, callback)).to.throw(\"payPalAccountToken is required\");\n        });\n\n        /** @test {Hyperwallet#activatePayPalAccount} */\n        it(\"should send transition to 'ACTIVATED'\", () => {\n            const callback = () => null;\n            client.activatePayPalAccount(\"test-user-token\", \"test-paypal-account-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paypal-accounts/test-paypal-account-token/status-transitions\", {\n                transition: \"ACTIVATED\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#deactivatePayPalAccount} */\n    describe(\"deactivatePayPalAccount()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#deactivatePayPalAccount} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.deactivatePayPalAccount(undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#deactivatePayPalAccount} */\n        it(\"should throw error if payPalAccountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.deactivatePayPalAccount(\"test-user-token\", undefined, callback)).to.throw(\"payPalAccountToken is required\");\n        });\n\n        /** @test {Hyperwallet#deactivatePayPalAccount} */\n        it(\"should send transition to 'DE_ACTIVATED'\", () => {\n            const callback = () => null;\n            client.deactivatePayPalAccount(\"test-user-token\", \"test-paypal-account-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paypal-accounts/test-paypal-account-token/status-transitions\", {\n                transition: \"DE_ACTIVATED\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#createPayPalAccountStatusTransition} */\n    describe(\"createPayPalAccountStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createPayPalAccountStatusTransition} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createPayPalAccountStatusTransition(undefined, undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#createPayPalAccountStatusTransition} */\n        it(\"should throw error if payPalAccountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createPayPalAccountStatusTransition(\"test-user-token\", undefined, { test: \"value\" }, callback)).to.throw(\"payPalAccountToken is required\");\n        });\n\n        /** @test {Hyperwallet#createPayPalAccountStatusTransition} */\n        it(\"should send post call to paypal account status transition endpoint\", () => {\n            const callback = () => null;\n            client.createPayPalAccountStatusTransition(\"test-user-token\", \"test-paypal-account-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paypal-accounts/test-paypal-account-token/status-transitions\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getPayPalAccountStatusTransition} */\n    describe(\"getPayPalAccountStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getPayPalAccountStatusTransition} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPayPalAccountStatusTransition(undefined, undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPayPalAccountStatusTransition} */\n        it(\"should throw error if payPalAccountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPayPalAccountStatusTransition(\"test-user-token\", undefined, undefined, callback)).to.throw(\"payPalAccountToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPayPalAccountStatusTransition} */\n        it(\"should throw error if statusTransitionToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPayPalAccountStatusTransition(\"test-user-token\", \"test-paypal-account-token\", undefined, callback)).to.throw(\"statusTransitionToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPayPalAccountStatusTransition} */\n        it(\"should do get call if userToken, payPalAccountToken and statusTransitionToken is provided\", () => {\n            const callback = () => null;\n            client.getPayPalAccountStatusTransition(\"test-user-token\", \"test-paypal-account-token\", \"status-transition-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paypal-accounts/test-paypal-account-token/status-transitions/status-transition-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listPayPalAccountStatusTransitions} */\n    describe(\"listPayPalAccountStatusTransitions()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listPayPalAccountStatusTransitions} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listPayPalAccountStatusTransitions(undefined, undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listPayPalAccountStatusTransitions} */\n        it(\"should throw error if payPalAccountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listPayPalAccountStatusTransitions(\"test-user-token\", undefined, {}, callback)).to.throw(\"payPalAccountToken is required\");\n        });\n\n        /** @test {Hyperwallet#listPayPalAccountStatusTransitions} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listPayPalAccountStatusTransitions(\"test-user-token\", \"test-paypal-account-token\", { transition: \"test-transition\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paypal-accounts/test-paypal-account-token/status-transitions\", { transition: \"test-transition\" });\n        });\n\n        /** @test {Hyperwallet#listPayPalAccountStatusTransitions} */\n        it(\"should throw error for invalid filter\", () => {\n            const callback = () => null;\n            expect(() => client.listPayPalAccountStatusTransitions(\"test-user-token\", \"test-paypal-account-token\", { transition: \"test-transition\", test: \"value\" }, callback))\n                .to.throw(\"Invalid Filter. Expected - transition,createdBefore,createdAfter,sortBy,limit\");\n        });\n\n        /** @test {Hyperwallet#listPayPalAccountStatusTransitions} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listPayPalAccountStatusTransitions(\"test-user-token\", \"test-paypal-account-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paypal-accounts/test-paypal-account-token/status-transitions\", {});\n        });\n\n        /** @test {Hyperwallet#listPayPalAccountStatusTransitions} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n                cb();\n            };\n            client.listPayPalAccountStatusTransitions(\"test-user-token\", \"test-paypal-account-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/paypal-accounts/test-paypal-account-token/status-transitions\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    //--------------------------------------\n    // Prepaid Cards\n    //--------------------------------------\n\n    /** @test {Hyperwallet#createPrepaidCard} */\n    describe(\"createPrepaidCard()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createPrepaidCard} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createPrepaidCard(undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#createPrepaidCard} */\n        it(\"should do post call to prepaid cards endpoint\", () => {\n            const callback = () => null;\n            client.createPrepaidCard(\"test-user-token\", {\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getPrepaidCard} */\n    describe(\"getPrepaidCard()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getPrepaidCard} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPrepaidCard(undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPrepaidCard} */\n        it(\"should throw error if prepaidCardToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPrepaidCard(\"test-user-token\", undefined, callback)).to.throw(\"prepaidCardToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPrepaidCard} */\n        it(\"should do get call if userToken and prepaidCardToken is provided\", () => {\n            const callback = () => null;\n            client.getPrepaidCard(\"test-user-token\", \"test-prepaid-card-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards/test-prepaid-card-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#updatePrepaidCard} */\n    describe(\"updatePrepaidCard()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPut: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#updatePrepaidCard} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.updatePrepaidCard(undefined, undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#updatePrepaidCard} */\n        it(\"should throw error if prepaidCardToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.updatePrepaidCard(\"test-user-token\", undefined, { test: \"value\" }, callback)).to.throw(\"prepaidCardToken is required\");\n        });\n\n        /** @test {Hyperwallet#updatePrepaidCard} */\n        it(\"should do put call to prepaid cards endpoint\", () => {\n            const callback = () => null;\n            client.updatePrepaidCard(\"test-user-token\", \"test-prepaid-card-token\", {\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards/test-prepaid-card-token\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listPrepaidCards} */\n    describe(\"listPrepaidCards()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listPrepaidCards} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listPrepaidCards(undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listPrepaidCards} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            const options = {\n                status: \"test-status\", createdBefore: \"test-createdBefore\", createdAfter: \"test-createdBefore\", sortBy: \"test-sortBy\", limit: \"test-limit\",\n            };\n            client.listPrepaidCards(\"test-user-token\", options, callback);\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards\", options);\n        });\n\n        /** @test {Hyperwallet#listPrepaidCards} */\n        it(\"should throw error for invalid filter\", () => {\n            const callback = () => null;\n            expect(() => client.listPrepaidCards(\"test-user-token\", { status: \"test-status\", test: \"value\" }, callback))\n                .to.throw(\"Invalid Filter. Expected - status,createdBefore,createdAfter,sortBy,limit\");\n        });\n\n        /** @test {Hyperwallet#listPrepaidCards} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listPrepaidCards(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards\", {});\n        });\n\n        /** @test {Hyperwallet#listPrepaidCards} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listPrepaidCards(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    const PREPAID_CARD_STATUS_CHANGE_METHODS = {\n        suspend: \"SUSPENDED\",\n        unsuspend: \"UNSUSPENDED\",\n        lostOrStolen: \"LOST_OR_STOLEN\",\n        deactivate: \"DE_ACTIVATED\",\n        lock: \"LOCKED\",\n        unlock: \"UNLOCKED\",\n    };\n    Object.keys(PREPAID_CARD_STATUS_CHANGE_METHODS).forEach((method) => {\n        const methodName = `${method}PrepaidCard`;\n\n        describe(`${methodName}()`, () => {\n            let client;\n            let apiClientSpy;\n\n            beforeEach(() => {\n                apiClientSpy = sinon.spy();\n                client = new Hyperwallet({\n                    username: \"test-username\",\n                    password: \"test-password\",\n                });\n                client.client = {\n                    doPost: apiClientSpy,\n                };\n            });\n\n            /**\n             * @test {Hyperwallet#suspendPrepaidCard}\n             * @test {Hyperwallet#unsuspendPrepaidCard}\n             * @test {Hyperwallet#lostOrStolenPrepaidCard}\n             * @test {Hyperwallet#deactivatePrepaidCard}\n             * @test {Hyperwallet#lockPrepaidCard}\n             * @test {Hyperwallet#unlockPrepaidCard}\n             */\n            it(\"should throw error if userToken is missing\", () => {\n                const callback = () => null;\n                expect(() => client[methodName](undefined, undefined, callback)).to.throw(\"userToken is required\");\n            });\n\n            /**\n             * @test {Hyperwallet#suspendPrepaidCard}\n             * @test {Hyperwallet#unsuspendPrepaidCard}\n             * @test {Hyperwallet#lostOrStolenPrepaidCard}\n             * @test {Hyperwallet#deactivatePrepaidCard}\n             * @test {Hyperwallet#lockPrepaidCard}\n             * @test {Hyperwallet#unlockPrepaidCard}\n             */\n            it(\"should throw error if prepaidCardToken is missing\", () => {\n                const callback = () => null;\n                expect(() => client[methodName](\"test-user-token\", undefined, callback)).to.throw(\"prepaidCardToken is required\");\n            });\n\n            /**\n             * @test {Hyperwallet#suspendPrepaidCard}\n             * @test {Hyperwallet#unsuspendPrepaidCard}\n             * @test {Hyperwallet#lostOrStolenPrepaidCard}\n             * @test {Hyperwallet#deactivatePrepaidCard}\n             * @test {Hyperwallet#lockPrepaidCard}\n             * @test {Hyperwallet#unlockPrepaidCard}\n             */\n            it(`should send transition to '${PREPAID_CARD_STATUS_CHANGE_METHODS[method]}'`, () => {\n                const callback = () => null;\n                client[methodName](\"test-user-token\", \"test-prepaid-card-token\", callback);\n\n                apiClientSpy.should.have.been.calledOnce();\n                apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards/test-prepaid-card-token/status-transitions\", {\n                    transition: PREPAID_CARD_STATUS_CHANGE_METHODS[method],\n                }, {}, callback);\n            });\n        });\n    });\n\n    /** @test {Hyperwallet#createPrepaidCardStatusTransition} */\n    describe(\"createPrepaidCardStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createPrepaidCardStatusTransition} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createPrepaidCardStatusTransition(undefined, undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#createPrepaidCardStatusTransition} */\n        it(\"should throw error if prepaidCardToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createPrepaidCardStatusTransition(\"test-user-token\", undefined, { test: \"value\" }, callback)).to.throw(\"prepaidCardToken is required\");\n        });\n\n        /** @test {Hyperwallet#createPrepaidCardStatusTransition} */\n        it(\"should send post call to prepaid card status transition endpoint\", () => {\n            const callback = () => null;\n            client.createPrepaidCardStatusTransition(\"test-user-token\", \"test-prepaid-card-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards/test-prepaid-card-token/status-transitions\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getPrepaidCardStatusTransition} */\n    describe(\"getPrepaidCardStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getPrepaidCardStatusTransition} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPrepaidCardStatusTransition(undefined, undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPrepaidCardStatusTransition} */\n        it(\"should throw error if prepaidCardToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPrepaidCardStatusTransition(\"test-user-token\", undefined, undefined, callback)).to.throw(\"prepaidCardToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPrepaidCardStatusTransition} */\n        it(\"should throw error if statusTransitionToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPrepaidCardStatusTransition(\"test-user-token\", \"test-prepaid-card-token\", undefined, callback)).to.throw(\"statusTransitionToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPrepaidCardStatusTransition} */\n        it(\"should do get call if userToken, prepaidCardToken and statusTransitionToken is provided\", () => {\n            const callback = () => null;\n            client.getPrepaidCardStatusTransition(\"test-user-token\", \"test-prepaid-card-token\", \"status-transition-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards/test-prepaid-card-token/status-transitions/status-transition-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listPrepaidCardStatusTransitions} */\n    describe(\"listPrepaidCardStatusTransitions()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listPrepaidCardStatusTransitions} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listPrepaidCardStatusTransitions(undefined, undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listPrepaidCardStatusTransitions} */\n        it(\"should throw error if prepaidCardToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listPrepaidCardStatusTransitions(\"test-user-token\", undefined, {}, callback)).to.throw(\"prepaidCardToken is required\");\n        });\n\n        /** @test {Hyperwallet#listPrepaidCardStatusTransitions} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            const options = {\n                transition: \"test-transition\",\n                createdBefore: \"test-createdBefore\",\n                createdAfter: \"test-createdBefore\",\n                sortBy: \"test-sortBy\",\n                limit: \"test-limit\",\n            };\n            client.listPrepaidCardStatusTransitions(\"test-user-token\", \"test-prepaid-card-token\", options, callback);\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards/test-prepaid-card-token/status-transitions\", options);\n        });\n\n        /** @test {Hyperwallet#listPrepaidCardStatusTransitions} */\n        it(\"should throw error for invalid filter\", () => {\n            const callback = () => null;\n            expect(() => client.listPrepaidCardStatusTransitions(\"test-user-token\", \"test-prepaid-card-token\", { transition: \"test-transition\", test: \"value\" }, callback))\n                .to.throw(\"Invalid Filter. Expected - transition,createdBefore,createdAfter,sortBy,limit\");\n        });\n\n        /** @test {Hyperwallet#listPrepaidCardStatusTransitions} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listPrepaidCardStatusTransitions(\"test-user-token\", \"test-prepaid-card-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards/test-prepaid-card-token/status-transitions\", {});\n        });\n\n        /** @test {Hyperwallet#listPrepaidCardStatusTransitions} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listPrepaidCardStatusTransitions(\"test-user-token\", \"test-prepaid-card-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards/test-prepaid-card-token/status-transitions\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    //--------------------------------------\n    // Bank Accounts\n    //--------------------------------------\n\n    /** @test {Hyperwallet#createBankAccount} */\n    describe(\"createBankAccount()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createBankAccount} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createBankAccount(undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#createBankAccount} */\n        it(\"should do post call to bank accounts endpoint\", () => {\n            const callback = () => null;\n            client.createBankAccount(\"test-user-token\", {\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-accounts\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getBankAccount} */\n    describe(\"getBankAccount()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getBankAccount} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getBankAccount(undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getBankAccount} */\n        it(\"should throw error if bankAccountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getBankAccount(\"test-user-token\", undefined, callback)).to.throw(\"bankAccountToken is required\");\n        });\n\n        /** @test {Hyperwallet#getBankAccount} */\n        it(\"should do get call if userToken and bankAccountToken is provided\", () => {\n            const callback = () => null;\n            client.getBankAccount(\"test-user-token\", \"test-bank-account-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-accounts/test-bank-account-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#updateBankAccount} */\n    describe(\"updateBankAccount()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPut: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#updateBankAccount} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.updateBankAccount(undefined, undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#updateBankAccount} */\n        it(\"should throw error if bankAccountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.updateBankAccount(\"test-user-token\", undefined, { test: \"value\" }, callback)).to.throw(\"bankAccountToken is required\");\n        });\n\n        /** @test {Hyperwallet#updateBankAccount} */\n        it(\"should do put call to bank accounts endpoint\", () => {\n            const callback = () => null;\n            client.updateBankAccount(\"test-user-token\", \"test-bank-account-token\", {\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-accounts/test-bank-account-token\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listBankAccounts} */\n    describe(\"listBankAccounts()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listBankAccounts} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listBankAccounts(undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n        /** @test {Hyperwallet#listBankAccounts} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            const options = {\n                type: \"test-type\",\n                status: \"test-status\",\n                createdBefore: \"test-createdBefore\",\n                createdAfter: \"test-createdBefore\",\n                sortBy: \"test-sortBy\",\n                limit: \"test-limit\",\n            };\n            client.listBankAccounts(\"test-user-token\", options, callback);\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-accounts\", options);\n        });\n\n        /** @test {Hyperwallet#listBankAccounts} */\n        it(\"should throw error for invalid filter\", () => {\n            const callback = () => null;\n            expect(() => client.listBankAccounts(\"test-user-token\", { type: \"test-type\", test: \"value\" }, callback))\n                .to.throw(\"Invalid Filter. Expected - type,status,createdBefore,createdAfter,sortBy,limit\");\n        });\n\n        /** @test {Hyperwallet#listBankAccounts} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listBankAccounts(\"test-user-token\", {}, callback);\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-accounts\", {});\n        });\n        /** @test {Hyperwallet#listBankAccounts} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listBankAccounts(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-accounts\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    /** @test {Hyperwallet#deactivateBankAccount} */\n    describe(\"deactivateBankAccount()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#deactivateBankAccount} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.deactivateBankAccount(undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#deactivateBankAccount} */\n        it(\"should throw error if bankAccountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.deactivateBankAccount(\"test-user-token\", undefined, callback)).to.throw(\"bankAccountToken is required\");\n        });\n\n        /** @test {Hyperwallet#deactivateBankAccount} */\n        it(\"should send transition to 'DE_ACTIVATED'\", () => {\n            const callback = () => null;\n            client.deactivateBankAccount(\"test-user-token\", \"test-bank-account-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-accounts/test-bank-account-token/status-transitions\", {\n                transition: \"DE_ACTIVATED\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#createBankAccountStatusTransition} */\n    describe(\"createBankAccountStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createBankAccountStatusTransition} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createBankAccountStatusTransition(undefined, undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#createBankAccountStatusTransition} */\n        it(\"should throw error if bankAccountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createBankAccountStatusTransition(\"test-user-token\", undefined, { test: \"value\" }, callback)).to.throw(\"bankAccountToken is required\");\n        });\n\n        /** @test {Hyperwallet#createBankAccountStatusTransition} */\n        it(\"should send post call to prepaid card status transition endpoint\", () => {\n            const callback = () => null;\n            client.createBankAccountStatusTransition(\"test-user-token\", \"test-bank-account-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-accounts/test-bank-account-token/status-transitions\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getBankAccountStatusTransition} */\n    describe(\"getBankAccountStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getBankAccountStatusTransition} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getBankAccountStatusTransition(undefined, undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getBankAccountStatusTransition} */\n        it(\"should throw error if bankAccountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getBankAccountStatusTransition(\"test-user-token\", undefined, undefined, callback)).to.throw(\"bankAccountToken is required\");\n        });\n\n        /** @test {Hyperwallet#getBankAccountStatusTransition} */\n        it(\"should throw error if statusTransitionToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getBankAccountStatusTransition(\"test-user-token\", \"test-bank-account-token\", undefined, callback)).to.throw(\"statusTransitionToken is required\");\n        });\n\n        /** @test {Hyperwallet#getBankAccountStatusTransition} */\n        it(\"should do get call if userToken, bankAccountToken and statusTransitionToken is provided\", () => {\n            const callback = () => null;\n            client.getBankAccountStatusTransition(\"test-user-token\", \"test-bank-account-token\", \"status-transition-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-accounts/test-bank-account-token/status-transitions/status-transition-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listBankAccountStatusTransitions} */\n    describe(\"listBankAccountStatusTransitions()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listBankAccountStatusTransitions} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listBankAccountStatusTransitions(undefined, undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n        /** @test {Hyperwallet#listBankAccountStatusTransitions} */\n        it(\"should throw error if bankAccountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listBankAccountStatusTransitions(\"test-user-token\", undefined, {}, callback)).to.throw(\"bankAccountToken is required\");\n        });\n\n        /** @test {Hyperwallet#listBankAccountStatusTransitions} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            const options = {\n                transition: \"test-transition\",\n                createdBefore: \"test-createdBefore\",\n                createdAfter: \"test-createdBefore\",\n                sortBy: \"test-sortBy\",\n                limit: \"test-limit\",\n            };\n            client.listBankAccountStatusTransitions(\"test-user-token\", \"test-bank-account-token\", options, callback);\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-accounts/test-bank-account-token/status-transitions\", options);\n        });\n\n        /** @test {Hyperwallet#listBankAccountStatusTransitions} */\n        it(\"should throw error for invalid filter\", () => {\n            const callback = () => null;\n            expect(() => client.listBankAccountStatusTransitions(\"test-user-token\", \"test-bank-account-token\", { transition: \"test-transition\", test: \"value\" }, callback))\n                .to.throw(\"Invalid Filter. Expected - transition,createdBefore,createdAfter,sortBy,limit\");\n        });\n\n        /** @test {Hyperwallet#listBankAccountStatusTransitions} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listBankAccountStatusTransitions(\"test-user-token\", \"test-bank-account-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-accounts/test-bank-account-token/status-transitions\", {});\n        });\n\n        /** @test {Hyperwallet#listBankAccountStatusTransitions} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listBankAccountStatusTransitions(\"test-user-token\", \"test-bank-account-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/bank-accounts/test-bank-account-token/status-transitions\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    //--------------------------------------\n    // Balances\n    //--------------------------------------\n\n    /** @test {Hyperwallet#listBalancesForUser} */\n    describe(\"listBalancesForUser()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listBalancesForUser} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listBalancesForUser(undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listBalancesForUser} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            const options = { currency: \"test-currency\", limit: \"test-limit\" };\n            client.listBalancesForUser(\"test-user-token\", options, callback);\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/balances\", options);\n        });\n\n        /** @test {Hyperwallet#listBalancesForUser} */\n        it(\"should throw error for invalid filter\", () => {\n            const callback = () => null;\n            expect(() => client.listBalancesForUser(\"test-user-token\", { currency: \"test-currency\", test: \"value\" }, callback))\n                .to.throw(\"Invalid Filter. Expected - currency,limit\");\n        });\n\n        /** @test {Hyperwallet#listBalancesForUser} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listBalancesForUser(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/balances\", {});\n        });\n\n        /** @test {Hyperwallet#listBalancesForUser} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listBalancesForUser(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/balances\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    /** @test {Hyperwallet#listBalancesForPrepaidCard} */\n    describe(\"listBalancesForPrepaidCard()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listBalancesForPrepaidCard} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listBalancesForPrepaidCard(undefined, undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listBalancesForPrepaidCard} */\n        it(\"should throw error if prepaidCardToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listBalancesForPrepaidCard(\"test-user-token\", undefined, {}, callback)).to.throw(\"prepaidCardToken is required\");\n        });\n\n        /** @test {Hyperwallet#listBalancesForPrepaidCard} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listBalancesForPrepaidCard(\"test-user-token\", \"test-prepaid-card-token\", { sortBy: \"test-sortBy\", limit: \"test-limit\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards/test-prepaid-card-token/balances\", { sortBy: \"test-sortBy\", limit: \"test-limit\" });\n        });\n\n        /** @test {Hyperwallet#listBalancesForPrepaidCard} */\n        it(\"should throw error for invalid filter\", () => {\n            const callback = () => null;\n            expect(() => client.listBalancesForPrepaidCard(\"test-user-token\", \"test-prepaid-card-token\", { sortBy: \"test-sortBy\", test: \"value\" }, callback))\n                .to.throw(\"Invalid Filter. Expected - sortBy,limit\");\n        });\n\n        /** @test {Hyperwallet#listBalancesForPrepaidCard} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listBalancesForPrepaidCard(\"test-user-token\", \"test-prepaid-card-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards/test-prepaid-card-token/balances\", {});\n        });\n\n        /** @test {Hyperwallet#listBalancesForPrepaidCard} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listBalancesForPrepaidCard(\"test-user-token\", \"test-prepaid-card-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards/test-prepaid-card-token/balances\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    /** @test {Hyperwallet#listBalancesForAccount} */\n    describe(\"listBalancesForAccount()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listBalancesForAccount} */\n        it(\"should throw error if programToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listBalancesForAccount(undefined, undefined, {}, callback)).to.throw(\"programToken is required\");\n        });\n\n        /** @test {Hyperwallet#listBalancesForAccount} */\n        it(\"should throw error if accountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listBalancesForAccount(\"test-program-token\", undefined, {}, callback)).to.throw(\"accountToken is required\");\n        });\n\n        /** @test {Hyperwallet#listBalancesForAccount} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listBalancesForAccount(\"test-program-token\", \"test-account-token\", { currency: \"test-currency\", sortBy: \"test-sortBy\", limit: \"test-limit\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"programs/test-program-token/accounts/test-account-token/balances\", { currency: \"test-currency\", sortBy: \"test-sortBy\", limit: \"test-limit\" });\n        });\n\n        /** @test {Hyperwallet#listBalancesForAccount} */\n        it(\"should throw error for invalid filter\", () => {\n            const callback = () => null;\n            expect(() => client.listBalancesForAccount(\"test-program-token\", \"test-account-token\", { currency: \"test-currency\", test: \"value\" }, callback))\n                .to.throw(\"Invalid Filter. Expected - currency,sortBy,limit\");\n        });\n\n        /** @test {Hyperwallet#listBalancesForAccount} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listBalancesForAccount(\"test-program-token\", \"test-account-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"programs/test-program-token/accounts/test-account-token/balances\", {});\n        });\n\n        /** @test {Hyperwallet#listBalancesForAccount} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listBalancesForAccount(\"test-program-token\", \"test-account-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"programs/test-program-token/accounts/test-account-token/balances\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    //--------------------------------------\n    // Payments\n    //--------------------------------------\n\n    /** @test {Hyperwallet#createPayment} */\n    describe(\"createPayment()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createPayment} */\n        it(\"should do post call to payments endpoint without programToken added\", () => {\n            const callback = () => null;\n            client.createPayment({\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"payments\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n\n        /** @test {Hyperwallet#createPayment} */\n        it(\"should do post call to payments endpoint with programToken added\", () => {\n            client.programToken = \"test-program-token\";\n\n            const callback = () => null;\n            client.createPayment({\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"payments\", {\n                test: \"value\",\n                programToken: \"test-program-token\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getPayment} */\n    describe(\"getPayment()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getPayment} */\n        it(\"should throw error if paymentToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPayment(undefined, callback)).to.throw(\"paymentToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPayment} */\n        it(\"should do get call if paymentToken is provided\", () => {\n            const callback = () => null;\n            client.getPayment(\"test-payment-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"payments/test-payment-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listPayments} */\n    describe(\"listPayments()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listPayments} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            const options = {\n                clientPaymentId: \"test-client-payment-id\",\n                releaseDate: \"test-releaseDate\",\n                createdBefore: \"test-createdBefore\",\n                createdAfter: \"test-createdBefore\",\n                sortBy: \"test-sortBy\",\n                limit: \"test-limit\",\n            };\n            client.listPayments(options, callback);\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"payments\", options);\n        });\n\n        /** @test {Hyperwallet#listPayments} */\n        it(\"should throw error for invalid filter\", () => {\n            const callback = () => null;\n            expect(() => client.listPayments({ clientPaymentId: \"test-client-payment-id\", test: \"value\" }, callback))\n                .to.throw(\"Invalid Filter. Expected - clientPaymentId,releaseDate,createdBefore,createdAfter,sortBy,limit\");\n        });\n\n        /** @test {Hyperwallet#listPayments} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listPayments({}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"payments\", {});\n        });\n\n        /** @test {Hyperwallet#listPayments} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listPayments({}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"payments\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    /** @test {Hyperwallet#createPaymentStatusTransition} */\n    describe(\"createPaymentStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createPaymentStatusTransition} */\n        it(\"should throw error if paymentToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createPaymentStatusTransition(undefined, { test: \"value\" }, callback)).to.throw(\"paymentToken is required\");\n        });\n\n        /** @test {Hyperwallet#createPaymentStatusTransition} */\n        it(\"should send post call to payment status transition endpoint\", () => {\n            const callback = () => null;\n            client.createPaymentStatusTransition(\"test-payment-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"payments/test-payment-token/status-transitions\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getPaymentStatusTransition} */\n    describe(\"getPaymentStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getPaymentStatusTransition} */\n        it(\"should throw error if paymentToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPaymentStatusTransition(undefined, undefined, callback)).to.throw(\"paymentToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPaymentStatusTransition} */\n        it(\"should throw error if statusTransitionToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getPaymentStatusTransition(\"test-payment-token\", undefined, callback)).to.throw(\"statusTransitionToken is required\");\n        });\n\n        /** @test {Hyperwallet#getPaymentStatusTransition} */\n        it(\"should do get call if paymentToken and statusTransitionToken is provided\", () => {\n            const callback = () => null;\n            client.getPaymentStatusTransition(\"test-payment-token\", \"status-transition-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"payments/test-payment-token/status-transitions/status-transition-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listPaymentStatusTransitions} */\n    describe(\"listPaymentStatusTransitions()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listPaymentStatusTransitions} */\n        it(\"should throw error if paymentToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listPaymentStatusTransitions(undefined, {}, callback)).to.throw(\"paymentToken is required\");\n        });\n\n        /** @test {Hyperwallet#listPaymentStatusTransitions} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            const options = {\n                transition: \"test-transition\",\n                createdBefore: \"test-createdBefore\",\n                createdAfter: \"test-createdBefore\",\n                sortBy: \"test-sortBy\",\n                limit: \"test-limit\",\n            };\n            client.listPaymentStatusTransitions(\"test-payment-token\", options, callback);\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"payments/test-payment-token/status-transitions\", options);\n        });\n\n        /** @test {Hyperwallet#listPaymentStatusTransitions} */\n        it(\"should throw error for invalid filter\", () => {\n            const callback = () => null;\n            expect(() => client.listPaymentStatusTransitions(\"test-payment-token\", { transition: \"test-transition\", test: \"value\" }, callback))\n                .to.throw(\"Invalid Filter. Expected - transition,createdBefore,createdAfter,sortBy,limit\");\n        });\n\n        /** @test {Hyperwallet#listPaymentStatusTransitions} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listPaymentStatusTransitions(\"test-payment-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"payments/test-payment-token/status-transitions\", {});\n        });\n\n        /** @test {Hyperwallet#listPaymentStatusTransitions} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listPaymentStatusTransitions(\"test-payment-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"payments/test-payment-token/status-transitions\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    //--------------------------------------\n    // Programs\n    //--------------------------------------\n\n    /** @test {Hyperwallet#getProgram} */\n    describe(\"getProgram()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getProgram} */\n        it(\"should throw error if programToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getProgram(undefined, callback)).to.throw(\"programToken is required\");\n        });\n\n        /** @test {Hyperwallet#getProgram} */\n        it(\"should do get call if programToken is provided\", () => {\n            const callback = () => null;\n            client.getProgram(\"test-program-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"programs/test-program-token\", {}, callback);\n        });\n    });\n\n    //--------------------------------------\n    // Program Accounts\n    //--------------------------------------\n\n    /** @test {Hyperwallet#getProgramAccount} */\n    describe(\"getProgramAccount()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getProgramAccount} */\n        it(\"should throw error if programToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getProgramAccount(undefined, undefined, callback)).to.throw(\"programToken is required\");\n        });\n\n        /** @test {Hyperwallet#getProgramAccount} */\n        it(\"should throw error if accountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getProgramAccount(\"test-program-token\", undefined, callback)).to.throw(\"accountToken is required\");\n        });\n\n        /** @test {Hyperwallet#getProgramAccount} */\n        it(\"should do get call if programToken is provided\", () => {\n            const callback = () => null;\n            client.getProgramAccount(\"test-program-token\", \"test-account-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"programs/test-program-token/accounts/test-account-token\", {}, callback);\n        });\n    });\n\n    //--------------------------------------\n    // Transfer Method Configurations\n    //--------------------------------------\n\n    /** @test {Hyperwallet#getTransferMethodConfiguration} */\n    describe(\"getTransferMethodConfiguration()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getTransferMethodConfiguration} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getTransferMethodConfiguration(undefined, undefined, undefined, undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getTransferMethodConfiguration} */\n        it(\"should throw error if country is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getTransferMethodConfiguration(\"test-user-token\", undefined, undefined, undefined, undefined, callback)).to.throw(\"country is required\");\n        });\n\n        /** @test {Hyperwallet#getTransferMethodConfiguration} */\n        it(\"should throw error if currency is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getTransferMethodConfiguration(\"test-user-token\", \"test-country\", undefined, undefined, undefined, callback)).to.throw(\"currency is required\");\n        });\n\n        /** @test {Hyperwallet#getTransferMethodConfiguration} */\n        it(\"should throw error if type is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getTransferMethodConfiguration(\"test-user-token\", \"test-country\", \"test-currency\", undefined, undefined, callback)).to.throw(\"type is required\");\n        });\n\n        /** @test {Hyperwallet#getTransferMethodConfiguration} */\n        it(\"should throw error if profileType is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getTransferMethodConfiguration(\"test-user-token\", \"test-country\", \"test-currency\", \"test-type\", undefined, callback)).to.throw(\"profileType is required\");\n        });\n\n        /** @test {Hyperwallet#getTransferMethodConfiguration} */\n        it(\"should do get call if userToken, country, currency, type and profileType is provided\", () => {\n            const callback = () => null;\n            client.getTransferMethodConfiguration(\"test-user-token\", \"test-country\", \"test-currency\", \"test-type\", \"test-profile-type\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"transfer-method-configurations\", {\n                userToken: \"test-user-token\",\n                country: \"test-country\",\n                currency: \"test-currency\",\n                type: \"test-type\",\n                profileType: \"test-profile-type\",\n            }, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listTransferMethodConfigurations} */\n    describe(\"listTransferMethodConfigurations()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listTransferMethodConfigurations} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listTransferMethodConfigurations(undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listTransferMethodConfigurations} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            const options = { userToken: \"test-userToken\", limit: \"test-limit\" };\n            client.listTransferMethodConfigurations(\"test-user-token\", options, callback);\n            apiClientSpy.should.have.been.calledOnce();\n            options.userToken = \"test-user-token\";\n            apiClientSpy.should.have.been.calledWith(\"transfer-method-configurations\", options);\n        });\n\n        /** @test {Hyperwallet#listTransferMethodConfigurations} */\n        it(\"should throw error for invalid filter\", () => {\n            const callback = () => null;\n            expect(() => client.listTransferMethodConfigurations(\"test-user-token\", { userToken: \"test-userToken\", test: \"value\" }, callback))\n                .to.throw(\"Invalid Filter. Expected - userToken,limit\");\n        });\n\n        /** @test {Hyperwallet#listTransferMethodConfigurations} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listTransferMethodConfigurations(\"test-user-token\", undefined, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"transfer-method-configurations\", {\n                userToken: \"test-user-token\",\n            });\n        });\n\n        /** @test {Hyperwallet#listTransferMethodConfigurations} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listTransferMethodConfigurations(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"transfer-method-configurations\", {\n                userToken: \"test-user-token\",\n            });\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    describe(\"createTransferMethod()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createTransferMethod} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            const userToken = null;\n            const cacheToken = null;\n\n            expect(() => client.createTransferMethod(userToken, cacheToken, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#createTransferMethod} */\n        it(\"should throw error if cacheToken is missing\", () => {\n            const callback = () => null;\n            const userToken = \"test-user-token\";\n            const cacheToken = null;\n\n            expect(() => client.createTransferMethod(userToken, cacheToken, callback)).to.throw(\"jsonCacheToken is required\");\n        });\n\n        /** @test {Hyperwallet#createTransferMethod} */\n        it(\"should do post call with userToken and cacheToken\", () => {\n            const callback = () => null;\n            const userToken = \"test-user-token\";\n            const cacheToken = \"test-cache-token\";\n            client.createTransferMethod(userToken, cacheToken, { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/transfer-methods\", { test: \"value\" }, { \"Json-Cache-Token\": \"test-cache-token\" });\n        });\n    });\n\n    //--------------------------------------\n    // Receipts\n    //--------------------------------------\n\n    /** @test {Hyperwallet#listReceiptsForProgramAccount} */\n    describe(\"listReceiptsForProgramAccount()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listReceiptsForProgramAccount} */\n        it(\"should throw error if programToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listReceiptsForProgramAccount(undefined, undefined, {}, callback)).to.throw(\"programToken is required\");\n        });\n\n        /** @test {Hyperwallet#listReceiptsForProgramAccount} */\n        it(\"should throw error if accountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listReceiptsForProgramAccount(\"test-program-token\", undefined, {}, callback)).to.throw(\"accountToken is required\");\n        });\n\n        /** @test {Hyperwallet#listReceiptsForProgramAccount} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listReceiptsForProgramAccount(\"test-program-token\", \"test-account-token\", { currency: \"test-currency\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"programs/test-program-token/accounts/test-account-token/receipts\", { currency: \"test-currency\" });\n        });\n\n        /** @test {Hyperwallet#listReceiptsForProgramAccount} */\n        it(\"should throw error for invalid filter\", () => {\n            const callback = () => null;\n            expect(() => client.listReceiptsForProgramAccount(\"test-program-token\", \"test-account-token\", { currency: \"test-currency\", test: \"value\" }, callback))\n                .to.throw(\"Invalid Filter. Expected - currency,createdBefore,createdAfter,sortBy,limit\");\n        });\n\n        /** @test {Hyperwallet#listReceiptsForProgramAccount} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listReceiptsForProgramAccount(\"test-program-token\", \"test-account-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"programs/test-program-token/accounts/test-account-token/receipts\", {});\n        });\n\n        /** @test {Hyperwallet#listReceiptsForProgramAccount} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listReceiptsForProgramAccount(\"test-program-token\", \"test-account-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"programs/test-program-token/accounts/test-account-token/receipts\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    /** @test {Hyperwallet#listReceiptsForUser} */\n    describe(\"listReceiptsForUser()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listReceiptsForUser} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listReceiptsForUser(undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listReceiptsForUser} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listReceiptsForUser(\"test-user-token\", { createdBefore: \"test-createdBefore\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/receipts\", { createdBefore: \"test-createdBefore\" });\n        });\n\n        /** @test {Hyperwallet#listReceiptsForUser} */\n        it(\"should throw error for invalid filter\", () => {\n            const callback = () => null;\n            expect(() => client.listReceiptsForUser(\"test-user-token\", { createdBefore: \"test-createdBefore\", test: \"value\" }, callback))\n                .to.throw(\"Invalid Filter. Expected - createdBefore,createdAfter,sortBy,limit\");\n        });\n\n        /** @test {Hyperwallet#listReceiptsForUser} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listReceiptsForUser(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/receipts\", {});\n        });\n\n        /** @test {Hyperwallet#listReceiptsForUser} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listReceiptsForUser(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/receipts\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    /** @test {Hyperwallet#listReceiptsForPrepaidCard} */\n    describe(\"listReceiptsForPrepaidCard()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listReceiptsForPrepaidCard} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listReceiptsForPrepaidCard(undefined, undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listReceiptsForPrepaidCard} */\n        it(\"should throw error if prepaidCardToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listReceiptsForPrepaidCard(\"test-user-token\", undefined, {}, callback)).to.throw(\"prepaidCardToken is required\");\n        });\n\n        /** @test {Hyperwallet#listReceiptsForPrepaidCard} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listReceiptsForPrepaidCard(\"test-user-token\", \"test-prepaid-card-token\", { createdBefore: \"test-createdBefore\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards/test-prepaid-card-token/receipts\", { createdBefore: \"test-createdBefore\" });\n        });\n\n        /** @test {Hyperwallet#listReceiptsForPrepaidCard} */\n        it(\"should throw error for invalid filter\", () => {\n            const callback = () => null;\n            expect(() => client.listReceiptsForPrepaidCard(\"test-user-token\", \"test-prepaid-card-token\", { createdBefore: \"test-createdBefore\", test: \"value\" }, callback))\n                .to.throw(\"Invalid Filter. Expected - createdBefore,createdAfter\");\n        });\n\n        /** @test {Hyperwallet#listReceiptsForPrepaidCard} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listReceiptsForPrepaidCard(\"test-user-token\", \"test-prepaid-card-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards/test-prepaid-card-token/receipts\", {});\n        });\n\n        /** @test {Hyperwallet#listReceiptsForPrepaidCard} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listReceiptsForPrepaidCard(\"test-user-token\", \"test-prepaid-card-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/prepaid-cards/test-prepaid-card-token/receipts\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    //--------------------------------------\n    // Webhooks\n    //--------------------------------------\n\n    describe(\"listWebhookNotifications()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listWebhookNotifications} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            const options = {\n                programToken: \"test-programToken\",\n                type: \"test-type\",\n                createdBefore: \"test-createdBefore\",\n                createdAfter: \"test-createdAfter\",\n                sortBy: \"test-sortBy\",\n                limit: \"test-limit\",\n            };\n            client.listWebhookNotifications(options, callback);\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"webhook-notifications\", options);\n        });\n\n        /** @test {Hyperwallet#listWebhookNotifications} */\n        it(\"should throw error for invalid filter\", () => {\n            const callback = () => null;\n            expect(() => client.listWebhookNotifications({ programToken: \"test-programToken\", test: \"value\" }, callback))\n                .to.throw(\"Invalid Filter. Expected - programToken,createdBefore,createdAfter,type,sortBy,limit\");\n        });\n\n        /** @test {Hyperwallet#listWebhookNotifications} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listWebhookNotifications({}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"webhook-notifications\", {});\n        });\n\n        /** @test {Hyperwallet#listWebhookNotifications} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listWebhookNotifications({}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"webhook-notifications\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    describe(\"getWebhookNotification\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getWebhookNotification} */\n        it(\"should throw error if webhookToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getWebhookNotification(undefined, {}, callback)).to.throw(\"webhookToken is required\");\n        });\n\n        /** @test {Hyperwallet#getWebhookNotification} */\n        it(\"should do get call if webhookToken is provided\", () => {\n            const callback = () => null;\n            client.getWebhookNotification(\"webhook-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"webhook-notifications/webhook-token\", {}, callback);\n        });\n    });\n\n    //--------------------------------------\n    // Internal utils\n    //--------------------------------------\n\n    describe(\"addProgramToken()\", () => {\n        it(\"should do nothing if no data is provided\", () => {\n            const client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n\n            expect(client.addProgramToken()).to.be.undefined();\n        });\n\n        it(\"should do nothing if no programToken is set\", () => {\n            const client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n\n            client.addProgramToken({ test: \"value\" }).should.be.deep.equal({ test: \"value\" });\n        });\n\n        it(\"should do nothing if programToken is set in data\", () => {\n            const client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n                programToken: \"test-program-token\",\n            });\n\n            client.addProgramToken({ test: \"value\", programToken: \"my-program-token\" }).should.be.deep.equal({ test: \"value\", programToken: \"my-program-token\" });\n        });\n\n        it(\"should add programToken if no programToken is set in data\", () => {\n            const client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n                programToken: \"test-program-token\",\n            });\n\n            client.addProgramToken({ test: \"value\" }).should.be.deep.equal({ test: \"value\", programToken: \"test-program-token\" });\n        });\n    });\n\n    describe(\"handle204Response()\", () => {\n        it(\"should return a 'function' with a argument\", () => {\n            Hyperwallet.handle204Response(() => null).should.be.a(\"function\");\n        });\n\n        it(\"should do nothing for errors\", (cb) => {\n            const providedErr = new Error(\"Test\");\n            const providedData = {\n                test: \"value\",\n            };\n            const providedRes = {\n                status: 200,\n            };\n\n            const callback = Hyperwallet.handle204Response((err, data, res) => {\n                err.should.be.deep.equal(providedErr);\n                data.should.be.deep.equal(providedData);\n                res.should.be.deep.equal(providedRes);\n\n                cb();\n            });\n            callback(providedErr, providedData, providedRes);\n        });\n\n        it(\"should do nothing for non 204 responses\", (cb) => {\n            const providedData = {\n                test: \"value\",\n            };\n            const providedRes = {\n                status: 200,\n            };\n\n            const callback = Hyperwallet.handle204Response((err, data, res) => {\n                expect(err).to.be.undefined();\n\n                data.should.be.deep.equal(providedData);\n                res.should.be.deep.equal(providedRes);\n\n                cb();\n            });\n            callback(undefined, providedData, providedRes);\n        });\n\n        it(\"should return empty list for 204 responses\", (cb) => {\n            const providedData = {\n                test: \"value\",\n            };\n            const providedRes = {\n                status: 204,\n            };\n\n            const callback = Hyperwallet.handle204Response((err, data, res) => {\n                expect(err).to.be.undefined();\n\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n                res.should.be.deep.equal(providedRes);\n\n                cb();\n            });\n            callback(undefined, providedData, providedRes);\n        });\n    });\n\n    //--------------------------------------\n    // Venmo accounts\n    //--------------------------------------\n\n    /** @test {Hyperwallet#createVenmoAccount} */\n    describe(\"createVenmoAccount()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createVenmoAccount} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createVenmoAccount(undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#createVenmoAccount} */\n        it(\"should throw error if transferMethodCountry is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createVenmoAccount(\"test-user-token\", { test: \"value\" }, callback)).to.throw(\"transferMethodCountry is required\");\n        });\n\n        /** @test {Hyperwallet#createVenmoAccount} */\n        it(\"should throw error if transferMethodCurrency is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createVenmoAccount(\"test-user-token\", {\n                transferMethodCountry: \"test-transferMethodCountry\",\n            }, callback)).to.throw(\"transferMethodCurrency is required\");\n        });\n\n        /** @test {Hyperwallet#createVenmoAccount} */\n        it(\"should throw error if accountId is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createVenmoAccount(\"test-user-token\", {\n                transferMethodCountry: \"test-transferMethodCountry\",\n                transferMethodCurrency: \"test-transferMethodCurrency\",\n            }, callback)).to.throw(\"Account is required\");\n        });\n\n        /** @test {Hyperwallet#createVenmoAccount} */\n        it(\"should do post call to venmo account endpoint\", () => {\n            const callback = () => null;\n            client.createVenmoAccount(\"test-user-token\", {\n                transferMethodCountry: \"test-transferMethodCountry\",\n                transferMethodCurrency: \"test-transferMethodCurrency\",\n                accountId: \"accountId\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/venmo-accounts\", {\n                transferMethodCountry: \"test-transferMethodCountry\",\n                transferMethodCurrency: \"test-transferMethodCurrency\",\n                accountId: \"accountId\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getVenmoAccount} */\n    describe(\"getVenmoAccount()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getVenmoAccount} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getVenmoAccount(undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getVenmoAccount} */\n        it(\"should throw error if venmoAccountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getVenmoAccount(\"test-user-token\", undefined, callback)).to.throw(\"venmoAccountToken is required\");\n        });\n\n        /** @test {Hyperwallet#getVenmoAccount} */\n        it(\"should do get call if userToken and venmoAccountToken is provided\", () => {\n            const callback = () => null;\n            client.getVenmoAccount(\"test-user-token\", \"test-venmo-account-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/venmo-accounts/test-venmo-account-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listVenmoAccounts} */\n    describe(\"listVenmoAccounts()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listVenmoAccounts} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listVenmoAccounts(undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listVenmoAccounts} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            const options = {\n                type: \"test-type\",\n                status: \"test-status\",\n                createdBefore: \"test-createdBefore\",\n                createdAfter: \"test-createdBefore\",\n                sortBy: \"test-sortBy\",\n                limit: \"test-limit\",\n            };\n            client.listVenmoAccounts(\"test-user-token\", options, callback);\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/venmo-accounts\", options);\n        });\n\n        /** @test {Hyperwallet#listVenmoAccounts} */\n        it(\"should throw error for invalid filter\", () => {\n            const callback = () => null;\n            expect(() => client.listVenmoAccounts(\"test-user-token\", { type: \"test-type\", test: \"value\" }, callback))\n                .to.throw(\"Invalid Filter. Expected - type,status,createdBefore,createdAfter,sortBy,limit\");\n        });\n\n        /** @test {Hyperwallet#listVenmoAccounts} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listVenmoAccounts(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/venmo-accounts\", {});\n        });\n\n        /** @test {Hyperwallet#listVenmoAccounts} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listVenmoAccounts(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/venmo-accounts\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    /** @test {Hyperwallet#updateVenmoAccount} */\n    describe(\"updateVenmoAccount()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPut: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#updateVenmoAccount} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.updateVenmoAccount(undefined, undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#updateVenmoAccount} */\n        it(\"should throw error if venmoAccountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.updateVenmoAccount(\"test-user-token\", undefined, { test: \"value\" }, callback)).to.throw(\"venmoAccountToken is required\");\n        });\n\n        /** @test {Hyperwallet#updateVenmoAccount} */\n        it(\"should do put call to venmo accounts endpoint\", () => {\n            const callback = () => null;\n            client.updateVenmoAccount(\"test-user-token\", \"test-venmo-account-token\", {\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/venmo-accounts/test-venmo-account-token\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#deactivateVenmoAccount} */\n    describe(\"deactivateVenmoAccount()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#deactivateVenmoAccount} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.deactivateVenmoAccount(undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#deactivateVenmoAccount} */\n        it(\"should throw error if venmoAccountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.deactivateVenmoAccount(\"test-user-token\", undefined, callback)).to.throw(\"venmoAccountToken is required\");\n        });\n\n        /** @test {Hyperwallet#deactivateVenmoAccount} */\n        it(\"should send transition to 'DE_ACTIVATED'\", () => {\n            const callback = () => null;\n            client.deactivateVenmoAccount(\"test-user-token\", \"test-venmo-account-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/venmo-accounts/test-venmo-account-token/status-transitions\", {\n                transition: \"DE_ACTIVATED\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#createVenmoAccountStatusTransition} */\n    describe(\"createVenmoAccountStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createVenmoAccountStatusTransition} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createVenmoAccountStatusTransition(undefined, undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#createVenmoAccountStatusTransition} */\n        it(\"should throw error if venmoAccountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createVenmoAccountStatusTransition(\"test-user-token\", undefined, { test: \"value\" }, callback)).to.throw(\"venmoAccountToken is required\");\n        });\n\n        /** @test {Hyperwallet#createVenmoAccountStatusTransition} */\n        it(\"should send post call to venmo account status transition endpoint\", () => {\n            const callback = () => null;\n            client.createVenmoAccountStatusTransition(\"test-user-token\", \"test-venmo-account-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/venmo-accounts/test-venmo-account-token/status-transitions\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n\n    /** @test {Hyperwallet#getVenmoAccountStatusTransition} */\n    describe(\"getVenmoAccountStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getVenmoAccountStatusTransition} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getVenmoAccountStatusTransition(undefined, undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getVenmoAccountStatusTransition} */\n        it(\"should throw error if venmoAccountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getVenmoAccountStatusTransition(\"test-user-token\", undefined, undefined, callback)).to.throw(\"venmoAccountToken is required\");\n        });\n\n        /** @test {Hyperwallet#getVenmoAccountStatusTransition} */\n        it(\"should throw error if statusTransitionToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getVenmoAccountStatusTransition(\"test-user-token\", \"test-venmo-account-token\", undefined, callback)).to.throw(\"statusTransitionToken is required\");\n        });\n\n        /** @test {Hyperwallet#getVenmoAccountStatusTransition} */\n        it(\"should do get call if userToken, venmoAccountToken and statusTransitionToken is provided\", () => {\n            const callback = () => null;\n            client.getVenmoAccountStatusTransition(\"test-user-token\", \"test-venmo-account-token\", \"status-transition-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/venmo-accounts/test-venmo-account-token/status-transitions/status-transition-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listVenmoAccountStatusTransitions} */\n    describe(\"listVenmoAccountStatusTransitions()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listVenmoAccountStatusTransitions} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listVenmoAccountStatusTransitions(undefined, undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listVenmoAccountStatusTransitions} */\n        it(\"should throw error if venmoAccountToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listVenmoAccountStatusTransitions(\"test-user-token\", undefined, {}, callback)).to.throw(\"venmoAccountToken is required\");\n        });\n\n        /** @test {Hyperwallet#listVenmoAccountStatusTransitions} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            const options = {\n                transition: \"test-transition\",\n                createdBefore: \"test-createdBefore\",\n                createdAfter: \"test-createdBefore\",\n                sortBy: \"test-sortBy\",\n                limit: \"test-limit\",\n            };\n            client.listVenmoAccountStatusTransitions(\"test-user-token\", \"test-venmo-account-token\", options, callback);\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/venmo-accounts/test-venmo-account-token/status-transitions\", options);\n        });\n\n        /** @test {Hyperwallet#listVenmoAccountStatusTransitions} */\n        it(\"should throw error for invalid filter\", () => {\n            const callback = () => null;\n            expect(() => client.listVenmoAccountStatusTransitions(\"test-user-token\", \"test-venmo-account-token\", { transition: \"test-transition\", test: \"value\" }, callback))\n                .to.throw(\"Invalid Filter. Expected - transition,createdBefore,createdAfter,sortBy,limit\");\n        });\n\n        /** @test {Hyperwallet#listVenmoAccountStatusTransitions} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listVenmoAccountStatusTransitions(\"test-user-token\", \"test-venmo-account-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/venmo-accounts/test-venmo-account-token/status-transitions\", {});\n        });\n\n        /** @test {Hyperwallet#listVenmoAccountStatusTransitions} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listVenmoAccountStatusTransitions(\"test-user-token\", \"test-venmo-account-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/venmo-accounts/test-venmo-account-token/status-transitions\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    //--------------------------------------\n    // Business StakeHolder\n    //--------------------------------------\n\n    /** @test {Hyperwallet#createBusinessStakeholder} */\n    describe(\"createBusinessStakeholder()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createStakeholder} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createBusinessStakeholder(undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#createStakeholder} */\n        it(\"should send post call to Stakeholder status transition endpoint\", () => {\n            const callback = () => null;\n            client.createBusinessStakeholder(\"test-user-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/business-stakeholders\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listBusinessStakeholders} */\n    describe(\"listBusinessStakeholders()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listBusinessStakeholders} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listBusinessStakeholders(undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listBusinessStakeholders} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listBusinessStakeholders(\"test-user-token\", { status: \"test-status\" }, callback);\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/business-stakeholders\", { status: \"test-status\" });\n        });\n\n        /** @test {Hyperwallet#listBusinessStakeholders} */\n        it(\"should throw error for invalid filter\", () => {\n            const callback = () => null;\n            expect(() => client.listBusinessStakeholders(\"test-user-token\", { status: \"test-status\", test: \"value\" }, callback))\n                .to.throw(\"Invalid Filter. Expected - status,createdBefore,createdAfter,sortBy,limit\");\n        });\n\n        /** @test {Hyperwallet#listBusinessStakeholders} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listBusinessStakeholders(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/business-stakeholders\", {});\n        });\n\n        /** @test {Hyperwallet#listBusinessStakeholders} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listBusinessStakeholders(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/business-stakeholders\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    /** @test {Hyperwallet#updateBusinessStakeholder} */\n    describe(\"updateBusinessStakeholder()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPut: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#updateBusinessStakeholder} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.updateBusinessStakeholder(undefined, undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#updateBusinessStakeholder} */\n        it(\"should throw error if stakeholderToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.updateBusinessStakeholder(\"test-user-token\", undefined, { test: \"value\" }, callback)).to.throw(\"stakeholderToken is required\");\n        });\n\n        /** @test {Hyperwallet#updateBusinessStakeholder} */\n        it(\"should do put call to Stakeholder endpoint\", () => {\n            const callback = () => null;\n            client.updateBusinessStakeholder(\"test-user-token\", \"test-stakeholder-token\", {\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/business-stakeholders/test-stakeholder-token\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#deactivateBusinessStakeholder} */\n    describe(\"deactivateBusinessStakeholder()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#deactivateBusinessStakeholder} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.deactivateBusinessStakeholder(undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#deactivateBusinessStakeholder} */\n        it(\"should throw error if stakeholderToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.deactivateBusinessStakeholder(\"test-user-token\", undefined, callback)).to.throw(\"stakeholderToken is required\");\n        });\n\n        /** @test {Hyperwallet#deactivateBusinessStakeholder} */\n        it(\"should send transition to 'DE_ACTIVATED'\", () => {\n            const callback = () => null;\n            client.deactivateBusinessStakeholder(\"test-user-token\", \"test-stakeholder-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/business-stakeholders/test-stakeholder-token/status-transitions\", {\n                transition: \"DE_ACTIVATED\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#activateBusinessStakeholder} */\n    describe(\"activateBusinessStakeholder()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#activateBusinessStakeholder} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.activateBusinessStakeholder(undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#activateBusinessStakeholder} */\n        it(\"should throw error if stakeholderToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.activateBusinessStakeholder(\"test-user-token\", undefined, callback)).to.throw(\"stakeholderToken is required\");\n        });\n\n        /** @test {Hyperwallet#activateBusinessStakeholder} */\n        it(\"should send transition to 'ACTIVATED'\", () => {\n            const callback = () => null;\n            client.activateBusinessStakeholder(\"test-user-token\", \"test-stakeholder-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/business-stakeholders/test-stakeholder-token/status-transitions\", {\n                transition: \"ACTIVATED\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#createBusinessStakeholderStatusTransition} */\n    describe(\"createBusinessStakeholderStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPost: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#createBusinessStakeholderStatusTransition} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createBusinessStakeholderStatusTransition(undefined, undefined, { test: \"value\" }, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#createBusinessStakeholderStatusTransition} */\n        it(\"should throw error if stakeholderToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.createBusinessStakeholderStatusTransition(\"test-user-token\", undefined, { test: \"value\" }, callback)).to.throw(\"stakeholderToken is required\");\n        });\n\n        /** @test {Hyperwallet#createBusinessStakeholderStatusTransition} */\n        it(\"should send post call to StakeHolder status transition endpoint\", () => {\n            const callback = () => null;\n            client.createBusinessStakeholderStatusTransition(\"test-user-token\", \"test-stakeholder-token\", { test: \"value\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/business-stakeholders/test-stakeholder-token/status-transitions\", {\n                test: \"value\",\n            }, {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#getBusinessStakeholderStatusTransition} */\n    describe(\"getBusinessStakeholderStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getBusinessStakeholderStatusTransition} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getBusinessStakeholderStatusTransition(undefined, undefined, undefined, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#getBusinessStakeholderStatusTransition} */\n        it(\"should throw error if stakeholderToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getBusinessStakeholderStatusTransition(\"test-user-token\", undefined, undefined, callback)).to.throw(\"stakeholderToken is required\");\n        });\n\n        /** @test {Hyperwallet#getBusinessStakeholderStatusTransition} */\n        it(\"should throw error if statusTransitionToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getBusinessStakeholderStatusTransition(\"test-user-token\", \"test-stakeholder-token\", undefined, callback)).to.throw(\"statusTransitionToken is required\");\n        });\n\n        /** @test {Hyperwallet#getBusinessStakeholderStatusTransition} */\n        it(\"should do get call if userToken, stakeholderToken and statusTransitionToken is provided\", () => {\n            const callback = () => null;\n            client.getBusinessStakeholderStatusTransition(\"test-user-token\", \"test-stakeholder-token\", \"status-transition-token\", callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/business-stakeholders/test-stakeholder-token/status-transitions/status-transition-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listBusinessStakeholderStatusTransitions} */\n    describe(\"listBusinessStakeholderStatusTransitions()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listBusinessStakeholderStatusTransitions} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listBusinessStakeholderStatusTransitions(undefined, undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listBusinessStakeholderStatusTransitions} */\n        it(\"should throw error if stakeholderToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listBusinessStakeholderStatusTransitions(\"test-user-token\", undefined, {}, callback)).to.throw(\"stakeholderToken is required\");\n        });\n\n        /** @test {Hyperwallet#listBusinessStakeholderStatusTransitions} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listBusinessStakeholderStatusTransitions(\"test-user-token\", \"test-stakeholder-token\", { transition: \"test-transition\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/business-stakeholders/test-stakeholder-token/status-transitions\", { transition: \"test-transition\" });\n        });\n\n        /** @test {Hyperwallet#listBusinessStakeholderStatusTransitions} */\n        it(\"should throw error for invalid filter\", () => {\n            const callback = () => null;\n            expect(() => client.listBusinessStakeholderStatusTransitions(\"test-user-token\", \"test-stakeholder-token\", { transition: \"test-transition\", test: \"value\" }, callback))\n                .to.throw(\"Invalid Filter. Expected - transition,createdBefore,createdAfter,sortBy,offset,limit\");\n        });\n\n        /** @test {Hyperwallet#listBusinessStakeholderStatusTransitions} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listBusinessStakeholderStatusTransitions(\"test-user-token\", \"test-stakeholder-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/business-stakeholders/test-stakeholder-token/status-transitions\", {});\n        });\n\n        /** @test {Hyperwallet#listBusinessStakeholderStatusTransitions} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listBusinessStakeholderStatusTransitions(\"test-user-token\", \"test-stakeholder-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/business-stakeholders/test-stakeholder-token/status-transitions\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    describe(\"uploadBusinessStakeholderDocuments()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doPutMultipart: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#uploadBusinessStakeholderDocuments} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.uploadBusinessStakeholderDocuments(undefined, undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#uploadBusinessStakeholderDocuments} */\n        it(\"should throw error if stakeholderToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.uploadBusinessStakeholderDocuments(\"test-user-token\", undefined, {}, callback)).to.throw(\"stakeholderToken is required\");\n        });\n\n        /** @test {Hyperwallet#uploadBusinessStakeholderDocuments} */\n        it(\"should throw error if data is missing\", () => {\n            const callback = () => null;\n            expect(() => client.uploadBusinessStakeholderDocuments(\"test-user-token\", \"test-stakeholder-token\", null, callback)).to.throw(\"Files for upload are require\");\n        });\n\n        /** @test {Hyperwallet#uploadBusinessStakeholderDocuments} */\n        it(\"should do put call to upload multipart\", () => {\n            const callback = () => null;\n\n            client.uploadBusinessStakeholderDocuments(\"users/test-user-token\", \"test-stakeholder-token\", {\n                test: \"value\",\n            }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n        });\n    });\n\n    /** @test {Hyperwallet#listTransferMethods} */\n    describe(\"listTransferMethods()\", () => {\n        let client;\n        let apiClientSpy;\n\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listTransferMethods} */\n        it(\"should throw error if userToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listTransferMethods(undefined, {}, callback)).to.throw(\"userToken is required\");\n        });\n\n        /** @test {Hyperwallet#listTransferMethods} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listTransferMethods(\"test-user-token\", { status: \"test-status\" }, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/transfer-methods\", { status: \"test-status\" });\n        });\n\n        /** @test {Hyperwallet#listTransferMethods} */\n        it(\"should throw error for invalid filter\", () => {\n            const callback = () => null;\n            expect(() => client.listTransferMethods(\"test-user-token\", { status: \"test-status\", test: \"value\" }, callback))\n                .to.throw(\"Invalid Filter. Expected - status,type,createdBefore,createdAfter,sortBy,limit\");\n        });\n\n        /** @test {Hyperwallet#listTransferMethods} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listTransferMethods(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/transfer-methods\", {});\n        });\n\n        /** @test {Hyperwallet#listTransferMethods} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n\n                cb();\n            };\n            client.listTransferMethods(\"test-user-token\", {}, callback);\n\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"users/test-user-token/transfer-methods\", {});\n\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n\n    /** @test {Hyperwallet#getTransferStatusTransition} */\n    describe(\"getTransferStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#getTransferStatusTransition} */\n        it(\"should throw error if transferToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getTransferStatusTransition(undefined, undefined, callback)).to.throw(\"transferToken is required\");\n        });\n\n        /** @test {Hyperwallet#getTransferStatusTransition} */\n        it(\"should throw error if statusTransitionToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.getTransferStatusTransition(\"test-transfer-token\", undefined, callback)).to.throw(\"statusTransitionToken is required\");\n        });\n\n        /** @test {Hyperwallet#getTransferStatusTransition} */\n        it(\"should do get call if transferToken and statusTransitionToken is provided\", () => {\n            const callback = () => null;\n            client.getTransferStatusTransition(\"test-transfer-token\", \"test-status-transition-token\", callback);\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"transfers/test-transfer-token/status-transitions/test-status-transition-token\", {}, callback);\n        });\n    });\n\n    /** @test {Hyperwallet#listTransferStatusTransition} */\n    describe(\"listTransferStatusTransition()\", () => {\n        let client;\n        let apiClientSpy;\n        beforeEach(() => {\n            apiClientSpy = sinon.spy();\n            client = new Hyperwallet({\n                username: \"test-username\",\n                password: \"test-password\",\n            });\n            client.client = {\n                doGet: apiClientSpy,\n            };\n        });\n\n        /** @test {Hyperwallet#listTransferStatusTransition} */\n        it(\"should throw error if transferToken is missing\", () => {\n            const callback = () => null;\n            expect(() => client.listTransferStatusTransition(undefined, {}, callback)).to.throw(\"transferToken is required\");\n        });\n\n        /** @test {Hyperwallet#listTransferStatusTransition} */\n        it(\"should do get call with options\", () => {\n            const callback = () => null;\n            client.listTransferStatusTransition(\"test-transfer-token\", { test: \"value\" }, callback);\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"transfers/test-transfer-token/status-transitions\", { test: \"value\" });\n        });\n\n        /** @test {Hyperwallet#listTransferStatusTransition} */\n        it(\"should do get call without options\", () => {\n            const callback = () => null;\n            client.listTransferStatusTransition(\"test-transfer-token\", {}, callback);\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"transfers/test-transfer-token/status-transitions\", {});\n        });\n\n        /** @test {Hyperwallet#listTransferStatusTransition} */\n        it(\"should handle 204 return\", (cb) => {\n            const callback = (err, data) => {\n                data.should.be.deep.equal({\n                    hasNextPage: false,\n                    hasPreviousPage: false,\n                    limit: 0,\n                    data: [],\n                });\n                cb();\n            };\n            client.listTransferStatusTransition(\"test-transfer-token\", {}, callback);\n            apiClientSpy.should.have.been.calledOnce();\n            apiClientSpy.should.have.been.calledWith(\"transfers/test-transfer-token/status-transitions\", {});\n            apiClientSpy.getCall(0).args[2](undefined, {}, {\n                status: 204,\n            });\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/node-sdk/node-sdk/test/Hyperwallet.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 215,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/Hyperwallet.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0",
    "access": null,
    "description": "Hyperwallet",
    "lineNumber": 14,
    "testTargets": [
      "Hyperwallet"
    ]
  },
  {
    "__docId__": 216,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe1",
    "access": null,
    "description": "constructor()",
    "lineNumber": 16,
    "testTargets": [
      "Hyperwallet#constructor"
    ]
  },
  {
    "__docId__": 217,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe1.it2",
    "access": null,
    "description": "should initialize ApiClient with default server",
    "lineNumber": 18,
    "testTargets": [
      "Hyperwallet#constructor"
    ]
  },
  {
    "__docId__": 218,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe1.it3",
    "access": null,
    "description": "should set programToken to undefined if not provided",
    "lineNumber": 29,
    "testTargets": [
      "Hyperwallet#constructor"
    ]
  },
  {
    "__docId__": 219,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe1.it4",
    "access": null,
    "description": "should set programToken if provided",
    "lineNumber": 39,
    "testTargets": [
      "Hyperwallet#constructor"
    ]
  },
  {
    "__docId__": 220,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe1.it5",
    "access": null,
    "description": "should initialize ApiClient with provided server",
    "lineNumber": 50,
    "testTargets": [
      "Hyperwallet#constructor"
    ]
  },
  {
    "__docId__": 221,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe1.it6",
    "access": null,
    "description": "should throw error if username is missing",
    "lineNumber": 61,
    "testTargets": [
      "Hyperwallet#constructor"
    ]
  },
  {
    "__docId__": 222,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe1.it7",
    "access": null,
    "description": "should throw error if password is missing",
    "lineNumber": 68,
    "testTargets": [
      "Hyperwallet#constructor"
    ]
  },
  {
    "__docId__": 223,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe1.it8",
    "access": null,
    "description": "should throw error if username and password is missing",
    "lineNumber": 75,
    "testTargets": [
      "Hyperwallet#constructor"
    ]
  },
  {
    "__docId__": 224,
    "kind": "test",
    "name": "describe9",
    "testId": 9,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe9",
    "access": null,
    "description": "listUsers()",
    "lineNumber": 85
  },
  {
    "__docId__": 225,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe9",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe9.it10",
    "access": null,
    "description": "should not have any TLS issues",
    "lineNumber": 86
  },
  {
    "__docId__": 226,
    "kind": "test",
    "name": "describe11",
    "testId": 11,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe11",
    "access": null,
    "description": "formatResForCallback()",
    "lineNumber": 103,
    "testTargets": [
      "Hyperwallet#formatResForCallback"
    ]
  },
  {
    "__docId__": 227,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe11",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe11.it12",
    "access": null,
    "description": "should return a formated response body, parse reasons",
    "lineNumber": 105,
    "testTargets": [
      "Hyperwallet#formatResForCallback"
    ]
  },
  {
    "__docId__": 228,
    "kind": "test",
    "name": "it13",
    "testId": 13,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe11",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe11.it13",
    "access": null,
    "description": "should return a formated response body, parse documents",
    "lineNumber": 135,
    "testTargets": [
      "Hyperwallet#formatResForCallback"
    ]
  },
  {
    "__docId__": 229,
    "kind": "test",
    "name": "it14",
    "testId": 14,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe11",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe11.it14",
    "access": null,
    "description": "should not modify response body with no documents",
    "lineNumber": 154,
    "testTargets": [
      "Hyperwallet#formatResForCallback"
    ]
  },
  {
    "__docId__": 230,
    "kind": "test",
    "name": "describe15",
    "testId": 15,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe15",
    "access": null,
    "description": "createUser()",
    "lineNumber": 165,
    "testTargets": [
      "Hyperwallet#createUser"
    ]
  },
  {
    "__docId__": 231,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe15",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe15.it16",
    "access": null,
    "description": "should do post call to users endpoint without programToken added",
    "lineNumber": 181,
    "testTargets": [
      "Hyperwallet#createUser"
    ]
  },
  {
    "__docId__": 232,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe15",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe15.it17",
    "access": null,
    "description": "should do post call to users endpoint with programToken added",
    "lineNumber": 194,
    "testTargets": [
      "Hyperwallet#createUser"
    ]
  },
  {
    "__docId__": 233,
    "kind": "test",
    "name": "describe18",
    "testId": 18,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe18",
    "access": null,
    "description": "getUser()",
    "lineNumber": 211,
    "testTargets": [
      "Hyperwallet#getUser"
    ]
  },
  {
    "__docId__": 234,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe18",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe18.it19",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 227,
    "testTargets": [
      "Hyperwallet#getUser"
    ]
  },
  {
    "__docId__": 235,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe18",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe18.it20",
    "access": null,
    "description": "should do get call if userToken is provided",
    "lineNumber": 233,
    "testTargets": [
      "Hyperwallet#getUser"
    ]
  },
  {
    "__docId__": 236,
    "kind": "test",
    "name": "describe21",
    "testId": 21,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe21",
    "access": null,
    "description": "updateUser()",
    "lineNumber": 243,
    "testTargets": [
      "Hyperwallet#updateUser"
    ]
  },
  {
    "__docId__": 237,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe21.it22",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 259,
    "testTargets": [
      "Hyperwallet#updateUser"
    ]
  },
  {
    "__docId__": 238,
    "kind": "test",
    "name": "it23",
    "testId": 23,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe21.it23",
    "access": null,
    "description": "should do put call to users endpoint without programToken added",
    "lineNumber": 265,
    "testTargets": [
      "Hyperwallet#updateUser"
    ]
  },
  {
    "__docId__": 239,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe21.it24",
    "access": null,
    "description": "should do put call to users endpoint with programToken added",
    "lineNumber": 278,
    "testTargets": [
      "Hyperwallet#updateUser"
    ]
  },
  {
    "__docId__": 240,
    "kind": "test",
    "name": "describe25",
    "testId": 25,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe25",
    "access": null,
    "description": "listUsers()",
    "lineNumber": 295,
    "testTargets": [
      "Hyperwallet#listUsers"
    ]
  },
  {
    "__docId__": 241,
    "kind": "test",
    "name": "it26",
    "testId": 26,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe25",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe25.it26",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 311,
    "testTargets": [
      "Hyperwallet#listUsers"
    ]
  },
  {
    "__docId__": 242,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe25",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe25.it27",
    "access": null,
    "description": "should throw error for invalid filter",
    "lineNumber": 331,
    "testTargets": [
      "Hyperwallet#listUsers"
    ]
  },
  {
    "__docId__": 243,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe25",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe25.it28",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 337,
    "testTargets": [
      "Hyperwallet#listUsers"
    ]
  },
  {
    "__docId__": 244,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe25",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe25.it29",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 345,
    "testTargets": [
      "Hyperwallet#listUsers"
    ]
  },
  {
    "__docId__": 245,
    "kind": "test",
    "name": "describe30",
    "testId": 30,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe30",
    "access": null,
    "description": "activateUser()",
    "lineNumber": 368,
    "testTargets": [
      "Hyperwallet#activateUser"
    ]
  },
  {
    "__docId__": 246,
    "kind": "test",
    "name": "it31",
    "testId": 31,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe30",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe30.it31",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 386,
    "testTargets": [
      "Hyperwallet#activateUser"
    ]
  },
  {
    "__docId__": 247,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe30",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe30.it32",
    "access": null,
    "description": "should send transition to 'ACTIVATED'",
    "lineNumber": 394,
    "testTargets": [
      "Hyperwallet#activateUser"
    ]
  },
  {
    "__docId__": 248,
    "kind": "test",
    "name": "describe33",
    "testId": 33,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe33",
    "access": null,
    "description": "deactivateUser()",
    "lineNumber": 406,
    "testTargets": [
      "Hyperwallet#deactivateUser"
    ]
  },
  {
    "__docId__": 249,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe33",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe33.it34",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 424,
    "testTargets": [
      "Hyperwallet#deactivateUser"
    ]
  },
  {
    "__docId__": 250,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe33",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe33.it35",
    "access": null,
    "description": "should send transition to 'DE_ACTIVATED'",
    "lineNumber": 432,
    "testTargets": [
      "Hyperwallet#deactivateUser"
    ]
  },
  {
    "__docId__": 251,
    "kind": "test",
    "name": "describe36",
    "testId": 36,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe36",
    "access": null,
    "description": "lockUser()",
    "lineNumber": 444,
    "testTargets": [
      "Hyperwallet#lockUser"
    ]
  },
  {
    "__docId__": 252,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe36",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe36.it37",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 462,
    "testTargets": [
      "Hyperwallet#lockUser"
    ]
  },
  {
    "__docId__": 253,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe36",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe36.it38",
    "access": null,
    "description": "should send transition to 'LOCKED'",
    "lineNumber": 470,
    "testTargets": [
      "Hyperwallet#lockUser"
    ]
  },
  {
    "__docId__": 254,
    "kind": "test",
    "name": "describe39",
    "testId": 39,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe39",
    "access": null,
    "description": "freezeUser()",
    "lineNumber": 482,
    "testTargets": [
      "Hyperwallet#freezeUser"
    ]
  },
  {
    "__docId__": 255,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe39",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe39.it40",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 500,
    "testTargets": [
      "Hyperwallet#freezeUser"
    ]
  },
  {
    "__docId__": 256,
    "kind": "test",
    "name": "it41",
    "testId": 41,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe39",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe39.it41",
    "access": null,
    "description": "should send transition to 'FROZEN'",
    "lineNumber": 508,
    "testTargets": [
      "Hyperwallet#freezeUser"
    ]
  },
  {
    "__docId__": 257,
    "kind": "test",
    "name": "describe42",
    "testId": 42,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe42",
    "access": null,
    "description": "preactivateUser()",
    "lineNumber": 520,
    "testTargets": [
      "Hyperwallet#preactivateUser"
    ]
  },
  {
    "__docId__": 258,
    "kind": "test",
    "name": "it43",
    "testId": 43,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe42",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe42.it43",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 538,
    "testTargets": [
      "Hyperwallet#preactivateUser"
    ]
  },
  {
    "__docId__": 259,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe42",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe42.it44",
    "access": null,
    "description": "should send transition to 'PRE_ACTIVATED'",
    "lineNumber": 546,
    "testTargets": [
      "Hyperwallet#preactivateUser"
    ]
  },
  {
    "__docId__": 260,
    "kind": "test",
    "name": "describe45",
    "testId": 45,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe45",
    "access": null,
    "description": "createUserStatusTransition()",
    "lineNumber": 558,
    "testTargets": [
      "Hyperwallet#createUserStatusTransition"
    ]
  },
  {
    "__docId__": 261,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe45",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe45.it46",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 574,
    "testTargets": [
      "Hyperwallet#createUserStatusTransition"
    ]
  },
  {
    "__docId__": 262,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe45",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe45.it47",
    "access": null,
    "description": "should send post call to user status transition endpoint",
    "lineNumber": 580,
    "testTargets": [
      "Hyperwallet#createUserStatusTransition"
    ]
  },
  {
    "__docId__": 263,
    "kind": "test",
    "name": "describe48",
    "testId": 48,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe48",
    "access": null,
    "description": "getUserStatusTransition()",
    "lineNumber": 592,
    "testTargets": [
      "Hyperwallet#getUserStatusTransition"
    ]
  },
  {
    "__docId__": 264,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe48.it49",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 608,
    "testTargets": [
      "Hyperwallet#getUserStatusTransition"
    ]
  },
  {
    "__docId__": 265,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe48.it50",
    "access": null,
    "description": "should throw error if statusTransitionToken is missing",
    "lineNumber": 614,
    "testTargets": [
      "Hyperwallet#getUserStatusTransition"
    ]
  },
  {
    "__docId__": 266,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe48",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe48.it51",
    "access": null,
    "description": "should do get call if userToken and statusTransitionToken is provided",
    "lineNumber": 620,
    "testTargets": [
      "Hyperwallet#getUserStatusTransition"
    ]
  },
  {
    "__docId__": 267,
    "kind": "test",
    "name": "describe52",
    "testId": 52,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe52",
    "access": null,
    "description": "listUserStatusTransitions()",
    "lineNumber": 630,
    "testTargets": [
      "Hyperwallet#listUserStatusTransitions"
    ]
  },
  {
    "__docId__": 268,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe52.it53",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 646,
    "testTargets": [
      "Hyperwallet#listUserStatusTransitions"
    ]
  },
  {
    "__docId__": 269,
    "kind": "test",
    "name": "it54",
    "testId": 54,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe52.it54",
    "access": null,
    "description": "should throw error for invalid filter",
    "lineNumber": 661,
    "testTargets": [
      "Hyperwallet#listUserStatusTransitions"
    ]
  },
  {
    "__docId__": 270,
    "kind": "test",
    "name": "it55",
    "testId": 55,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe52.it55",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 668,
    "testTargets": [
      "Hyperwallet#listUserStatusTransitions"
    ]
  },
  {
    "__docId__": 271,
    "kind": "test",
    "name": "it56",
    "testId": 56,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe52.it56",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 674,
    "testTargets": [
      "Hyperwallet#listUserStatusTransitions"
    ]
  },
  {
    "__docId__": 272,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe52.it57",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 683,
    "testTargets": [
      "Hyperwallet#listUserStatusTransitions"
    ]
  },
  {
    "__docId__": 273,
    "kind": "test",
    "name": "describe58",
    "testId": 58,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe58",
    "access": null,
    "description": "uploadDocuments()",
    "lineNumber": 705
  },
  {
    "__docId__": 274,
    "kind": "test",
    "name": "it59",
    "testId": 59,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe58",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe58.it59",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 721,
    "testTargets": [
      "Hyperwallet#uploadDocuments"
    ]
  },
  {
    "__docId__": 275,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe58",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe58.it60",
    "access": null,
    "description": "should throw error if data is missing",
    "lineNumber": 727,
    "testTargets": [
      "Hyperwallet#uploadDocuments"
    ]
  },
  {
    "__docId__": 276,
    "kind": "test",
    "name": "it61",
    "testId": 61,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe58",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe58.it61",
    "access": null,
    "description": "should do put call to upload multipart",
    "lineNumber": 734,
    "testTargets": [
      "Hyperwallet#uploadDocuments"
    ]
  },
  {
    "__docId__": 277,
    "kind": "test",
    "name": "describe62",
    "testId": 62,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe62",
    "access": null,
    "description": "createBankCard()",
    "lineNumber": 750,
    "testTargets": [
      "Hyperwallet#createBankCard"
    ]
  },
  {
    "__docId__": 278,
    "kind": "test",
    "name": "it63",
    "testId": 63,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe62",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe62.it63",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 766,
    "testTargets": [
      "Hyperwallet#createBankCard"
    ]
  },
  {
    "__docId__": 279,
    "kind": "test",
    "name": "it64",
    "testId": 64,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe62",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe62.it64",
    "access": null,
    "description": "should do post call to bank cards endpoint",
    "lineNumber": 772,
    "testTargets": [
      "Hyperwallet#createBankCard"
    ]
  },
  {
    "__docId__": 280,
    "kind": "test",
    "name": "describe65",
    "testId": 65,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe65",
    "access": null,
    "description": "getBankCard()",
    "lineNumber": 786,
    "testTargets": [
      "Hyperwallet#getBankCard"
    ]
  },
  {
    "__docId__": 281,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe65",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe65.it66",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 802,
    "testTargets": [
      "Hyperwallet#getBankCard"
    ]
  },
  {
    "__docId__": 282,
    "kind": "test",
    "name": "it67",
    "testId": 67,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe65",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe65.it67",
    "access": null,
    "description": "should throw error if bankCardToken is missing",
    "lineNumber": 808,
    "testTargets": [
      "Hyperwallet#getBankCard"
    ]
  },
  {
    "__docId__": 283,
    "kind": "test",
    "name": "it68",
    "testId": 68,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe65",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe65.it68",
    "access": null,
    "description": "should do get call if userToken and bankCardToken is provided",
    "lineNumber": 814,
    "testTargets": [
      "Hyperwallet#getBankCard"
    ]
  },
  {
    "__docId__": 284,
    "kind": "test",
    "name": "describe69",
    "testId": 69,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe69",
    "access": null,
    "description": "updateBankCard()",
    "lineNumber": 824,
    "testTargets": [
      "Hyperwallet#updateBankCard"
    ]
  },
  {
    "__docId__": 285,
    "kind": "test",
    "name": "it70",
    "testId": 70,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe69",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe69.it70",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 840,
    "testTargets": [
      "Hyperwallet#updateBankCard"
    ]
  },
  {
    "__docId__": 286,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe69",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe69.it71",
    "access": null,
    "description": "should throw error if bankCardToken is missing",
    "lineNumber": 846,
    "testTargets": [
      "Hyperwallet#updateBankCard"
    ]
  },
  {
    "__docId__": 287,
    "kind": "test",
    "name": "it72",
    "testId": 72,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe69",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe69.it72",
    "access": null,
    "description": "should do put call to bank cards endpoint",
    "lineNumber": 852,
    "testTargets": [
      "Hyperwallet#updateBankCard"
    ]
  },
  {
    "__docId__": 288,
    "kind": "test",
    "name": "describe73",
    "testId": 73,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe73",
    "access": null,
    "description": "listBankCards()",
    "lineNumber": 866,
    "testTargets": [
      "Hyperwallet#listBankCards"
    ]
  },
  {
    "__docId__": 289,
    "kind": "test",
    "name": "it74",
    "testId": 74,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe73",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe73.it74",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 882,
    "testTargets": [
      "Hyperwallet#listBankCards"
    ]
  },
  {
    "__docId__": 290,
    "kind": "test",
    "name": "it75",
    "testId": 75,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe73",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe73.it75",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 888,
    "testTargets": [
      "Hyperwallet#listBankCards"
    ]
  },
  {
    "__docId__": 291,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe73",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe73.it76",
    "access": null,
    "description": "should throw error for invalid filter",
    "lineNumber": 904,
    "testTargets": [
      "Hyperwallet#listBankCards"
    ]
  },
  {
    "__docId__": 292,
    "kind": "test",
    "name": "it77",
    "testId": 77,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe73",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe73.it77",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 911,
    "testTargets": [
      "Hyperwallet#listBankCards"
    ]
  },
  {
    "__docId__": 293,
    "kind": "test",
    "name": "it78",
    "testId": 78,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe73",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe73.it78",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 920,
    "testTargets": [
      "Hyperwallet#listBankCards"
    ]
  },
  {
    "__docId__": 294,
    "kind": "test",
    "name": "describe79",
    "testId": 79,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe79",
    "access": null,
    "description": "deactivate()",
    "lineNumber": 943,
    "testTargets": [
      "Hyperwallet#deactivateBankCard"
    ]
  },
  {
    "__docId__": 295,
    "kind": "test",
    "name": "it80",
    "testId": 80,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe79",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe79.it80",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 961,
    "testTargets": [
      "Hyperwallet#deactivateBankCard"
    ]
  },
  {
    "__docId__": 296,
    "kind": "test",
    "name": "it81",
    "testId": 81,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe79",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe79.it81",
    "access": null,
    "description": "should throw error if bankCardToken is missing",
    "lineNumber": 969,
    "testTargets": [
      "Hyperwallet#deactivateBankCard"
    ]
  },
  {
    "__docId__": 297,
    "kind": "test",
    "name": "it82",
    "testId": 82,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe79",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe79.it82",
    "access": null,
    "description": "should send transition to 'DE_ACTIVATED'",
    "lineNumber": 977,
    "testTargets": [
      "Hyperwallet#deactivateBankCard"
    ]
  },
  {
    "__docId__": 298,
    "kind": "test",
    "name": "describe83",
    "testId": 83,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe83",
    "access": null,
    "description": "createBankCardStatusTransition()",
    "lineNumber": 989,
    "testTargets": [
      "Hyperwallet#createBankCardStatusTransition"
    ]
  },
  {
    "__docId__": 299,
    "kind": "test",
    "name": "it84",
    "testId": 84,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe83",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe83.it84",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1005,
    "testTargets": [
      "Hyperwallet#createBankCardStatusTransition"
    ]
  },
  {
    "__docId__": 300,
    "kind": "test",
    "name": "it85",
    "testId": 85,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe83",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe83.it85",
    "access": null,
    "description": "should throw error if bankCardToken is missing",
    "lineNumber": 1011,
    "testTargets": [
      "Hyperwallet#createBankCardStatusTransition"
    ]
  },
  {
    "__docId__": 301,
    "kind": "test",
    "name": "it86",
    "testId": 86,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe83",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe83.it86",
    "access": null,
    "description": "should send post call to bank card status transition endpoint",
    "lineNumber": 1017,
    "testTargets": [
      "Hyperwallet#createBankCardStatusTransition"
    ]
  },
  {
    "__docId__": 302,
    "kind": "test",
    "name": "describe87",
    "testId": 87,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe87",
    "access": null,
    "description": "getBankCardStatusTransition()",
    "lineNumber": 1029,
    "testTargets": [
      "Hyperwallet#getBankCardStatusTransition"
    ]
  },
  {
    "__docId__": 303,
    "kind": "test",
    "name": "it88",
    "testId": 88,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe87",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe87.it88",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1045,
    "testTargets": [
      "Hyperwallet#getBankCardStatusTransition"
    ]
  },
  {
    "__docId__": 304,
    "kind": "test",
    "name": "it89",
    "testId": 89,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe87",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe87.it89",
    "access": null,
    "description": "should throw error if bankCardToken is missing",
    "lineNumber": 1051,
    "testTargets": [
      "Hyperwallet#getBankCardStatusTransition"
    ]
  },
  {
    "__docId__": 305,
    "kind": "test",
    "name": "it90",
    "testId": 90,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe87",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe87.it90",
    "access": null,
    "description": "should throw error if statusTransitionToken is missing",
    "lineNumber": 1057,
    "testTargets": [
      "Hyperwallet#getBankCardStatusTransition"
    ]
  },
  {
    "__docId__": 306,
    "kind": "test",
    "name": "it91",
    "testId": 91,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe87",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe87.it91",
    "access": null,
    "description": "should do get call if userToken, bankCardToken and statusTransitionToken is provided",
    "lineNumber": 1063,
    "testTargets": [
      "Hyperwallet#getBankCardStatusTransition"
    ]
  },
  {
    "__docId__": 307,
    "kind": "test",
    "name": "describe92",
    "testId": 92,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe92",
    "access": null,
    "description": "listBankCardStatusTransitions()",
    "lineNumber": 1073,
    "testTargets": [
      "Hyperwallet#listBankCardStatusTransitions"
    ]
  },
  {
    "__docId__": 308,
    "kind": "test",
    "name": "it93",
    "testId": 93,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe92",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe92.it93",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1089,
    "testTargets": [
      "Hyperwallet#listBankCardStatusTransitions"
    ]
  },
  {
    "__docId__": 309,
    "kind": "test",
    "name": "it94",
    "testId": 94,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe92",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe92.it94",
    "access": null,
    "description": "should throw error if bankCardToken is missing",
    "lineNumber": 1095,
    "testTargets": [
      "Hyperwallet#listBankCardStatusTransitions"
    ]
  },
  {
    "__docId__": 310,
    "kind": "test",
    "name": "it95",
    "testId": 95,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe92",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe92.it95",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 1101,
    "testTargets": [
      "Hyperwallet#listBankCardStatusTransitions"
    ]
  },
  {
    "__docId__": 311,
    "kind": "test",
    "name": "it96",
    "testId": 96,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe92",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe92.it96",
    "access": null,
    "description": "should throw error for invalid filter",
    "lineNumber": 1116,
    "testTargets": [
      "Hyperwallet#listBankCardStatusTransitions"
    ]
  },
  {
    "__docId__": 312,
    "kind": "test",
    "name": "it97",
    "testId": 97,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe92",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe92.it97",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 1123,
    "testTargets": [
      "Hyperwallet#listBankCardStatusTransitions"
    ]
  },
  {
    "__docId__": 313,
    "kind": "test",
    "name": "it98",
    "testId": 98,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe92",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe92.it98",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 1132,
    "testTargets": [
      "Hyperwallet#listBankCardStatusTransitions"
    ]
  },
  {
    "__docId__": 314,
    "kind": "test",
    "name": "describe99",
    "testId": 99,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe99",
    "access": null,
    "description": "getAuthenticationToken()",
    "lineNumber": 1159,
    "testTargets": [
      "Hyperwallet#getAuthenticationToken"
    ]
  },
  {
    "__docId__": 315,
    "kind": "test",
    "name": "it100",
    "testId": 100,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe99",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe99.it100",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1175,
    "testTargets": [
      "Hyperwallet#getAuthenticationToken"
    ]
  },
  {
    "__docId__": 316,
    "kind": "test",
    "name": "it101",
    "testId": 101,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe99",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe99.it101",
    "access": null,
    "description": "should do post call to authentication token endpoint",
    "lineNumber": 1181,
    "testTargets": [
      "Hyperwallet#getAuthenticationToken"
    ]
  },
  {
    "__docId__": 317,
    "kind": "test",
    "name": "describe102",
    "testId": 102,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe102",
    "access": null,
    "description": "createPaperCheck()",
    "lineNumber": 1195,
    "testTargets": [
      "Hyperwallet#createPaperCheck"
    ]
  },
  {
    "__docId__": 318,
    "kind": "test",
    "name": "it103",
    "testId": 103,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe102",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe102.it103",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1211,
    "testTargets": [
      "Hyperwallet#createPaperCheck"
    ]
  },
  {
    "__docId__": 319,
    "kind": "test",
    "name": "it104",
    "testId": 104,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe102",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe102.it104",
    "access": null,
    "description": "should do post call to paper checks endpoint",
    "lineNumber": 1217,
    "testTargets": [
      "Hyperwallet#createPaperCheck"
    ]
  },
  {
    "__docId__": 320,
    "kind": "test",
    "name": "describe105",
    "testId": 105,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe105",
    "access": null,
    "description": "getPaperCheck()",
    "lineNumber": 1231,
    "testTargets": [
      "Hyperwallet#getPaperCheck"
    ]
  },
  {
    "__docId__": 321,
    "kind": "test",
    "name": "it106",
    "testId": 106,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe105",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe105.it106",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1247,
    "testTargets": [
      "Hyperwallet#getPaperCheck"
    ]
  },
  {
    "__docId__": 322,
    "kind": "test",
    "name": "it107",
    "testId": 107,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe105",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe105.it107",
    "access": null,
    "description": "should throw error if paperCheckToken is missing",
    "lineNumber": 1253,
    "testTargets": [
      "Hyperwallet#getPaperCheck"
    ]
  },
  {
    "__docId__": 323,
    "kind": "test",
    "name": "it108",
    "testId": 108,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe105",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe105.it108",
    "access": null,
    "description": "should do get call if userToken and paperCheckToken is provided",
    "lineNumber": 1259,
    "testTargets": [
      "Hyperwallet#getPaperCheck"
    ]
  },
  {
    "__docId__": 324,
    "kind": "test",
    "name": "describe109",
    "testId": 109,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe109",
    "access": null,
    "description": "updatePaperCheck()",
    "lineNumber": 1269,
    "testTargets": [
      "Hyperwallet#updatePaperCheck"
    ]
  },
  {
    "__docId__": 325,
    "kind": "test",
    "name": "it110",
    "testId": 110,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe109",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe109.it110",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1285,
    "testTargets": [
      "Hyperwallet#updatePaperCheck"
    ]
  },
  {
    "__docId__": 326,
    "kind": "test",
    "name": "it111",
    "testId": 111,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe109",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe109.it111",
    "access": null,
    "description": "should throw error if paperCheckToken is missing",
    "lineNumber": 1291,
    "testTargets": [
      "Hyperwallet#updatePaperCheck"
    ]
  },
  {
    "__docId__": 327,
    "kind": "test",
    "name": "it112",
    "testId": 112,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe109",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe109.it112",
    "access": null,
    "description": "should do put call to paper checks endpoint",
    "lineNumber": 1297,
    "testTargets": [
      "Hyperwallet#updatePaperCheck"
    ]
  },
  {
    "__docId__": 328,
    "kind": "test",
    "name": "describe113",
    "testId": 113,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe113",
    "access": null,
    "description": "listPaperChecks()",
    "lineNumber": 1311,
    "testTargets": [
      "Hyperwallet#listPaperChecks"
    ]
  },
  {
    "__docId__": 329,
    "kind": "test",
    "name": "it114",
    "testId": 114,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe113",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe113.it114",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1327,
    "testTargets": [
      "Hyperwallet#listPaperChecks"
    ]
  },
  {
    "__docId__": 330,
    "kind": "test",
    "name": "it115",
    "testId": 115,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe113",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe113.it115",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 1333,
    "testTargets": [
      "Hyperwallet#listPaperChecks"
    ]
  },
  {
    "__docId__": 331,
    "kind": "test",
    "name": "it116",
    "testId": 116,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe113",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe113.it116",
    "access": null,
    "description": "should throw error for invalid filter",
    "lineNumber": 1348,
    "testTargets": [
      "Hyperwallet#listPaperChecks"
    ]
  },
  {
    "__docId__": 332,
    "kind": "test",
    "name": "it117",
    "testId": 117,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe113",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe113.it117",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 1355,
    "testTargets": [
      "Hyperwallet#listPaperChecks"
    ]
  },
  {
    "__docId__": 333,
    "kind": "test",
    "name": "it118",
    "testId": 118,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe113",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe113.it118",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 1364,
    "testTargets": [
      "Hyperwallet#listPaperChecks"
    ]
  },
  {
    "__docId__": 334,
    "kind": "test",
    "name": "describe119",
    "testId": 119,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe119",
    "access": null,
    "description": "deactivate()",
    "lineNumber": 1387,
    "testTargets": [
      "Hyperwallet#deactivatePaperCheck"
    ]
  },
  {
    "__docId__": 335,
    "kind": "test",
    "name": "it120",
    "testId": 120,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe119",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe119.it120",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1405,
    "testTargets": [
      "Hyperwallet#deactivatePaperCheck"
    ]
  },
  {
    "__docId__": 336,
    "kind": "test",
    "name": "it121",
    "testId": 121,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe119",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe119.it121",
    "access": null,
    "description": "should throw error if paperCheckToken is missing",
    "lineNumber": 1413,
    "testTargets": [
      "Hyperwallet#deactivatePaperCheck"
    ]
  },
  {
    "__docId__": 337,
    "kind": "test",
    "name": "it122",
    "testId": 122,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe119",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe119.it122",
    "access": null,
    "description": "should send transition to 'DE_ACTIVATED'",
    "lineNumber": 1421,
    "testTargets": [
      "Hyperwallet#deactivatePaperCheck"
    ]
  },
  {
    "__docId__": 338,
    "kind": "test",
    "name": "describe123",
    "testId": 123,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe123",
    "access": null,
    "description": "createPaperCheckStatusTransition()",
    "lineNumber": 1433,
    "testTargets": [
      "Hyperwallet#createPaperCheckStatusTransition"
    ]
  },
  {
    "__docId__": 339,
    "kind": "test",
    "name": "it124",
    "testId": 124,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe123",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe123.it124",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1449,
    "testTargets": [
      "Hyperwallet#createPaperCheckStatusTransition"
    ]
  },
  {
    "__docId__": 340,
    "kind": "test",
    "name": "it125",
    "testId": 125,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe123",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe123.it125",
    "access": null,
    "description": "should throw error if paperCheckToken is missing",
    "lineNumber": 1455,
    "testTargets": [
      "Hyperwallet#createPaperCheckStatusTransition"
    ]
  },
  {
    "__docId__": 341,
    "kind": "test",
    "name": "it126",
    "testId": 126,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe123",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe123.it126",
    "access": null,
    "description": "should send post call to paper check status transition endpoint",
    "lineNumber": 1461,
    "testTargets": [
      "Hyperwallet#createPaperCheckStatusTransition"
    ]
  },
  {
    "__docId__": 342,
    "kind": "test",
    "name": "describe127",
    "testId": 127,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe127",
    "access": null,
    "description": "getPaperCheckStatusTransition()",
    "lineNumber": 1473,
    "testTargets": [
      "Hyperwallet#getPaperCheckStatusTransition"
    ]
  },
  {
    "__docId__": 343,
    "kind": "test",
    "name": "it128",
    "testId": 128,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe127",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe127.it128",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1489,
    "testTargets": [
      "Hyperwallet#getPaperCheckStatusTransition"
    ]
  },
  {
    "__docId__": 344,
    "kind": "test",
    "name": "it129",
    "testId": 129,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe127",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe127.it129",
    "access": null,
    "description": "should throw error if paperCheckToken is missing",
    "lineNumber": 1495,
    "testTargets": [
      "Hyperwallet#getPaperCheckStatusTransition"
    ]
  },
  {
    "__docId__": 345,
    "kind": "test",
    "name": "it130",
    "testId": 130,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe127",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe127.it130",
    "access": null,
    "description": "should throw error if statusTransitionToken is missing",
    "lineNumber": 1501,
    "testTargets": [
      "Hyperwallet#getPaperCheckStatusTransition"
    ]
  },
  {
    "__docId__": 346,
    "kind": "test",
    "name": "it131",
    "testId": 131,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe127",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe127.it131",
    "access": null,
    "description": "should do get call if userToken, paperCheckToken and statusTransitionToken is provided",
    "lineNumber": 1507,
    "testTargets": [
      "Hyperwallet#getPaperCheckStatusTransition"
    ]
  },
  {
    "__docId__": 347,
    "kind": "test",
    "name": "describe132",
    "testId": 132,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe132",
    "access": null,
    "description": "listPaperCheckStatusTransitions()",
    "lineNumber": 1517,
    "testTargets": [
      "Hyperwallet#listPaperCheckStatusTransitions"
    ]
  },
  {
    "__docId__": 348,
    "kind": "test",
    "name": "it133",
    "testId": 133,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe132",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe132.it133",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1533,
    "testTargets": [
      "Hyperwallet#listPaperCheckStatusTransitions"
    ]
  },
  {
    "__docId__": 349,
    "kind": "test",
    "name": "it134",
    "testId": 134,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe132",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe132.it134",
    "access": null,
    "description": "should throw error if paperCheckToken is missing",
    "lineNumber": 1539,
    "testTargets": [
      "Hyperwallet#listPaperCheckStatusTransitions"
    ]
  },
  {
    "__docId__": 350,
    "kind": "test",
    "name": "it135",
    "testId": 135,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe132",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe132.it135",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 1545,
    "testTargets": [
      "Hyperwallet#listPaperCheckStatusTransitions"
    ]
  },
  {
    "__docId__": 351,
    "kind": "test",
    "name": "it136",
    "testId": 136,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe132",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe132.it136",
    "access": null,
    "description": "should throw error for invalid filter",
    "lineNumber": 1560,
    "testTargets": [
      "Hyperwallet#listPaperCheckStatusTransitions"
    ]
  },
  {
    "__docId__": 352,
    "kind": "test",
    "name": "it137",
    "testId": 137,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe132",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe132.it137",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 1567,
    "testTargets": [
      "Hyperwallet#listPaperCheckStatusTransitions"
    ]
  },
  {
    "__docId__": 353,
    "kind": "test",
    "name": "it138",
    "testId": 138,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe132",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe132.it138",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 1576,
    "testTargets": [
      "Hyperwallet#listPaperCheckStatusTransitions"
    ]
  },
  {
    "__docId__": 354,
    "kind": "test",
    "name": "describe139",
    "testId": 139,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe139",
    "access": null,
    "description": "createTransfer()",
    "lineNumber": 1603,
    "testTargets": [
      "Hyperwallet#createTransfer"
    ]
  },
  {
    "__docId__": 355,
    "kind": "test",
    "name": "it140",
    "testId": 140,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe139",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe139.it140",
    "access": null,
    "description": "should throw error if sourceToken is missing",
    "lineNumber": 1619,
    "testTargets": [
      "Hyperwallet#createTransfer"
    ]
  },
  {
    "__docId__": 356,
    "kind": "test",
    "name": "it141",
    "testId": 141,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe139",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe139.it141",
    "access": null,
    "description": "should throw error if destinationToken is missing",
    "lineNumber": 1627,
    "testTargets": [
      "Hyperwallet#createTransfer"
    ]
  },
  {
    "__docId__": 357,
    "kind": "test",
    "name": "it142",
    "testId": 142,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe139",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe139.it142",
    "access": null,
    "description": "should throw error if clientTransferId is missing",
    "lineNumber": 1635,
    "testTargets": [
      "Hyperwallet#createTransfer"
    ]
  },
  {
    "__docId__": 358,
    "kind": "test",
    "name": "it143",
    "testId": 143,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe139",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe139.it143",
    "access": null,
    "description": "should do post call to transfers endpoint",
    "lineNumber": 1644,
    "testTargets": [
      "Hyperwallet#createTransfer"
    ]
  },
  {
    "__docId__": 359,
    "kind": "test",
    "name": "describe144",
    "testId": 144,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe144",
    "access": null,
    "description": "getTransfer()",
    "lineNumber": 1662,
    "testTargets": [
      "Hyperwallet#getTransfer"
    ]
  },
  {
    "__docId__": 360,
    "kind": "test",
    "name": "it145",
    "testId": 145,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe144",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe144.it145",
    "access": null,
    "description": "should throw error if transferToken is missing",
    "lineNumber": 1678,
    "testTargets": [
      "Hyperwallet#getTransfer"
    ]
  },
  {
    "__docId__": 361,
    "kind": "test",
    "name": "it146",
    "testId": 146,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe144",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe144.it146",
    "access": null,
    "description": "should do get call if transferToken is provided",
    "lineNumber": 1684,
    "testTargets": [
      "Hyperwallet#getTransfer"
    ]
  },
  {
    "__docId__": 362,
    "kind": "test",
    "name": "describe147",
    "testId": 147,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe147",
    "access": null,
    "description": "listTransfers()",
    "lineNumber": 1694,
    "testTargets": [
      "Hyperwallet#listTransfers"
    ]
  },
  {
    "__docId__": 363,
    "kind": "test",
    "name": "it148",
    "testId": 148,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe147",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe147.it148",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 1710,
    "testTargets": [
      "Hyperwallet#listTransfers"
    ]
  },
  {
    "__docId__": 364,
    "kind": "test",
    "name": "it149",
    "testId": 149,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe147",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe147.it149",
    "access": null,
    "description": "should throw error for invalid filter",
    "lineNumber": 1726,
    "testTargets": [
      "Hyperwallet#listTransfers"
    ]
  },
  {
    "__docId__": 365,
    "kind": "test",
    "name": "it150",
    "testId": 150,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe147",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe147.it150",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 1733,
    "testTargets": [
      "Hyperwallet#listTransfers"
    ]
  },
  {
    "__docId__": 366,
    "kind": "test",
    "name": "it151",
    "testId": 151,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe147",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe147.it151",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 1742,
    "testTargets": [
      "Hyperwallet#listTransfers"
    ]
  },
  {
    "__docId__": 367,
    "kind": "test",
    "name": "describe152",
    "testId": 152,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe152",
    "access": null,
    "description": "createTransferStatusTransition()",
    "lineNumber": 1765,
    "testTargets": [
      "Hyperwallet#createTransferStatusTransition"
    ]
  },
  {
    "__docId__": 368,
    "kind": "test",
    "name": "it153",
    "testId": 153,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe152",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe152.it153",
    "access": null,
    "description": "should throw error if transferToken is missing",
    "lineNumber": 1781,
    "testTargets": [
      "Hyperwallet#createTransferStatusTransition"
    ]
  },
  {
    "__docId__": 369,
    "kind": "test",
    "name": "it154",
    "testId": 154,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe152",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe152.it154",
    "access": null,
    "description": "should send post call to transfer status transition endpoint",
    "lineNumber": 1787,
    "testTargets": [
      "Hyperwallet#createTransferStatusTransition"
    ]
  },
  {
    "__docId__": 370,
    "kind": "test",
    "name": "describe155",
    "testId": 155,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe155",
    "access": null,
    "description": "createTransferRefund()",
    "lineNumber": 1803,
    "testTargets": [
      "Hyperwallet#createTransferRefund"
    ]
  },
  {
    "__docId__": 371,
    "kind": "test",
    "name": "it156",
    "testId": 156,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe155",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe155.it156",
    "access": null,
    "description": "should throw error if transferToken is missing",
    "lineNumber": 1819,
    "testTargets": [
      "Hyperwallet#createTransferRefund"
    ]
  },
  {
    "__docId__": 372,
    "kind": "test",
    "name": "it157",
    "testId": 157,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe155",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe155.it157",
    "access": null,
    "description": "should throw error if clientRefundId is missing",
    "lineNumber": 1827,
    "testTargets": [
      "Hyperwallet#createTransferRefund"
    ]
  },
  {
    "__docId__": 373,
    "kind": "test",
    "name": "it158",
    "testId": 158,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe155",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe155.it158",
    "access": null,
    "description": "should do post call to transfer refunds endpoint",
    "lineNumber": 1835,
    "testTargets": [
      "Hyperwallet#createTransferRefund"
    ]
  },
  {
    "__docId__": 374,
    "kind": "test",
    "name": "describe159",
    "testId": 159,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe159",
    "access": null,
    "description": "getTransferRefund()",
    "lineNumber": 1849,
    "testTargets": [
      "Hyperwallet#getTransferRefund"
    ]
  },
  {
    "__docId__": 375,
    "kind": "test",
    "name": "it160",
    "testId": 160,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe159",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe159.it160",
    "access": null,
    "description": "should throw error if transferToken is missing",
    "lineNumber": 1865,
    "testTargets": [
      "Hyperwallet#getTransferRefund"
    ]
  },
  {
    "__docId__": 376,
    "kind": "test",
    "name": "it161",
    "testId": 161,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe159",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe159.it161",
    "access": null,
    "description": "should throw error if transferRefundToken is missing",
    "lineNumber": 1872,
    "testTargets": [
      "Hyperwallet#getTransferRefund"
    ]
  },
  {
    "__docId__": 377,
    "kind": "test",
    "name": "it162",
    "testId": 162,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe159",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe159.it162",
    "access": null,
    "description": "should do get call if transferToken is provided",
    "lineNumber": 1879,
    "testTargets": [
      "Hyperwallet#getTransferRefund"
    ]
  },
  {
    "__docId__": 378,
    "kind": "test",
    "name": "describe163",
    "testId": 163,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe163",
    "access": null,
    "description": "listTransferRefunds()",
    "lineNumber": 1889,
    "testTargets": [
      "Hyperwallet#listTransferRefunds"
    ]
  },
  {
    "__docId__": 379,
    "kind": "test",
    "name": "it164",
    "testId": 164,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe163",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe163.it164",
    "access": null,
    "description": "should throw error if transferToken is missing",
    "lineNumber": 1905,
    "testTargets": [
      "Hyperwallet#listTransferRefunds"
    ]
  },
  {
    "__docId__": 380,
    "kind": "test",
    "name": "it165",
    "testId": 165,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe163",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe163.it165",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 1913,
    "testTargets": [
      "Hyperwallet#listTransferRefunds"
    ]
  },
  {
    "__docId__": 381,
    "kind": "test",
    "name": "it166",
    "testId": 166,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe163",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe163.it166",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 1922,
    "testTargets": [
      "Hyperwallet#listTransferRefunds"
    ]
  },
  {
    "__docId__": 382,
    "kind": "test",
    "name": "it167",
    "testId": 167,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe163",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe163.it167",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 1931,
    "testTargets": [
      "Hyperwallet#listTransferRefunds"
    ]
  },
  {
    "__docId__": 383,
    "kind": "test",
    "name": "describe168",
    "testId": 168,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe168",
    "access": null,
    "description": "createPayPalAccount()",
    "lineNumber": 1958,
    "testTargets": [
      "Hyperwallet#createPayPalAccount"
    ]
  },
  {
    "__docId__": 384,
    "kind": "test",
    "name": "it169",
    "testId": 169,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe168",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe168.it169",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 1974,
    "testTargets": [
      "Hyperwallet#createPayPalAccount"
    ]
  },
  {
    "__docId__": 385,
    "kind": "test",
    "name": "it170",
    "testId": 170,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe168",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe168.it170",
    "access": null,
    "description": "should throw error if transferMethodCountry is missing",
    "lineNumber": 1980,
    "testTargets": [
      "Hyperwallet#createPayPalAccount"
    ]
  },
  {
    "__docId__": 386,
    "kind": "test",
    "name": "it171",
    "testId": 171,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe168",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe168.it171",
    "access": null,
    "description": "should throw error if transferMethodCurrency is missing",
    "lineNumber": 1986,
    "testTargets": [
      "Hyperwallet#createPayPalAccount"
    ]
  },
  {
    "__docId__": 387,
    "kind": "test",
    "name": "it172",
    "testId": 172,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe168",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe168.it172",
    "access": null,
    "description": "should throw error if email is missing",
    "lineNumber": 1994,
    "testTargets": [
      "Hyperwallet#createPayPalAccount"
    ]
  },
  {
    "__docId__": 388,
    "kind": "test",
    "name": "it173",
    "testId": 173,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe168",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe168.it173",
    "access": null,
    "description": "should do post call to PayPal account endpoint",
    "lineNumber": 2003,
    "testTargets": [
      "Hyperwallet#createPayPalAccount"
    ]
  },
  {
    "__docId__": 389,
    "kind": "test",
    "name": "describe174",
    "testId": 174,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe174",
    "access": null,
    "description": "getPayPalAccount()",
    "lineNumber": 2021,
    "testTargets": [
      "Hyperwallet#getPayPalAccount"
    ]
  },
  {
    "__docId__": 390,
    "kind": "test",
    "name": "it175",
    "testId": 175,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe174",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe174.it175",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2037,
    "testTargets": [
      "Hyperwallet#getPayPalAccount"
    ]
  },
  {
    "__docId__": 391,
    "kind": "test",
    "name": "it176",
    "testId": 176,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe174",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe174.it176",
    "access": null,
    "description": "should throw error if payPalAccountToken is missing",
    "lineNumber": 2043,
    "testTargets": [
      "Hyperwallet#getPayPalAccount"
    ]
  },
  {
    "__docId__": 392,
    "kind": "test",
    "name": "it177",
    "testId": 177,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe174",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe174.it177",
    "access": null,
    "description": "should do get call if userToken and payPalAccountToken is provided",
    "lineNumber": 2049,
    "testTargets": [
      "Hyperwallet#getPayPalAccount"
    ]
  },
  {
    "__docId__": 393,
    "kind": "test",
    "name": "describe178",
    "testId": 178,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe178",
    "access": null,
    "description": "listPayPalAccounts()",
    "lineNumber": 2059,
    "testTargets": [
      "Hyperwallet#listPayPalAccounts"
    ]
  },
  {
    "__docId__": 394,
    "kind": "test",
    "name": "it179",
    "testId": 179,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe178",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe178.it179",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2075,
    "testTargets": [
      "Hyperwallet#listPayPalAccounts"
    ]
  },
  {
    "__docId__": 395,
    "kind": "test",
    "name": "it180",
    "testId": 180,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe178",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe178.it180",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 2081,
    "testTargets": [
      "Hyperwallet#listPayPalAccounts"
    ]
  },
  {
    "__docId__": 396,
    "kind": "test",
    "name": "it181",
    "testId": 181,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe178",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe178.it181",
    "access": null,
    "description": "should throw error for invalid filter",
    "lineNumber": 2096,
    "testTargets": [
      "Hyperwallet#listPayPalAccounts"
    ]
  },
  {
    "__docId__": 397,
    "kind": "test",
    "name": "it182",
    "testId": 182,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe178",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe178.it182",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 2103,
    "testTargets": [
      "Hyperwallet#listPayPalAccounts"
    ]
  },
  {
    "__docId__": 398,
    "kind": "test",
    "name": "it183",
    "testId": 183,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe178",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe178.it183",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 2111,
    "testTargets": [
      "Hyperwallet#listPayPalAccounts"
    ]
  },
  {
    "__docId__": 399,
    "kind": "test",
    "name": "describe184",
    "testId": 184,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe184",
    "access": null,
    "description": "updatePayPalAccount()",
    "lineNumber": 2134,
    "testTargets": [
      "Hyperwallet#updatePayPalAccount"
    ]
  },
  {
    "__docId__": 400,
    "kind": "test",
    "name": "it185",
    "testId": 185,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe184",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe184.it185",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2150,
    "testTargets": [
      "Hyperwallet#updatePayPalAccount"
    ]
  },
  {
    "__docId__": 401,
    "kind": "test",
    "name": "it186",
    "testId": 186,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe184",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe184.it186",
    "access": null,
    "description": "should throw error if payPalAccountToken is missing",
    "lineNumber": 2156,
    "testTargets": [
      "Hyperwallet#updatePayPalAccount"
    ]
  },
  {
    "__docId__": 402,
    "kind": "test",
    "name": "it187",
    "testId": 187,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe184",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe184.it187",
    "access": null,
    "description": "should do put call to paypal account endpoint",
    "lineNumber": 2162,
    "testTargets": [
      "Hyperwallet#updatePayPalAccount"
    ]
  },
  {
    "__docId__": 403,
    "kind": "test",
    "name": "describe188",
    "testId": 188,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe188",
    "access": null,
    "description": "activatePayPalAccount()",
    "lineNumber": 2176,
    "testTargets": [
      "Hyperwallet#activatePayPalAccount"
    ]
  },
  {
    "__docId__": 404,
    "kind": "test",
    "name": "it189",
    "testId": 189,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe188",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe188.it189",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2192,
    "testTargets": [
      "Hyperwallet#activatePayPalAccount"
    ]
  },
  {
    "__docId__": 405,
    "kind": "test",
    "name": "it190",
    "testId": 190,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe188",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe188.it190",
    "access": null,
    "description": "should throw error if payPalAccountToken is missing",
    "lineNumber": 2198,
    "testTargets": [
      "Hyperwallet#activatePayPalAccount"
    ]
  },
  {
    "__docId__": 406,
    "kind": "test",
    "name": "it191",
    "testId": 191,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe188",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe188.it191",
    "access": null,
    "description": "should send transition to 'ACTIVATED'",
    "lineNumber": 2204,
    "testTargets": [
      "Hyperwallet#activatePayPalAccount"
    ]
  },
  {
    "__docId__": 407,
    "kind": "test",
    "name": "describe192",
    "testId": 192,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe192",
    "access": null,
    "description": "deactivatePayPalAccount()",
    "lineNumber": 2216,
    "testTargets": [
      "Hyperwallet#deactivatePayPalAccount"
    ]
  },
  {
    "__docId__": 408,
    "kind": "test",
    "name": "it193",
    "testId": 193,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe192",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe192.it193",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2232,
    "testTargets": [
      "Hyperwallet#deactivatePayPalAccount"
    ]
  },
  {
    "__docId__": 409,
    "kind": "test",
    "name": "it194",
    "testId": 194,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe192",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe192.it194",
    "access": null,
    "description": "should throw error if payPalAccountToken is missing",
    "lineNumber": 2238,
    "testTargets": [
      "Hyperwallet#deactivatePayPalAccount"
    ]
  },
  {
    "__docId__": 410,
    "kind": "test",
    "name": "it195",
    "testId": 195,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe192",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe192.it195",
    "access": null,
    "description": "should send transition to 'DE_ACTIVATED'",
    "lineNumber": 2244,
    "testTargets": [
      "Hyperwallet#deactivatePayPalAccount"
    ]
  },
  {
    "__docId__": 411,
    "kind": "test",
    "name": "describe196",
    "testId": 196,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe196",
    "access": null,
    "description": "createPayPalAccountStatusTransition()",
    "lineNumber": 2256,
    "testTargets": [
      "Hyperwallet#createPayPalAccountStatusTransition"
    ]
  },
  {
    "__docId__": 412,
    "kind": "test",
    "name": "it197",
    "testId": 197,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe196",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe196.it197",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2272,
    "testTargets": [
      "Hyperwallet#createPayPalAccountStatusTransition"
    ]
  },
  {
    "__docId__": 413,
    "kind": "test",
    "name": "it198",
    "testId": 198,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe196",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe196.it198",
    "access": null,
    "description": "should throw error if payPalAccountToken is missing",
    "lineNumber": 2278,
    "testTargets": [
      "Hyperwallet#createPayPalAccountStatusTransition"
    ]
  },
  {
    "__docId__": 414,
    "kind": "test",
    "name": "it199",
    "testId": 199,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe196",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe196.it199",
    "access": null,
    "description": "should send post call to paypal account status transition endpoint",
    "lineNumber": 2284,
    "testTargets": [
      "Hyperwallet#createPayPalAccountStatusTransition"
    ]
  },
  {
    "__docId__": 415,
    "kind": "test",
    "name": "describe200",
    "testId": 200,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe200",
    "access": null,
    "description": "getPayPalAccountStatusTransition()",
    "lineNumber": 2296,
    "testTargets": [
      "Hyperwallet#getPayPalAccountStatusTransition"
    ]
  },
  {
    "__docId__": 416,
    "kind": "test",
    "name": "it201",
    "testId": 201,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe200",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe200.it201",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2312,
    "testTargets": [
      "Hyperwallet#getPayPalAccountStatusTransition"
    ]
  },
  {
    "__docId__": 417,
    "kind": "test",
    "name": "it202",
    "testId": 202,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe200",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe200.it202",
    "access": null,
    "description": "should throw error if payPalAccountToken is missing",
    "lineNumber": 2318,
    "testTargets": [
      "Hyperwallet#getPayPalAccountStatusTransition"
    ]
  },
  {
    "__docId__": 418,
    "kind": "test",
    "name": "it203",
    "testId": 203,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe200",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe200.it203",
    "access": null,
    "description": "should throw error if statusTransitionToken is missing",
    "lineNumber": 2324,
    "testTargets": [
      "Hyperwallet#getPayPalAccountStatusTransition"
    ]
  },
  {
    "__docId__": 419,
    "kind": "test",
    "name": "it204",
    "testId": 204,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe200",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe200.it204",
    "access": null,
    "description": "should do get call if userToken, payPalAccountToken and statusTransitionToken is provided",
    "lineNumber": 2330,
    "testTargets": [
      "Hyperwallet#getPayPalAccountStatusTransition"
    ]
  },
  {
    "__docId__": 420,
    "kind": "test",
    "name": "describe205",
    "testId": 205,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe205",
    "access": null,
    "description": "listPayPalAccountStatusTransitions()",
    "lineNumber": 2340,
    "testTargets": [
      "Hyperwallet#listPayPalAccountStatusTransitions"
    ]
  },
  {
    "__docId__": 421,
    "kind": "test",
    "name": "it206",
    "testId": 206,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe205",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe205.it206",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2356,
    "testTargets": [
      "Hyperwallet#listPayPalAccountStatusTransitions"
    ]
  },
  {
    "__docId__": 422,
    "kind": "test",
    "name": "it207",
    "testId": 207,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe205",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe205.it207",
    "access": null,
    "description": "should throw error if payPalAccountToken is missing",
    "lineNumber": 2362,
    "testTargets": [
      "Hyperwallet#listPayPalAccountStatusTransitions"
    ]
  },
  {
    "__docId__": 423,
    "kind": "test",
    "name": "it208",
    "testId": 208,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe205",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe205.it208",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 2368,
    "testTargets": [
      "Hyperwallet#listPayPalAccountStatusTransitions"
    ]
  },
  {
    "__docId__": 424,
    "kind": "test",
    "name": "it209",
    "testId": 209,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe205",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe205.it209",
    "access": null,
    "description": "should throw error for invalid filter",
    "lineNumber": 2377,
    "testTargets": [
      "Hyperwallet#listPayPalAccountStatusTransitions"
    ]
  },
  {
    "__docId__": 425,
    "kind": "test",
    "name": "it210",
    "testId": 210,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe205",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe205.it210",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 2384,
    "testTargets": [
      "Hyperwallet#listPayPalAccountStatusTransitions"
    ]
  },
  {
    "__docId__": 426,
    "kind": "test",
    "name": "it211",
    "testId": 211,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe205",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe205.it211",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 2393,
    "testTargets": [
      "Hyperwallet#listPayPalAccountStatusTransitions"
    ]
  },
  {
    "__docId__": 427,
    "kind": "test",
    "name": "describe212",
    "testId": 212,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe212",
    "access": null,
    "description": "createPrepaidCard()",
    "lineNumber": 2419,
    "testTargets": [
      "Hyperwallet#createPrepaidCard"
    ]
  },
  {
    "__docId__": 428,
    "kind": "test",
    "name": "it213",
    "testId": 213,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe212",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe212.it213",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2435,
    "testTargets": [
      "Hyperwallet#createPrepaidCard"
    ]
  },
  {
    "__docId__": 429,
    "kind": "test",
    "name": "it214",
    "testId": 214,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe212",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe212.it214",
    "access": null,
    "description": "should do post call to prepaid cards endpoint",
    "lineNumber": 2441,
    "testTargets": [
      "Hyperwallet#createPrepaidCard"
    ]
  },
  {
    "__docId__": 430,
    "kind": "test",
    "name": "describe215",
    "testId": 215,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe215",
    "access": null,
    "description": "getPrepaidCard()",
    "lineNumber": 2455,
    "testTargets": [
      "Hyperwallet#getPrepaidCard"
    ]
  },
  {
    "__docId__": 431,
    "kind": "test",
    "name": "it216",
    "testId": 216,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe215",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe215.it216",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2471,
    "testTargets": [
      "Hyperwallet#getPrepaidCard"
    ]
  },
  {
    "__docId__": 432,
    "kind": "test",
    "name": "it217",
    "testId": 217,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe215",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe215.it217",
    "access": null,
    "description": "should throw error if prepaidCardToken is missing",
    "lineNumber": 2477,
    "testTargets": [
      "Hyperwallet#getPrepaidCard"
    ]
  },
  {
    "__docId__": 433,
    "kind": "test",
    "name": "it218",
    "testId": 218,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe215",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe215.it218",
    "access": null,
    "description": "should do get call if userToken and prepaidCardToken is provided",
    "lineNumber": 2483,
    "testTargets": [
      "Hyperwallet#getPrepaidCard"
    ]
  },
  {
    "__docId__": 434,
    "kind": "test",
    "name": "describe219",
    "testId": 219,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe219",
    "access": null,
    "description": "updatePrepaidCard()",
    "lineNumber": 2493,
    "testTargets": [
      "Hyperwallet#updatePrepaidCard"
    ]
  },
  {
    "__docId__": 435,
    "kind": "test",
    "name": "it220",
    "testId": 220,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe219",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe219.it220",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2509,
    "testTargets": [
      "Hyperwallet#updatePrepaidCard"
    ]
  },
  {
    "__docId__": 436,
    "kind": "test",
    "name": "it221",
    "testId": 221,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe219",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe219.it221",
    "access": null,
    "description": "should throw error if prepaidCardToken is missing",
    "lineNumber": 2515,
    "testTargets": [
      "Hyperwallet#updatePrepaidCard"
    ]
  },
  {
    "__docId__": 437,
    "kind": "test",
    "name": "it222",
    "testId": 222,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe219",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe219.it222",
    "access": null,
    "description": "should do put call to prepaid cards endpoint",
    "lineNumber": 2521,
    "testTargets": [
      "Hyperwallet#updatePrepaidCard"
    ]
  },
  {
    "__docId__": 438,
    "kind": "test",
    "name": "describe223",
    "testId": 223,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe223",
    "access": null,
    "description": "listPrepaidCards()",
    "lineNumber": 2535,
    "testTargets": [
      "Hyperwallet#listPrepaidCards"
    ]
  },
  {
    "__docId__": 439,
    "kind": "test",
    "name": "it224",
    "testId": 224,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe223",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe223.it224",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2551,
    "testTargets": [
      "Hyperwallet#listPrepaidCards"
    ]
  },
  {
    "__docId__": 440,
    "kind": "test",
    "name": "it225",
    "testId": 225,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe223",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe223.it225",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 2557,
    "testTargets": [
      "Hyperwallet#listPrepaidCards"
    ]
  },
  {
    "__docId__": 441,
    "kind": "test",
    "name": "it226",
    "testId": 226,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe223",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe223.it226",
    "access": null,
    "description": "should throw error for invalid filter",
    "lineNumber": 2568,
    "testTargets": [
      "Hyperwallet#listPrepaidCards"
    ]
  },
  {
    "__docId__": 442,
    "kind": "test",
    "name": "it227",
    "testId": 227,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe223",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe223.it227",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 2575,
    "testTargets": [
      "Hyperwallet#listPrepaidCards"
    ]
  },
  {
    "__docId__": 443,
    "kind": "test",
    "name": "it228",
    "testId": 228,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe223",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe223.it228",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 2584,
    "testTargets": [
      "Hyperwallet#listPrepaidCards"
    ]
  },
  {
    "__docId__": 444,
    "kind": "test",
    "name": "describe229",
    "testId": 229,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe229",
    "access": null,
    "lineNumber": 2617
  },
  {
    "__docId__": 445,
    "kind": "test",
    "name": "it230",
    "testId": 230,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe229",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe229.it230",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2640,
    "testTargets": [
      "Hyperwallet#suspendPrepaidCard",
      "Hyperwallet#unsuspendPrepaidCard",
      "Hyperwallet#lostOrStolenPrepaidCard",
      "Hyperwallet#deactivatePrepaidCard",
      "Hyperwallet#lockPrepaidCard",
      "Hyperwallet#unlockPrepaidCard"
    ]
  },
  {
    "__docId__": 446,
    "kind": "test",
    "name": "it231",
    "testId": 231,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe229",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe229.it231",
    "access": null,
    "description": "should throw error if prepaidCardToken is missing",
    "lineNumber": 2653,
    "testTargets": [
      "Hyperwallet#suspendPrepaidCard",
      "Hyperwallet#unsuspendPrepaidCard",
      "Hyperwallet#lostOrStolenPrepaidCard",
      "Hyperwallet#deactivatePrepaidCard",
      "Hyperwallet#lockPrepaidCard",
      "Hyperwallet#unlockPrepaidCard"
    ]
  },
  {
    "__docId__": 447,
    "kind": "test",
    "name": "it232",
    "testId": 232,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe229",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe229.it232",
    "access": null,
    "lineNumber": 2666,
    "testTargets": [
      "Hyperwallet#suspendPrepaidCard",
      "Hyperwallet#unsuspendPrepaidCard",
      "Hyperwallet#lostOrStolenPrepaidCard",
      "Hyperwallet#deactivatePrepaidCard",
      "Hyperwallet#lockPrepaidCard",
      "Hyperwallet#unlockPrepaidCard"
    ]
  },
  {
    "__docId__": 448,
    "kind": "test",
    "name": "describe233",
    "testId": 233,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe233",
    "access": null,
    "description": "createPrepaidCardStatusTransition()",
    "lineNumber": 2679,
    "testTargets": [
      "Hyperwallet#createPrepaidCardStatusTransition"
    ]
  },
  {
    "__docId__": 449,
    "kind": "test",
    "name": "it234",
    "testId": 234,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe233",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe233.it234",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2695,
    "testTargets": [
      "Hyperwallet#createPrepaidCardStatusTransition"
    ]
  },
  {
    "__docId__": 450,
    "kind": "test",
    "name": "it235",
    "testId": 235,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe233",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe233.it235",
    "access": null,
    "description": "should throw error if prepaidCardToken is missing",
    "lineNumber": 2701,
    "testTargets": [
      "Hyperwallet#createPrepaidCardStatusTransition"
    ]
  },
  {
    "__docId__": 451,
    "kind": "test",
    "name": "it236",
    "testId": 236,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe233",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe233.it236",
    "access": null,
    "description": "should send post call to prepaid card status transition endpoint",
    "lineNumber": 2707,
    "testTargets": [
      "Hyperwallet#createPrepaidCardStatusTransition"
    ]
  },
  {
    "__docId__": 452,
    "kind": "test",
    "name": "describe237",
    "testId": 237,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe237",
    "access": null,
    "description": "getPrepaidCardStatusTransition()",
    "lineNumber": 2719,
    "testTargets": [
      "Hyperwallet#getPrepaidCardStatusTransition"
    ]
  },
  {
    "__docId__": 453,
    "kind": "test",
    "name": "it238",
    "testId": 238,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe237",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe237.it238",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2735,
    "testTargets": [
      "Hyperwallet#getPrepaidCardStatusTransition"
    ]
  },
  {
    "__docId__": 454,
    "kind": "test",
    "name": "it239",
    "testId": 239,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe237",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe237.it239",
    "access": null,
    "description": "should throw error if prepaidCardToken is missing",
    "lineNumber": 2741,
    "testTargets": [
      "Hyperwallet#getPrepaidCardStatusTransition"
    ]
  },
  {
    "__docId__": 455,
    "kind": "test",
    "name": "it240",
    "testId": 240,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe237",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe237.it240",
    "access": null,
    "description": "should throw error if statusTransitionToken is missing",
    "lineNumber": 2747,
    "testTargets": [
      "Hyperwallet#getPrepaidCardStatusTransition"
    ]
  },
  {
    "__docId__": 456,
    "kind": "test",
    "name": "it241",
    "testId": 241,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe237",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe237.it241",
    "access": null,
    "description": "should do get call if userToken, prepaidCardToken and statusTransitionToken is provided",
    "lineNumber": 2753,
    "testTargets": [
      "Hyperwallet#getPrepaidCardStatusTransition"
    ]
  },
  {
    "__docId__": 457,
    "kind": "test",
    "name": "describe242",
    "testId": 242,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe242",
    "access": null,
    "description": "listPrepaidCardStatusTransitions()",
    "lineNumber": 2763,
    "testTargets": [
      "Hyperwallet#listPrepaidCardStatusTransitions"
    ]
  },
  {
    "__docId__": 458,
    "kind": "test",
    "name": "it243",
    "testId": 243,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe242",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe242.it243",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2779,
    "testTargets": [
      "Hyperwallet#listPrepaidCardStatusTransitions"
    ]
  },
  {
    "__docId__": 459,
    "kind": "test",
    "name": "it244",
    "testId": 244,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe242",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe242.it244",
    "access": null,
    "description": "should throw error if prepaidCardToken is missing",
    "lineNumber": 2785,
    "testTargets": [
      "Hyperwallet#listPrepaidCardStatusTransitions"
    ]
  },
  {
    "__docId__": 460,
    "kind": "test",
    "name": "it245",
    "testId": 245,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe242",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe242.it245",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 2791,
    "testTargets": [
      "Hyperwallet#listPrepaidCardStatusTransitions"
    ]
  },
  {
    "__docId__": 461,
    "kind": "test",
    "name": "it246",
    "testId": 246,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe242",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe242.it246",
    "access": null,
    "description": "should throw error for invalid filter",
    "lineNumber": 2806,
    "testTargets": [
      "Hyperwallet#listPrepaidCardStatusTransitions"
    ]
  },
  {
    "__docId__": 462,
    "kind": "test",
    "name": "it247",
    "testId": 247,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe242",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe242.it247",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 2813,
    "testTargets": [
      "Hyperwallet#listPrepaidCardStatusTransitions"
    ]
  },
  {
    "__docId__": 463,
    "kind": "test",
    "name": "it248",
    "testId": 248,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe242",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe242.it248",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 2822,
    "testTargets": [
      "Hyperwallet#listPrepaidCardStatusTransitions"
    ]
  },
  {
    "__docId__": 464,
    "kind": "test",
    "name": "describe249",
    "testId": 249,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe249",
    "access": null,
    "description": "createBankAccount()",
    "lineNumber": 2849,
    "testTargets": [
      "Hyperwallet#createBankAccount"
    ]
  },
  {
    "__docId__": 465,
    "kind": "test",
    "name": "it250",
    "testId": 250,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe249",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe249.it250",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2865,
    "testTargets": [
      "Hyperwallet#createBankAccount"
    ]
  },
  {
    "__docId__": 466,
    "kind": "test",
    "name": "it251",
    "testId": 251,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe249",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe249.it251",
    "access": null,
    "description": "should do post call to bank accounts endpoint",
    "lineNumber": 2871,
    "testTargets": [
      "Hyperwallet#createBankAccount"
    ]
  },
  {
    "__docId__": 467,
    "kind": "test",
    "name": "describe252",
    "testId": 252,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe252",
    "access": null,
    "description": "getBankAccount()",
    "lineNumber": 2885,
    "testTargets": [
      "Hyperwallet#getBankAccount"
    ]
  },
  {
    "__docId__": 468,
    "kind": "test",
    "name": "it253",
    "testId": 253,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe252",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe252.it253",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2901,
    "testTargets": [
      "Hyperwallet#getBankAccount"
    ]
  },
  {
    "__docId__": 469,
    "kind": "test",
    "name": "it254",
    "testId": 254,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe252",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe252.it254",
    "access": null,
    "description": "should throw error if bankAccountToken is missing",
    "lineNumber": 2907,
    "testTargets": [
      "Hyperwallet#getBankAccount"
    ]
  },
  {
    "__docId__": 470,
    "kind": "test",
    "name": "it255",
    "testId": 255,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe252",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe252.it255",
    "access": null,
    "description": "should do get call if userToken and bankAccountToken is provided",
    "lineNumber": 2913,
    "testTargets": [
      "Hyperwallet#getBankAccount"
    ]
  },
  {
    "__docId__": 471,
    "kind": "test",
    "name": "describe256",
    "testId": 256,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe256",
    "access": null,
    "description": "updateBankAccount()",
    "lineNumber": 2923,
    "testTargets": [
      "Hyperwallet#updateBankAccount"
    ]
  },
  {
    "__docId__": 472,
    "kind": "test",
    "name": "it257",
    "testId": 257,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe256",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe256.it257",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2939,
    "testTargets": [
      "Hyperwallet#updateBankAccount"
    ]
  },
  {
    "__docId__": 473,
    "kind": "test",
    "name": "it258",
    "testId": 258,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe256",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe256.it258",
    "access": null,
    "description": "should throw error if bankAccountToken is missing",
    "lineNumber": 2945,
    "testTargets": [
      "Hyperwallet#updateBankAccount"
    ]
  },
  {
    "__docId__": 474,
    "kind": "test",
    "name": "it259",
    "testId": 259,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe256",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe256.it259",
    "access": null,
    "description": "should do put call to bank accounts endpoint",
    "lineNumber": 2951,
    "testTargets": [
      "Hyperwallet#updateBankAccount"
    ]
  },
  {
    "__docId__": 475,
    "kind": "test",
    "name": "describe260",
    "testId": 260,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe260",
    "access": null,
    "description": "listBankAccounts()",
    "lineNumber": 2965,
    "testTargets": [
      "Hyperwallet#listBankAccounts"
    ]
  },
  {
    "__docId__": 476,
    "kind": "test",
    "name": "it261",
    "testId": 261,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe260",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe260.it261",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 2981,
    "testTargets": [
      "Hyperwallet#listBankAccounts"
    ]
  },
  {
    "__docId__": 477,
    "kind": "test",
    "name": "it262",
    "testId": 262,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe260",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe260.it262",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 2986,
    "testTargets": [
      "Hyperwallet#listBankAccounts"
    ]
  },
  {
    "__docId__": 478,
    "kind": "test",
    "name": "it263",
    "testId": 263,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe260",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe260.it263",
    "access": null,
    "description": "should throw error for invalid filter",
    "lineNumber": 3002,
    "testTargets": [
      "Hyperwallet#listBankAccounts"
    ]
  },
  {
    "__docId__": 479,
    "kind": "test",
    "name": "it264",
    "testId": 264,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe260",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe260.it264",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 3009,
    "testTargets": [
      "Hyperwallet#listBankAccounts"
    ]
  },
  {
    "__docId__": 480,
    "kind": "test",
    "name": "it265",
    "testId": 265,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe260",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe260.it265",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 3016,
    "testTargets": [
      "Hyperwallet#listBankAccounts"
    ]
  },
  {
    "__docId__": 481,
    "kind": "test",
    "name": "describe266",
    "testId": 266,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe266",
    "access": null,
    "description": "deactivateBankAccount()",
    "lineNumber": 3039,
    "testTargets": [
      "Hyperwallet#deactivateBankAccount"
    ]
  },
  {
    "__docId__": 482,
    "kind": "test",
    "name": "it267",
    "testId": 267,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe266",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe266.it267",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 3055,
    "testTargets": [
      "Hyperwallet#deactivateBankAccount"
    ]
  },
  {
    "__docId__": 483,
    "kind": "test",
    "name": "it268",
    "testId": 268,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe266",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe266.it268",
    "access": null,
    "description": "should throw error if bankAccountToken is missing",
    "lineNumber": 3061,
    "testTargets": [
      "Hyperwallet#deactivateBankAccount"
    ]
  },
  {
    "__docId__": 484,
    "kind": "test",
    "name": "it269",
    "testId": 269,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe266",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe266.it269",
    "access": null,
    "description": "should send transition to 'DE_ACTIVATED'",
    "lineNumber": 3067,
    "testTargets": [
      "Hyperwallet#deactivateBankAccount"
    ]
  },
  {
    "__docId__": 485,
    "kind": "test",
    "name": "describe270",
    "testId": 270,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe270",
    "access": null,
    "description": "createBankAccountStatusTransition()",
    "lineNumber": 3079,
    "testTargets": [
      "Hyperwallet#createBankAccountStatusTransition"
    ]
  },
  {
    "__docId__": 486,
    "kind": "test",
    "name": "it271",
    "testId": 271,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe270",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe270.it271",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 3095,
    "testTargets": [
      "Hyperwallet#createBankAccountStatusTransition"
    ]
  },
  {
    "__docId__": 487,
    "kind": "test",
    "name": "it272",
    "testId": 272,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe270",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe270.it272",
    "access": null,
    "description": "should throw error if bankAccountToken is missing",
    "lineNumber": 3101,
    "testTargets": [
      "Hyperwallet#createBankAccountStatusTransition"
    ]
  },
  {
    "__docId__": 488,
    "kind": "test",
    "name": "it273",
    "testId": 273,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe270",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe270.it273",
    "access": null,
    "description": "should send post call to prepaid card status transition endpoint",
    "lineNumber": 3107,
    "testTargets": [
      "Hyperwallet#createBankAccountStatusTransition"
    ]
  },
  {
    "__docId__": 489,
    "kind": "test",
    "name": "describe274",
    "testId": 274,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe274",
    "access": null,
    "description": "getBankAccountStatusTransition()",
    "lineNumber": 3119,
    "testTargets": [
      "Hyperwallet#getBankAccountStatusTransition"
    ]
  },
  {
    "__docId__": 490,
    "kind": "test",
    "name": "it275",
    "testId": 275,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe274",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe274.it275",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 3135,
    "testTargets": [
      "Hyperwallet#getBankAccountStatusTransition"
    ]
  },
  {
    "__docId__": 491,
    "kind": "test",
    "name": "it276",
    "testId": 276,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe274",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe274.it276",
    "access": null,
    "description": "should throw error if bankAccountToken is missing",
    "lineNumber": 3141,
    "testTargets": [
      "Hyperwallet#getBankAccountStatusTransition"
    ]
  },
  {
    "__docId__": 492,
    "kind": "test",
    "name": "it277",
    "testId": 277,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe274",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe274.it277",
    "access": null,
    "description": "should throw error if statusTransitionToken is missing",
    "lineNumber": 3147,
    "testTargets": [
      "Hyperwallet#getBankAccountStatusTransition"
    ]
  },
  {
    "__docId__": 493,
    "kind": "test",
    "name": "it278",
    "testId": 278,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe274",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe274.it278",
    "access": null,
    "description": "should do get call if userToken, bankAccountToken and statusTransitionToken is provided",
    "lineNumber": 3153,
    "testTargets": [
      "Hyperwallet#getBankAccountStatusTransition"
    ]
  },
  {
    "__docId__": 494,
    "kind": "test",
    "name": "describe279",
    "testId": 279,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe279",
    "access": null,
    "description": "listBankAccountStatusTransitions()",
    "lineNumber": 3163,
    "testTargets": [
      "Hyperwallet#listBankAccountStatusTransitions"
    ]
  },
  {
    "__docId__": 495,
    "kind": "test",
    "name": "it280",
    "testId": 280,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe279",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe279.it280",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 3179,
    "testTargets": [
      "Hyperwallet#listBankAccountStatusTransitions"
    ]
  },
  {
    "__docId__": 496,
    "kind": "test",
    "name": "it281",
    "testId": 281,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe279",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe279.it281",
    "access": null,
    "description": "should throw error if bankAccountToken is missing",
    "lineNumber": 3184,
    "testTargets": [
      "Hyperwallet#listBankAccountStatusTransitions"
    ]
  },
  {
    "__docId__": 497,
    "kind": "test",
    "name": "it282",
    "testId": 282,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe279",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe279.it282",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 3190,
    "testTargets": [
      "Hyperwallet#listBankAccountStatusTransitions"
    ]
  },
  {
    "__docId__": 498,
    "kind": "test",
    "name": "it283",
    "testId": 283,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe279",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe279.it283",
    "access": null,
    "description": "should throw error for invalid filter",
    "lineNumber": 3205,
    "testTargets": [
      "Hyperwallet#listBankAccountStatusTransitions"
    ]
  },
  {
    "__docId__": 499,
    "kind": "test",
    "name": "it284",
    "testId": 284,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe279",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe279.it284",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 3212,
    "testTargets": [
      "Hyperwallet#listBankAccountStatusTransitions"
    ]
  },
  {
    "__docId__": 500,
    "kind": "test",
    "name": "it285",
    "testId": 285,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe279",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe279.it285",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 3221,
    "testTargets": [
      "Hyperwallet#listBankAccountStatusTransitions"
    ]
  },
  {
    "__docId__": 501,
    "kind": "test",
    "name": "describe286",
    "testId": 286,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe286",
    "access": null,
    "description": "listBalancesForUser()",
    "lineNumber": 3248,
    "testTargets": [
      "Hyperwallet#listBalancesForUser"
    ]
  },
  {
    "__docId__": 502,
    "kind": "test",
    "name": "it287",
    "testId": 287,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe286",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe286.it287",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 3264,
    "testTargets": [
      "Hyperwallet#listBalancesForUser"
    ]
  },
  {
    "__docId__": 503,
    "kind": "test",
    "name": "it288",
    "testId": 288,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe286",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe286.it288",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 3270,
    "testTargets": [
      "Hyperwallet#listBalancesForUser"
    ]
  },
  {
    "__docId__": 504,
    "kind": "test",
    "name": "it289",
    "testId": 289,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe286",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe286.it289",
    "access": null,
    "description": "should throw error for invalid filter",
    "lineNumber": 3279,
    "testTargets": [
      "Hyperwallet#listBalancesForUser"
    ]
  },
  {
    "__docId__": 505,
    "kind": "test",
    "name": "it290",
    "testId": 290,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe286",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe286.it290",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 3286,
    "testTargets": [
      "Hyperwallet#listBalancesForUser"
    ]
  },
  {
    "__docId__": 506,
    "kind": "test",
    "name": "it291",
    "testId": 291,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe286",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe286.it291",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 3295,
    "testTargets": [
      "Hyperwallet#listBalancesForUser"
    ]
  },
  {
    "__docId__": 507,
    "kind": "test",
    "name": "describe292",
    "testId": 292,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe292",
    "access": null,
    "description": "listBalancesForPrepaidCard()",
    "lineNumber": 3318,
    "testTargets": [
      "Hyperwallet#listBalancesForPrepaidCard"
    ]
  },
  {
    "__docId__": 508,
    "kind": "test",
    "name": "it293",
    "testId": 293,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe292",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe292.it293",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 3334,
    "testTargets": [
      "Hyperwallet#listBalancesForPrepaidCard"
    ]
  },
  {
    "__docId__": 509,
    "kind": "test",
    "name": "it294",
    "testId": 294,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe292",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe292.it294",
    "access": null,
    "description": "should throw error if prepaidCardToken is missing",
    "lineNumber": 3340,
    "testTargets": [
      "Hyperwallet#listBalancesForPrepaidCard"
    ]
  },
  {
    "__docId__": 510,
    "kind": "test",
    "name": "it295",
    "testId": 295,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe292",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe292.it295",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 3346,
    "testTargets": [
      "Hyperwallet#listBalancesForPrepaidCard"
    ]
  },
  {
    "__docId__": 511,
    "kind": "test",
    "name": "it296",
    "testId": 296,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe292",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe292.it296",
    "access": null,
    "description": "should throw error for invalid filter",
    "lineNumber": 3355,
    "testTargets": [
      "Hyperwallet#listBalancesForPrepaidCard"
    ]
  },
  {
    "__docId__": 512,
    "kind": "test",
    "name": "it297",
    "testId": 297,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe292",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe292.it297",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 3362,
    "testTargets": [
      "Hyperwallet#listBalancesForPrepaidCard"
    ]
  },
  {
    "__docId__": 513,
    "kind": "test",
    "name": "it298",
    "testId": 298,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe292",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe292.it298",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 3371,
    "testTargets": [
      "Hyperwallet#listBalancesForPrepaidCard"
    ]
  },
  {
    "__docId__": 514,
    "kind": "test",
    "name": "describe299",
    "testId": 299,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe299",
    "access": null,
    "description": "listBalancesForAccount()",
    "lineNumber": 3394,
    "testTargets": [
      "Hyperwallet#listBalancesForAccount"
    ]
  },
  {
    "__docId__": 515,
    "kind": "test",
    "name": "it300",
    "testId": 300,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe299",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe299.it300",
    "access": null,
    "description": "should throw error if programToken is missing",
    "lineNumber": 3410,
    "testTargets": [
      "Hyperwallet#listBalancesForAccount"
    ]
  },
  {
    "__docId__": 516,
    "kind": "test",
    "name": "it301",
    "testId": 301,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe299",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe299.it301",
    "access": null,
    "description": "should throw error if accountToken is missing",
    "lineNumber": 3416,
    "testTargets": [
      "Hyperwallet#listBalancesForAccount"
    ]
  },
  {
    "__docId__": 517,
    "kind": "test",
    "name": "it302",
    "testId": 302,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe299",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe299.it302",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 3422,
    "testTargets": [
      "Hyperwallet#listBalancesForAccount"
    ]
  },
  {
    "__docId__": 518,
    "kind": "test",
    "name": "it303",
    "testId": 303,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe299",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe299.it303",
    "access": null,
    "description": "should throw error for invalid filter",
    "lineNumber": 3431,
    "testTargets": [
      "Hyperwallet#listBalancesForAccount"
    ]
  },
  {
    "__docId__": 519,
    "kind": "test",
    "name": "it304",
    "testId": 304,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe299",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe299.it304",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 3438,
    "testTargets": [
      "Hyperwallet#listBalancesForAccount"
    ]
  },
  {
    "__docId__": 520,
    "kind": "test",
    "name": "it305",
    "testId": 305,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe299",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe299.it305",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 3447,
    "testTargets": [
      "Hyperwallet#listBalancesForAccount"
    ]
  },
  {
    "__docId__": 521,
    "kind": "test",
    "name": "describe306",
    "testId": 306,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe306",
    "access": null,
    "description": "createPayment()",
    "lineNumber": 3474,
    "testTargets": [
      "Hyperwallet#createPayment"
    ]
  },
  {
    "__docId__": 522,
    "kind": "test",
    "name": "it307",
    "testId": 307,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe306",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe306.it307",
    "access": null,
    "description": "should do post call to payments endpoint without programToken added",
    "lineNumber": 3490,
    "testTargets": [
      "Hyperwallet#createPayment"
    ]
  },
  {
    "__docId__": 523,
    "kind": "test",
    "name": "it308",
    "testId": 308,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe306",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe306.it308",
    "access": null,
    "description": "should do post call to payments endpoint with programToken added",
    "lineNumber": 3503,
    "testTargets": [
      "Hyperwallet#createPayment"
    ]
  },
  {
    "__docId__": 524,
    "kind": "test",
    "name": "describe309",
    "testId": 309,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe309",
    "access": null,
    "description": "getPayment()",
    "lineNumber": 3520,
    "testTargets": [
      "Hyperwallet#getPayment"
    ]
  },
  {
    "__docId__": 525,
    "kind": "test",
    "name": "it310",
    "testId": 310,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe309",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe309.it310",
    "access": null,
    "description": "should throw error if paymentToken is missing",
    "lineNumber": 3536,
    "testTargets": [
      "Hyperwallet#getPayment"
    ]
  },
  {
    "__docId__": 526,
    "kind": "test",
    "name": "it311",
    "testId": 311,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe309",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe309.it311",
    "access": null,
    "description": "should do get call if paymentToken is provided",
    "lineNumber": 3542,
    "testTargets": [
      "Hyperwallet#getPayment"
    ]
  },
  {
    "__docId__": 527,
    "kind": "test",
    "name": "describe312",
    "testId": 312,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe312",
    "access": null,
    "description": "listPayments()",
    "lineNumber": 3552,
    "testTargets": [
      "Hyperwallet#listPayments"
    ]
  },
  {
    "__docId__": 528,
    "kind": "test",
    "name": "it313",
    "testId": 313,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe312",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe312.it313",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 3568,
    "testTargets": [
      "Hyperwallet#listPayments"
    ]
  },
  {
    "__docId__": 529,
    "kind": "test",
    "name": "it314",
    "testId": 314,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe312",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe312.it314",
    "access": null,
    "description": "should throw error for invalid filter",
    "lineNumber": 3584,
    "testTargets": [
      "Hyperwallet#listPayments"
    ]
  },
  {
    "__docId__": 530,
    "kind": "test",
    "name": "it315",
    "testId": 315,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe312",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe312.it315",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 3591,
    "testTargets": [
      "Hyperwallet#listPayments"
    ]
  },
  {
    "__docId__": 531,
    "kind": "test",
    "name": "it316",
    "testId": 316,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe312",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe312.it316",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 3600,
    "testTargets": [
      "Hyperwallet#listPayments"
    ]
  },
  {
    "__docId__": 532,
    "kind": "test",
    "name": "describe317",
    "testId": 317,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe317",
    "access": null,
    "description": "createPaymentStatusTransition()",
    "lineNumber": 3623,
    "testTargets": [
      "Hyperwallet#createPaymentStatusTransition"
    ]
  },
  {
    "__docId__": 533,
    "kind": "test",
    "name": "it318",
    "testId": 318,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe317",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe317.it318",
    "access": null,
    "description": "should throw error if paymentToken is missing",
    "lineNumber": 3639,
    "testTargets": [
      "Hyperwallet#createPaymentStatusTransition"
    ]
  },
  {
    "__docId__": 534,
    "kind": "test",
    "name": "it319",
    "testId": 319,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe317",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe317.it319",
    "access": null,
    "description": "should send post call to payment status transition endpoint",
    "lineNumber": 3645,
    "testTargets": [
      "Hyperwallet#createPaymentStatusTransition"
    ]
  },
  {
    "__docId__": 535,
    "kind": "test",
    "name": "describe320",
    "testId": 320,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe320",
    "access": null,
    "description": "getPaymentStatusTransition()",
    "lineNumber": 3657,
    "testTargets": [
      "Hyperwallet#getPaymentStatusTransition"
    ]
  },
  {
    "__docId__": 536,
    "kind": "test",
    "name": "it321",
    "testId": 321,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe320",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe320.it321",
    "access": null,
    "description": "should throw error if paymentToken is missing",
    "lineNumber": 3673,
    "testTargets": [
      "Hyperwallet#getPaymentStatusTransition"
    ]
  },
  {
    "__docId__": 537,
    "kind": "test",
    "name": "it322",
    "testId": 322,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe320",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe320.it322",
    "access": null,
    "description": "should throw error if statusTransitionToken is missing",
    "lineNumber": 3679,
    "testTargets": [
      "Hyperwallet#getPaymentStatusTransition"
    ]
  },
  {
    "__docId__": 538,
    "kind": "test",
    "name": "it323",
    "testId": 323,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe320",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe320.it323",
    "access": null,
    "description": "should do get call if paymentToken and statusTransitionToken is provided",
    "lineNumber": 3685,
    "testTargets": [
      "Hyperwallet#getPaymentStatusTransition"
    ]
  },
  {
    "__docId__": 539,
    "kind": "test",
    "name": "describe324",
    "testId": 324,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe324",
    "access": null,
    "description": "listPaymentStatusTransitions()",
    "lineNumber": 3695,
    "testTargets": [
      "Hyperwallet#listPaymentStatusTransitions"
    ]
  },
  {
    "__docId__": 540,
    "kind": "test",
    "name": "it325",
    "testId": 325,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe324",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe324.it325",
    "access": null,
    "description": "should throw error if paymentToken is missing",
    "lineNumber": 3711,
    "testTargets": [
      "Hyperwallet#listPaymentStatusTransitions"
    ]
  },
  {
    "__docId__": 541,
    "kind": "test",
    "name": "it326",
    "testId": 326,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe324",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe324.it326",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 3717,
    "testTargets": [
      "Hyperwallet#listPaymentStatusTransitions"
    ]
  },
  {
    "__docId__": 542,
    "kind": "test",
    "name": "it327",
    "testId": 327,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe324",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe324.it327",
    "access": null,
    "description": "should throw error for invalid filter",
    "lineNumber": 3732,
    "testTargets": [
      "Hyperwallet#listPaymentStatusTransitions"
    ]
  },
  {
    "__docId__": 543,
    "kind": "test",
    "name": "it328",
    "testId": 328,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe324",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe324.it328",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 3739,
    "testTargets": [
      "Hyperwallet#listPaymentStatusTransitions"
    ]
  },
  {
    "__docId__": 544,
    "kind": "test",
    "name": "it329",
    "testId": 329,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe324",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe324.it329",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 3748,
    "testTargets": [
      "Hyperwallet#listPaymentStatusTransitions"
    ]
  },
  {
    "__docId__": 545,
    "kind": "test",
    "name": "describe330",
    "testId": 330,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe330",
    "access": null,
    "description": "getProgram()",
    "lineNumber": 3775,
    "testTargets": [
      "Hyperwallet#getProgram"
    ]
  },
  {
    "__docId__": 546,
    "kind": "test",
    "name": "it331",
    "testId": 331,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe330",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe330.it331",
    "access": null,
    "description": "should throw error if programToken is missing",
    "lineNumber": 3791,
    "testTargets": [
      "Hyperwallet#getProgram"
    ]
  },
  {
    "__docId__": 547,
    "kind": "test",
    "name": "it332",
    "testId": 332,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe330",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe330.it332",
    "access": null,
    "description": "should do get call if programToken is provided",
    "lineNumber": 3797,
    "testTargets": [
      "Hyperwallet#getProgram"
    ]
  },
  {
    "__docId__": 548,
    "kind": "test",
    "name": "describe333",
    "testId": 333,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe333",
    "access": null,
    "description": "getProgramAccount()",
    "lineNumber": 3811,
    "testTargets": [
      "Hyperwallet#getProgramAccount"
    ]
  },
  {
    "__docId__": 549,
    "kind": "test",
    "name": "it334",
    "testId": 334,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe333",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe333.it334",
    "access": null,
    "description": "should throw error if programToken is missing",
    "lineNumber": 3827,
    "testTargets": [
      "Hyperwallet#getProgramAccount"
    ]
  },
  {
    "__docId__": 550,
    "kind": "test",
    "name": "it335",
    "testId": 335,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe333",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe333.it335",
    "access": null,
    "description": "should throw error if accountToken is missing",
    "lineNumber": 3833,
    "testTargets": [
      "Hyperwallet#getProgramAccount"
    ]
  },
  {
    "__docId__": 551,
    "kind": "test",
    "name": "it336",
    "testId": 336,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe333",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe333.it336",
    "access": null,
    "description": "should do get call if programToken is provided",
    "lineNumber": 3839,
    "testTargets": [
      "Hyperwallet#getProgramAccount"
    ]
  },
  {
    "__docId__": 552,
    "kind": "test",
    "name": "describe337",
    "testId": 337,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe337",
    "access": null,
    "description": "getTransferMethodConfiguration()",
    "lineNumber": 3853,
    "testTargets": [
      "Hyperwallet#getTransferMethodConfiguration"
    ]
  },
  {
    "__docId__": 553,
    "kind": "test",
    "name": "it338",
    "testId": 338,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe337",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe337.it338",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 3869,
    "testTargets": [
      "Hyperwallet#getTransferMethodConfiguration"
    ]
  },
  {
    "__docId__": 554,
    "kind": "test",
    "name": "it339",
    "testId": 339,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe337",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe337.it339",
    "access": null,
    "description": "should throw error if country is missing",
    "lineNumber": 3875,
    "testTargets": [
      "Hyperwallet#getTransferMethodConfiguration"
    ]
  },
  {
    "__docId__": 555,
    "kind": "test",
    "name": "it340",
    "testId": 340,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe337",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe337.it340",
    "access": null,
    "description": "should throw error if currency is missing",
    "lineNumber": 3881,
    "testTargets": [
      "Hyperwallet#getTransferMethodConfiguration"
    ]
  },
  {
    "__docId__": 556,
    "kind": "test",
    "name": "it341",
    "testId": 341,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe337",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe337.it341",
    "access": null,
    "description": "should throw error if type is missing",
    "lineNumber": 3887,
    "testTargets": [
      "Hyperwallet#getTransferMethodConfiguration"
    ]
  },
  {
    "__docId__": 557,
    "kind": "test",
    "name": "it342",
    "testId": 342,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe337",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe337.it342",
    "access": null,
    "description": "should throw error if profileType is missing",
    "lineNumber": 3893,
    "testTargets": [
      "Hyperwallet#getTransferMethodConfiguration"
    ]
  },
  {
    "__docId__": 558,
    "kind": "test",
    "name": "it343",
    "testId": 343,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe337",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe337.it343",
    "access": null,
    "description": "should do get call if userToken, country, currency, type and profileType is provided",
    "lineNumber": 3899,
    "testTargets": [
      "Hyperwallet#getTransferMethodConfiguration"
    ]
  },
  {
    "__docId__": 559,
    "kind": "test",
    "name": "describe344",
    "testId": 344,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe344",
    "access": null,
    "description": "listTransferMethodConfigurations()",
    "lineNumber": 3915,
    "testTargets": [
      "Hyperwallet#listTransferMethodConfigurations"
    ]
  },
  {
    "__docId__": 560,
    "kind": "test",
    "name": "it345",
    "testId": 345,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe344",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe344.it345",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 3931,
    "testTargets": [
      "Hyperwallet#listTransferMethodConfigurations"
    ]
  },
  {
    "__docId__": 561,
    "kind": "test",
    "name": "it346",
    "testId": 346,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe344",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe344.it346",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 3937,
    "testTargets": [
      "Hyperwallet#listTransferMethodConfigurations"
    ]
  },
  {
    "__docId__": 562,
    "kind": "test",
    "name": "it347",
    "testId": 347,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe344",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe344.it347",
    "access": null,
    "description": "should throw error for invalid filter",
    "lineNumber": 3947,
    "testTargets": [
      "Hyperwallet#listTransferMethodConfigurations"
    ]
  },
  {
    "__docId__": 563,
    "kind": "test",
    "name": "it348",
    "testId": 348,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe344",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe344.it348",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 3954,
    "testTargets": [
      "Hyperwallet#listTransferMethodConfigurations"
    ]
  },
  {
    "__docId__": 564,
    "kind": "test",
    "name": "it349",
    "testId": 349,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe344",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe344.it349",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 3965,
    "testTargets": [
      "Hyperwallet#listTransferMethodConfigurations"
    ]
  },
  {
    "__docId__": 565,
    "kind": "test",
    "name": "describe350",
    "testId": 350,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe350",
    "access": null,
    "description": "createTransferMethod()",
    "lineNumber": 3989
  },
  {
    "__docId__": 566,
    "kind": "test",
    "name": "it351",
    "testId": 351,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe350",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe350.it351",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 4005,
    "testTargets": [
      "Hyperwallet#createTransferMethod"
    ]
  },
  {
    "__docId__": 567,
    "kind": "test",
    "name": "it352",
    "testId": 352,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe350",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe350.it352",
    "access": null,
    "description": "should throw error if cacheToken is missing",
    "lineNumber": 4014,
    "testTargets": [
      "Hyperwallet#createTransferMethod"
    ]
  },
  {
    "__docId__": 568,
    "kind": "test",
    "name": "it353",
    "testId": 353,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe350",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe350.it353",
    "access": null,
    "description": "should do post call with userToken and cacheToken",
    "lineNumber": 4023,
    "testTargets": [
      "Hyperwallet#createTransferMethod"
    ]
  },
  {
    "__docId__": 569,
    "kind": "test",
    "name": "describe354",
    "testId": 354,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe354",
    "access": null,
    "description": "listReceiptsForProgramAccount()",
    "lineNumber": 4039,
    "testTargets": [
      "Hyperwallet#listReceiptsForProgramAccount"
    ]
  },
  {
    "__docId__": 570,
    "kind": "test",
    "name": "it355",
    "testId": 355,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe354",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe354.it355",
    "access": null,
    "description": "should throw error if programToken is missing",
    "lineNumber": 4055,
    "testTargets": [
      "Hyperwallet#listReceiptsForProgramAccount"
    ]
  },
  {
    "__docId__": 571,
    "kind": "test",
    "name": "it356",
    "testId": 356,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe354",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe354.it356",
    "access": null,
    "description": "should throw error if accountToken is missing",
    "lineNumber": 4061,
    "testTargets": [
      "Hyperwallet#listReceiptsForProgramAccount"
    ]
  },
  {
    "__docId__": 572,
    "kind": "test",
    "name": "it357",
    "testId": 357,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe354",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe354.it357",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 4067,
    "testTargets": [
      "Hyperwallet#listReceiptsForProgramAccount"
    ]
  },
  {
    "__docId__": 573,
    "kind": "test",
    "name": "it358",
    "testId": 358,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe354",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe354.it358",
    "access": null,
    "description": "should throw error for invalid filter",
    "lineNumber": 4076,
    "testTargets": [
      "Hyperwallet#listReceiptsForProgramAccount"
    ]
  },
  {
    "__docId__": 574,
    "kind": "test",
    "name": "it359",
    "testId": 359,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe354",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe354.it359",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 4083,
    "testTargets": [
      "Hyperwallet#listReceiptsForProgramAccount"
    ]
  },
  {
    "__docId__": 575,
    "kind": "test",
    "name": "it360",
    "testId": 360,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe354",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe354.it360",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 4092,
    "testTargets": [
      "Hyperwallet#listReceiptsForProgramAccount"
    ]
  },
  {
    "__docId__": 576,
    "kind": "test",
    "name": "describe361",
    "testId": 361,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe361",
    "access": null,
    "description": "listReceiptsForUser()",
    "lineNumber": 4115,
    "testTargets": [
      "Hyperwallet#listReceiptsForUser"
    ]
  },
  {
    "__docId__": 577,
    "kind": "test",
    "name": "it362",
    "testId": 362,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe361",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe361.it362",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 4131,
    "testTargets": [
      "Hyperwallet#listReceiptsForUser"
    ]
  },
  {
    "__docId__": 578,
    "kind": "test",
    "name": "it363",
    "testId": 363,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe361",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe361.it363",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 4137,
    "testTargets": [
      "Hyperwallet#listReceiptsForUser"
    ]
  },
  {
    "__docId__": 579,
    "kind": "test",
    "name": "it364",
    "testId": 364,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe361",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe361.it364",
    "access": null,
    "description": "should throw error for invalid filter",
    "lineNumber": 4146,
    "testTargets": [
      "Hyperwallet#listReceiptsForUser"
    ]
  },
  {
    "__docId__": 580,
    "kind": "test",
    "name": "it365",
    "testId": 365,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe361",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe361.it365",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 4153,
    "testTargets": [
      "Hyperwallet#listReceiptsForUser"
    ]
  },
  {
    "__docId__": 581,
    "kind": "test",
    "name": "it366",
    "testId": 366,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe361",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe361.it366",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 4162,
    "testTargets": [
      "Hyperwallet#listReceiptsForUser"
    ]
  },
  {
    "__docId__": 582,
    "kind": "test",
    "name": "describe367",
    "testId": 367,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe367",
    "access": null,
    "description": "listReceiptsForPrepaidCard()",
    "lineNumber": 4185,
    "testTargets": [
      "Hyperwallet#listReceiptsForPrepaidCard"
    ]
  },
  {
    "__docId__": 583,
    "kind": "test",
    "name": "it368",
    "testId": 368,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe367",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe367.it368",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 4201,
    "testTargets": [
      "Hyperwallet#listReceiptsForPrepaidCard"
    ]
  },
  {
    "__docId__": 584,
    "kind": "test",
    "name": "it369",
    "testId": 369,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe367",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe367.it369",
    "access": null,
    "description": "should throw error if prepaidCardToken is missing",
    "lineNumber": 4207,
    "testTargets": [
      "Hyperwallet#listReceiptsForPrepaidCard"
    ]
  },
  {
    "__docId__": 585,
    "kind": "test",
    "name": "it370",
    "testId": 370,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe367",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe367.it370",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 4213,
    "testTargets": [
      "Hyperwallet#listReceiptsForPrepaidCard"
    ]
  },
  {
    "__docId__": 586,
    "kind": "test",
    "name": "it371",
    "testId": 371,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe367",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe367.it371",
    "access": null,
    "description": "should throw error for invalid filter",
    "lineNumber": 4222,
    "testTargets": [
      "Hyperwallet#listReceiptsForPrepaidCard"
    ]
  },
  {
    "__docId__": 587,
    "kind": "test",
    "name": "it372",
    "testId": 372,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe367",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe367.it372",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 4229,
    "testTargets": [
      "Hyperwallet#listReceiptsForPrepaidCard"
    ]
  },
  {
    "__docId__": 588,
    "kind": "test",
    "name": "it373",
    "testId": 373,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe367",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe367.it373",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 4238,
    "testTargets": [
      "Hyperwallet#listReceiptsForPrepaidCard"
    ]
  },
  {
    "__docId__": 589,
    "kind": "test",
    "name": "describe374",
    "testId": 374,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe374",
    "access": null,
    "description": "listWebhookNotifications()",
    "lineNumber": 4264
  },
  {
    "__docId__": 590,
    "kind": "test",
    "name": "it375",
    "testId": 375,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe374",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe374.it375",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 4280,
    "testTargets": [
      "Hyperwallet#listWebhookNotifications"
    ]
  },
  {
    "__docId__": 591,
    "kind": "test",
    "name": "it376",
    "testId": 376,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe374",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe374.it376",
    "access": null,
    "description": "should throw error for invalid filter",
    "lineNumber": 4296,
    "testTargets": [
      "Hyperwallet#listWebhookNotifications"
    ]
  },
  {
    "__docId__": 592,
    "kind": "test",
    "name": "it377",
    "testId": 377,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe374",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe374.it377",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 4303,
    "testTargets": [
      "Hyperwallet#listWebhookNotifications"
    ]
  },
  {
    "__docId__": 593,
    "kind": "test",
    "name": "it378",
    "testId": 378,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe374",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe374.it378",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 4312,
    "testTargets": [
      "Hyperwallet#listWebhookNotifications"
    ]
  },
  {
    "__docId__": 594,
    "kind": "test",
    "name": "describe379",
    "testId": 379,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe379",
    "access": null,
    "description": "getWebhookNotification",
    "lineNumber": 4334
  },
  {
    "__docId__": 595,
    "kind": "test",
    "name": "it380",
    "testId": 380,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe379",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe379.it380",
    "access": null,
    "description": "should throw error if webhookToken is missing",
    "lineNumber": 4350,
    "testTargets": [
      "Hyperwallet#getWebhookNotification"
    ]
  },
  {
    "__docId__": 596,
    "kind": "test",
    "name": "it381",
    "testId": 381,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe379",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe379.it381",
    "access": null,
    "description": "should do get call if webhookToken is provided",
    "lineNumber": 4356,
    "testTargets": [
      "Hyperwallet#getWebhookNotification"
    ]
  },
  {
    "__docId__": 597,
    "kind": "test",
    "name": "describe382",
    "testId": 382,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe382",
    "access": null,
    "description": "addProgramToken()",
    "lineNumber": 4369
  },
  {
    "__docId__": 598,
    "kind": "test",
    "name": "it383",
    "testId": 383,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe382",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe382.it383",
    "access": null,
    "description": "should do nothing if no data is provided",
    "lineNumber": 4370
  },
  {
    "__docId__": 599,
    "kind": "test",
    "name": "it384",
    "testId": 384,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe382",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe382.it384",
    "access": null,
    "description": "should do nothing if no programToken is set",
    "lineNumber": 4379
  },
  {
    "__docId__": 600,
    "kind": "test",
    "name": "it385",
    "testId": 385,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe382",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe382.it385",
    "access": null,
    "description": "should do nothing if programToken is set in data",
    "lineNumber": 4388
  },
  {
    "__docId__": 601,
    "kind": "test",
    "name": "it386",
    "testId": 386,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe382",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe382.it386",
    "access": null,
    "description": "should add programToken if no programToken is set in data",
    "lineNumber": 4398
  },
  {
    "__docId__": 602,
    "kind": "test",
    "name": "describe387",
    "testId": 387,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe387",
    "access": null,
    "description": "handle204Response()",
    "lineNumber": 4409
  },
  {
    "__docId__": 603,
    "kind": "test",
    "name": "it388",
    "testId": 388,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe387",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe387.it388",
    "access": null,
    "description": "should return a 'function' with a argument",
    "lineNumber": 4410
  },
  {
    "__docId__": 604,
    "kind": "test",
    "name": "it389",
    "testId": 389,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe387",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe387.it389",
    "access": null,
    "description": "should do nothing for errors",
    "lineNumber": 4414
  },
  {
    "__docId__": 605,
    "kind": "test",
    "name": "it390",
    "testId": 390,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe387",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe387.it390",
    "access": null,
    "description": "should do nothing for non 204 responses",
    "lineNumber": 4433
  },
  {
    "__docId__": 606,
    "kind": "test",
    "name": "it391",
    "testId": 391,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe387",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe387.it391",
    "access": null,
    "description": "should return empty list for 204 responses",
    "lineNumber": 4452
  },
  {
    "__docId__": 607,
    "kind": "test",
    "name": "describe392",
    "testId": 392,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe392",
    "access": null,
    "description": "createVenmoAccount()",
    "lineNumber": 4482,
    "testTargets": [
      "Hyperwallet#createVenmoAccount"
    ]
  },
  {
    "__docId__": 608,
    "kind": "test",
    "name": "it393",
    "testId": 393,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe392",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe392.it393",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 4498,
    "testTargets": [
      "Hyperwallet#createVenmoAccount"
    ]
  },
  {
    "__docId__": 609,
    "kind": "test",
    "name": "it394",
    "testId": 394,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe392",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe392.it394",
    "access": null,
    "description": "should throw error if transferMethodCountry is missing",
    "lineNumber": 4504,
    "testTargets": [
      "Hyperwallet#createVenmoAccount"
    ]
  },
  {
    "__docId__": 610,
    "kind": "test",
    "name": "it395",
    "testId": 395,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe392",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe392.it395",
    "access": null,
    "description": "should throw error if transferMethodCurrency is missing",
    "lineNumber": 4510,
    "testTargets": [
      "Hyperwallet#createVenmoAccount"
    ]
  },
  {
    "__docId__": 611,
    "kind": "test",
    "name": "it396",
    "testId": 396,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe392",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe392.it396",
    "access": null,
    "description": "should throw error if accountId is missing",
    "lineNumber": 4518,
    "testTargets": [
      "Hyperwallet#createVenmoAccount"
    ]
  },
  {
    "__docId__": 612,
    "kind": "test",
    "name": "it397",
    "testId": 397,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe392",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe392.it397",
    "access": null,
    "description": "should do post call to venmo account endpoint",
    "lineNumber": 4527,
    "testTargets": [
      "Hyperwallet#createVenmoAccount"
    ]
  },
  {
    "__docId__": 613,
    "kind": "test",
    "name": "describe398",
    "testId": 398,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe398",
    "access": null,
    "description": "getVenmoAccount()",
    "lineNumber": 4545,
    "testTargets": [
      "Hyperwallet#getVenmoAccount"
    ]
  },
  {
    "__docId__": 614,
    "kind": "test",
    "name": "it399",
    "testId": 399,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe398",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe398.it399",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 4561,
    "testTargets": [
      "Hyperwallet#getVenmoAccount"
    ]
  },
  {
    "__docId__": 615,
    "kind": "test",
    "name": "it400",
    "testId": 400,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe398",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe398.it400",
    "access": null,
    "description": "should throw error if venmoAccountToken is missing",
    "lineNumber": 4567,
    "testTargets": [
      "Hyperwallet#getVenmoAccount"
    ]
  },
  {
    "__docId__": 616,
    "kind": "test",
    "name": "it401",
    "testId": 401,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe398",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe398.it401",
    "access": null,
    "description": "should do get call if userToken and venmoAccountToken is provided",
    "lineNumber": 4573,
    "testTargets": [
      "Hyperwallet#getVenmoAccount"
    ]
  },
  {
    "__docId__": 617,
    "kind": "test",
    "name": "describe402",
    "testId": 402,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe402",
    "access": null,
    "description": "listVenmoAccounts()",
    "lineNumber": 4583,
    "testTargets": [
      "Hyperwallet#listVenmoAccounts"
    ]
  },
  {
    "__docId__": 618,
    "kind": "test",
    "name": "it403",
    "testId": 403,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe402",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe402.it403",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 4599,
    "testTargets": [
      "Hyperwallet#listVenmoAccounts"
    ]
  },
  {
    "__docId__": 619,
    "kind": "test",
    "name": "it404",
    "testId": 404,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe402",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe402.it404",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 4605,
    "testTargets": [
      "Hyperwallet#listVenmoAccounts"
    ]
  },
  {
    "__docId__": 620,
    "kind": "test",
    "name": "it405",
    "testId": 405,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe402",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe402.it405",
    "access": null,
    "description": "should throw error for invalid filter",
    "lineNumber": 4621,
    "testTargets": [
      "Hyperwallet#listVenmoAccounts"
    ]
  },
  {
    "__docId__": 621,
    "kind": "test",
    "name": "it406",
    "testId": 406,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe402",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe402.it406",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 4628,
    "testTargets": [
      "Hyperwallet#listVenmoAccounts"
    ]
  },
  {
    "__docId__": 622,
    "kind": "test",
    "name": "it407",
    "testId": 407,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe402",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe402.it407",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 4637,
    "testTargets": [
      "Hyperwallet#listVenmoAccounts"
    ]
  },
  {
    "__docId__": 623,
    "kind": "test",
    "name": "describe408",
    "testId": 408,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe408",
    "access": null,
    "description": "updateVenmoAccount()",
    "lineNumber": 4660,
    "testTargets": [
      "Hyperwallet#updateVenmoAccount"
    ]
  },
  {
    "__docId__": 624,
    "kind": "test",
    "name": "it409",
    "testId": 409,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe408",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe408.it409",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 4676,
    "testTargets": [
      "Hyperwallet#updateVenmoAccount"
    ]
  },
  {
    "__docId__": 625,
    "kind": "test",
    "name": "it410",
    "testId": 410,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe408",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe408.it410",
    "access": null,
    "description": "should throw error if venmoAccountToken is missing",
    "lineNumber": 4682,
    "testTargets": [
      "Hyperwallet#updateVenmoAccount"
    ]
  },
  {
    "__docId__": 626,
    "kind": "test",
    "name": "it411",
    "testId": 411,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe408",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe408.it411",
    "access": null,
    "description": "should do put call to venmo accounts endpoint",
    "lineNumber": 4688,
    "testTargets": [
      "Hyperwallet#updateVenmoAccount"
    ]
  },
  {
    "__docId__": 627,
    "kind": "test",
    "name": "describe412",
    "testId": 412,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe412",
    "access": null,
    "description": "deactivateVenmoAccount()",
    "lineNumber": 4702,
    "testTargets": [
      "Hyperwallet#deactivateVenmoAccount"
    ]
  },
  {
    "__docId__": 628,
    "kind": "test",
    "name": "it413",
    "testId": 413,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe412",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe412.it413",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 4718,
    "testTargets": [
      "Hyperwallet#deactivateVenmoAccount"
    ]
  },
  {
    "__docId__": 629,
    "kind": "test",
    "name": "it414",
    "testId": 414,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe412",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe412.it414",
    "access": null,
    "description": "should throw error if venmoAccountToken is missing",
    "lineNumber": 4724,
    "testTargets": [
      "Hyperwallet#deactivateVenmoAccount"
    ]
  },
  {
    "__docId__": 630,
    "kind": "test",
    "name": "it415",
    "testId": 415,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe412",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe412.it415",
    "access": null,
    "description": "should send transition to 'DE_ACTIVATED'",
    "lineNumber": 4730,
    "testTargets": [
      "Hyperwallet#deactivateVenmoAccount"
    ]
  },
  {
    "__docId__": 631,
    "kind": "test",
    "name": "describe416",
    "testId": 416,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe416",
    "access": null,
    "description": "createVenmoAccountStatusTransition()",
    "lineNumber": 4742,
    "testTargets": [
      "Hyperwallet#createVenmoAccountStatusTransition"
    ]
  },
  {
    "__docId__": 632,
    "kind": "test",
    "name": "it417",
    "testId": 417,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe416",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe416.it417",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 4758,
    "testTargets": [
      "Hyperwallet#createVenmoAccountStatusTransition"
    ]
  },
  {
    "__docId__": 633,
    "kind": "test",
    "name": "it418",
    "testId": 418,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe416",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe416.it418",
    "access": null,
    "description": "should throw error if venmoAccountToken is missing",
    "lineNumber": 4764,
    "testTargets": [
      "Hyperwallet#createVenmoAccountStatusTransition"
    ]
  },
  {
    "__docId__": 634,
    "kind": "test",
    "name": "it419",
    "testId": 419,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe416",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe416.it419",
    "access": null,
    "description": "should send post call to venmo account status transition endpoint",
    "lineNumber": 4770,
    "testTargets": [
      "Hyperwallet#createVenmoAccountStatusTransition"
    ]
  },
  {
    "__docId__": 635,
    "kind": "test",
    "name": "describe420",
    "testId": 420,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe420",
    "access": null,
    "description": "getVenmoAccountStatusTransition()",
    "lineNumber": 4783,
    "testTargets": [
      "Hyperwallet#getVenmoAccountStatusTransition"
    ]
  },
  {
    "__docId__": 636,
    "kind": "test",
    "name": "it421",
    "testId": 421,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe420",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe420.it421",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 4799,
    "testTargets": [
      "Hyperwallet#getVenmoAccountStatusTransition"
    ]
  },
  {
    "__docId__": 637,
    "kind": "test",
    "name": "it422",
    "testId": 422,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe420",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe420.it422",
    "access": null,
    "description": "should throw error if venmoAccountToken is missing",
    "lineNumber": 4805,
    "testTargets": [
      "Hyperwallet#getVenmoAccountStatusTransition"
    ]
  },
  {
    "__docId__": 638,
    "kind": "test",
    "name": "it423",
    "testId": 423,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe420",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe420.it423",
    "access": null,
    "description": "should throw error if statusTransitionToken is missing",
    "lineNumber": 4811,
    "testTargets": [
      "Hyperwallet#getVenmoAccountStatusTransition"
    ]
  },
  {
    "__docId__": 639,
    "kind": "test",
    "name": "it424",
    "testId": 424,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe420",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe420.it424",
    "access": null,
    "description": "should do get call if userToken, venmoAccountToken and statusTransitionToken is provided",
    "lineNumber": 4817,
    "testTargets": [
      "Hyperwallet#getVenmoAccountStatusTransition"
    ]
  },
  {
    "__docId__": 640,
    "kind": "test",
    "name": "describe425",
    "testId": 425,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe425",
    "access": null,
    "description": "listVenmoAccountStatusTransitions()",
    "lineNumber": 4827,
    "testTargets": [
      "Hyperwallet#listVenmoAccountStatusTransitions"
    ]
  },
  {
    "__docId__": 641,
    "kind": "test",
    "name": "it426",
    "testId": 426,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe425",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe425.it426",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 4843,
    "testTargets": [
      "Hyperwallet#listVenmoAccountStatusTransitions"
    ]
  },
  {
    "__docId__": 642,
    "kind": "test",
    "name": "it427",
    "testId": 427,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe425",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe425.it427",
    "access": null,
    "description": "should throw error if venmoAccountToken is missing",
    "lineNumber": 4849,
    "testTargets": [
      "Hyperwallet#listVenmoAccountStatusTransitions"
    ]
  },
  {
    "__docId__": 643,
    "kind": "test",
    "name": "it428",
    "testId": 428,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe425",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe425.it428",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 4855,
    "testTargets": [
      "Hyperwallet#listVenmoAccountStatusTransitions"
    ]
  },
  {
    "__docId__": 644,
    "kind": "test",
    "name": "it429",
    "testId": 429,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe425",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe425.it429",
    "access": null,
    "description": "should throw error for invalid filter",
    "lineNumber": 4870,
    "testTargets": [
      "Hyperwallet#listVenmoAccountStatusTransitions"
    ]
  },
  {
    "__docId__": 645,
    "kind": "test",
    "name": "it430",
    "testId": 430,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe425",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe425.it430",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 4877,
    "testTargets": [
      "Hyperwallet#listVenmoAccountStatusTransitions"
    ]
  },
  {
    "__docId__": 646,
    "kind": "test",
    "name": "it431",
    "testId": 431,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe425",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe425.it431",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 4886,
    "testTargets": [
      "Hyperwallet#listVenmoAccountStatusTransitions"
    ]
  },
  {
    "__docId__": 647,
    "kind": "test",
    "name": "describe432",
    "testId": 432,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe432",
    "access": null,
    "description": "createBusinessStakeholder()",
    "lineNumber": 4913,
    "testTargets": [
      "Hyperwallet#createBusinessStakeholder"
    ]
  },
  {
    "__docId__": 648,
    "kind": "test",
    "name": "it433",
    "testId": 433,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe432",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe432.it433",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 4929,
    "testTargets": [
      "Hyperwallet#createStakeholder"
    ]
  },
  {
    "__docId__": 649,
    "kind": "test",
    "name": "it434",
    "testId": 434,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe432",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe432.it434",
    "access": null,
    "description": "should send post call to Stakeholder status transition endpoint",
    "lineNumber": 4935,
    "testTargets": [
      "Hyperwallet#createStakeholder"
    ]
  },
  {
    "__docId__": 650,
    "kind": "test",
    "name": "describe435",
    "testId": 435,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe435",
    "access": null,
    "description": "listBusinessStakeholders()",
    "lineNumber": 4947,
    "testTargets": [
      "Hyperwallet#listBusinessStakeholders"
    ]
  },
  {
    "__docId__": 651,
    "kind": "test",
    "name": "it436",
    "testId": 436,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe435",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe435.it436",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 4963,
    "testTargets": [
      "Hyperwallet#listBusinessStakeholders"
    ]
  },
  {
    "__docId__": 652,
    "kind": "test",
    "name": "it437",
    "testId": 437,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe435",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe435.it437",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 4969,
    "testTargets": [
      "Hyperwallet#listBusinessStakeholders"
    ]
  },
  {
    "__docId__": 653,
    "kind": "test",
    "name": "it438",
    "testId": 438,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe435",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe435.it438",
    "access": null,
    "description": "should throw error for invalid filter",
    "lineNumber": 4977,
    "testTargets": [
      "Hyperwallet#listBusinessStakeholders"
    ]
  },
  {
    "__docId__": 654,
    "kind": "test",
    "name": "it439",
    "testId": 439,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe435",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe435.it439",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 4984,
    "testTargets": [
      "Hyperwallet#listBusinessStakeholders"
    ]
  },
  {
    "__docId__": 655,
    "kind": "test",
    "name": "it440",
    "testId": 440,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe435",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe435.it440",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 4993,
    "testTargets": [
      "Hyperwallet#listBusinessStakeholders"
    ]
  },
  {
    "__docId__": 656,
    "kind": "test",
    "name": "describe441",
    "testId": 441,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe441",
    "access": null,
    "description": "updateBusinessStakeholder()",
    "lineNumber": 5016,
    "testTargets": [
      "Hyperwallet#updateBusinessStakeholder"
    ]
  },
  {
    "__docId__": 657,
    "kind": "test",
    "name": "it442",
    "testId": 442,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe441",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe441.it442",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 5032,
    "testTargets": [
      "Hyperwallet#updateBusinessStakeholder"
    ]
  },
  {
    "__docId__": 658,
    "kind": "test",
    "name": "it443",
    "testId": 443,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe441",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe441.it443",
    "access": null,
    "description": "should throw error if stakeholderToken is missing",
    "lineNumber": 5038,
    "testTargets": [
      "Hyperwallet#updateBusinessStakeholder"
    ]
  },
  {
    "__docId__": 659,
    "kind": "test",
    "name": "it444",
    "testId": 444,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe441",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe441.it444",
    "access": null,
    "description": "should do put call to Stakeholder endpoint",
    "lineNumber": 5044,
    "testTargets": [
      "Hyperwallet#updateBusinessStakeholder"
    ]
  },
  {
    "__docId__": 660,
    "kind": "test",
    "name": "describe445",
    "testId": 445,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe445",
    "access": null,
    "description": "deactivateBusinessStakeholder()",
    "lineNumber": 5058,
    "testTargets": [
      "Hyperwallet#deactivateBusinessStakeholder"
    ]
  },
  {
    "__docId__": 661,
    "kind": "test",
    "name": "it446",
    "testId": 446,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe445",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe445.it446",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 5074,
    "testTargets": [
      "Hyperwallet#deactivateBusinessStakeholder"
    ]
  },
  {
    "__docId__": 662,
    "kind": "test",
    "name": "it447",
    "testId": 447,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe445",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe445.it447",
    "access": null,
    "description": "should throw error if stakeholderToken is missing",
    "lineNumber": 5080,
    "testTargets": [
      "Hyperwallet#deactivateBusinessStakeholder"
    ]
  },
  {
    "__docId__": 663,
    "kind": "test",
    "name": "it448",
    "testId": 448,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe445",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe445.it448",
    "access": null,
    "description": "should send transition to 'DE_ACTIVATED'",
    "lineNumber": 5086,
    "testTargets": [
      "Hyperwallet#deactivateBusinessStakeholder"
    ]
  },
  {
    "__docId__": 664,
    "kind": "test",
    "name": "describe449",
    "testId": 449,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe449",
    "access": null,
    "description": "activateBusinessStakeholder()",
    "lineNumber": 5098,
    "testTargets": [
      "Hyperwallet#activateBusinessStakeholder"
    ]
  },
  {
    "__docId__": 665,
    "kind": "test",
    "name": "it450",
    "testId": 450,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe449",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe449.it450",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 5114,
    "testTargets": [
      "Hyperwallet#activateBusinessStakeholder"
    ]
  },
  {
    "__docId__": 666,
    "kind": "test",
    "name": "it451",
    "testId": 451,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe449",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe449.it451",
    "access": null,
    "description": "should throw error if stakeholderToken is missing",
    "lineNumber": 5120,
    "testTargets": [
      "Hyperwallet#activateBusinessStakeholder"
    ]
  },
  {
    "__docId__": 667,
    "kind": "test",
    "name": "it452",
    "testId": 452,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe449",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe449.it452",
    "access": null,
    "description": "should send transition to 'ACTIVATED'",
    "lineNumber": 5126,
    "testTargets": [
      "Hyperwallet#activateBusinessStakeholder"
    ]
  },
  {
    "__docId__": 668,
    "kind": "test",
    "name": "describe453",
    "testId": 453,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe453",
    "access": null,
    "description": "createBusinessStakeholderStatusTransition()",
    "lineNumber": 5138,
    "testTargets": [
      "Hyperwallet#createBusinessStakeholderStatusTransition"
    ]
  },
  {
    "__docId__": 669,
    "kind": "test",
    "name": "it454",
    "testId": 454,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe453",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe453.it454",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 5154,
    "testTargets": [
      "Hyperwallet#createBusinessStakeholderStatusTransition"
    ]
  },
  {
    "__docId__": 670,
    "kind": "test",
    "name": "it455",
    "testId": 455,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe453",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe453.it455",
    "access": null,
    "description": "should throw error if stakeholderToken is missing",
    "lineNumber": 5160,
    "testTargets": [
      "Hyperwallet#createBusinessStakeholderStatusTransition"
    ]
  },
  {
    "__docId__": 671,
    "kind": "test",
    "name": "it456",
    "testId": 456,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe453",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe453.it456",
    "access": null,
    "description": "should send post call to StakeHolder status transition endpoint",
    "lineNumber": 5166,
    "testTargets": [
      "Hyperwallet#createBusinessStakeholderStatusTransition"
    ]
  },
  {
    "__docId__": 672,
    "kind": "test",
    "name": "describe457",
    "testId": 457,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe457",
    "access": null,
    "description": "getBusinessStakeholderStatusTransition()",
    "lineNumber": 5178,
    "testTargets": [
      "Hyperwallet#getBusinessStakeholderStatusTransition"
    ]
  },
  {
    "__docId__": 673,
    "kind": "test",
    "name": "it458",
    "testId": 458,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe457",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe457.it458",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 5194,
    "testTargets": [
      "Hyperwallet#getBusinessStakeholderStatusTransition"
    ]
  },
  {
    "__docId__": 674,
    "kind": "test",
    "name": "it459",
    "testId": 459,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe457",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe457.it459",
    "access": null,
    "description": "should throw error if stakeholderToken is missing",
    "lineNumber": 5200,
    "testTargets": [
      "Hyperwallet#getBusinessStakeholderStatusTransition"
    ]
  },
  {
    "__docId__": 675,
    "kind": "test",
    "name": "it460",
    "testId": 460,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe457",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe457.it460",
    "access": null,
    "description": "should throw error if statusTransitionToken is missing",
    "lineNumber": 5206,
    "testTargets": [
      "Hyperwallet#getBusinessStakeholderStatusTransition"
    ]
  },
  {
    "__docId__": 676,
    "kind": "test",
    "name": "it461",
    "testId": 461,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe457",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe457.it461",
    "access": null,
    "description": "should do get call if userToken, stakeholderToken and statusTransitionToken is provided",
    "lineNumber": 5212,
    "testTargets": [
      "Hyperwallet#getBusinessStakeholderStatusTransition"
    ]
  },
  {
    "__docId__": 677,
    "kind": "test",
    "name": "describe462",
    "testId": 462,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe462",
    "access": null,
    "description": "listBusinessStakeholderStatusTransitions()",
    "lineNumber": 5222,
    "testTargets": [
      "Hyperwallet#listBusinessStakeholderStatusTransitions"
    ]
  },
  {
    "__docId__": 678,
    "kind": "test",
    "name": "it463",
    "testId": 463,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe462",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe462.it463",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 5238,
    "testTargets": [
      "Hyperwallet#listBusinessStakeholderStatusTransitions"
    ]
  },
  {
    "__docId__": 679,
    "kind": "test",
    "name": "it464",
    "testId": 464,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe462",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe462.it464",
    "access": null,
    "description": "should throw error if stakeholderToken is missing",
    "lineNumber": 5244,
    "testTargets": [
      "Hyperwallet#listBusinessStakeholderStatusTransitions"
    ]
  },
  {
    "__docId__": 680,
    "kind": "test",
    "name": "it465",
    "testId": 465,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe462",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe462.it465",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 5250,
    "testTargets": [
      "Hyperwallet#listBusinessStakeholderStatusTransitions"
    ]
  },
  {
    "__docId__": 681,
    "kind": "test",
    "name": "it466",
    "testId": 466,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe462",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe462.it466",
    "access": null,
    "description": "should throw error for invalid filter",
    "lineNumber": 5259,
    "testTargets": [
      "Hyperwallet#listBusinessStakeholderStatusTransitions"
    ]
  },
  {
    "__docId__": 682,
    "kind": "test",
    "name": "it467",
    "testId": 467,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe462",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe462.it467",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 5266,
    "testTargets": [
      "Hyperwallet#listBusinessStakeholderStatusTransitions"
    ]
  },
  {
    "__docId__": 683,
    "kind": "test",
    "name": "it468",
    "testId": 468,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe462",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe462.it468",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 5275,
    "testTargets": [
      "Hyperwallet#listBusinessStakeholderStatusTransitions"
    ]
  },
  {
    "__docId__": 684,
    "kind": "test",
    "name": "describe469",
    "testId": 469,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe469",
    "access": null,
    "description": "uploadBusinessStakeholderDocuments()",
    "lineNumber": 5297
  },
  {
    "__docId__": 685,
    "kind": "test",
    "name": "it470",
    "testId": 470,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe469",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe469.it470",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 5313,
    "testTargets": [
      "Hyperwallet#uploadBusinessStakeholderDocuments"
    ]
  },
  {
    "__docId__": 686,
    "kind": "test",
    "name": "it471",
    "testId": 471,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe469",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe469.it471",
    "access": null,
    "description": "should throw error if stakeholderToken is missing",
    "lineNumber": 5319,
    "testTargets": [
      "Hyperwallet#uploadBusinessStakeholderDocuments"
    ]
  },
  {
    "__docId__": 687,
    "kind": "test",
    "name": "it472",
    "testId": 472,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe469",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe469.it472",
    "access": null,
    "description": "should throw error if data is missing",
    "lineNumber": 5325,
    "testTargets": [
      "Hyperwallet#uploadBusinessStakeholderDocuments"
    ]
  },
  {
    "__docId__": 688,
    "kind": "test",
    "name": "it473",
    "testId": 473,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe469",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe469.it473",
    "access": null,
    "description": "should do put call to upload multipart",
    "lineNumber": 5331,
    "testTargets": [
      "Hyperwallet#uploadBusinessStakeholderDocuments"
    ]
  },
  {
    "__docId__": 689,
    "kind": "test",
    "name": "describe474",
    "testId": 474,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe474",
    "access": null,
    "description": "listTransferMethods()",
    "lineNumber": 5343,
    "testTargets": [
      "Hyperwallet#listTransferMethods"
    ]
  },
  {
    "__docId__": 690,
    "kind": "test",
    "name": "it475",
    "testId": 475,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe474",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe474.it475",
    "access": null,
    "description": "should throw error if userToken is missing",
    "lineNumber": 5359,
    "testTargets": [
      "Hyperwallet#listTransferMethods"
    ]
  },
  {
    "__docId__": 691,
    "kind": "test",
    "name": "it476",
    "testId": 476,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe474",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe474.it476",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 5365,
    "testTargets": [
      "Hyperwallet#listTransferMethods"
    ]
  },
  {
    "__docId__": 692,
    "kind": "test",
    "name": "it477",
    "testId": 477,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe474",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe474.it477",
    "access": null,
    "description": "should throw error for invalid filter",
    "lineNumber": 5374,
    "testTargets": [
      "Hyperwallet#listTransferMethods"
    ]
  },
  {
    "__docId__": 693,
    "kind": "test",
    "name": "it478",
    "testId": 478,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe474",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe474.it478",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 5381,
    "testTargets": [
      "Hyperwallet#listTransferMethods"
    ]
  },
  {
    "__docId__": 694,
    "kind": "test",
    "name": "it479",
    "testId": 479,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe474",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe474.it479",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 5390,
    "testTargets": [
      "Hyperwallet#listTransferMethods"
    ]
  },
  {
    "__docId__": 695,
    "kind": "test",
    "name": "describe480",
    "testId": 480,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe480",
    "access": null,
    "description": "getTransferStatusTransition()",
    "lineNumber": 5413,
    "testTargets": [
      "Hyperwallet#getTransferStatusTransition"
    ]
  },
  {
    "__docId__": 696,
    "kind": "test",
    "name": "it481",
    "testId": 481,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe480",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe480.it481",
    "access": null,
    "description": "should throw error if transferToken is missing",
    "lineNumber": 5428,
    "testTargets": [
      "Hyperwallet#getTransferStatusTransition"
    ]
  },
  {
    "__docId__": 697,
    "kind": "test",
    "name": "it482",
    "testId": 482,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe480",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe480.it482",
    "access": null,
    "description": "should throw error if statusTransitionToken is missing",
    "lineNumber": 5434,
    "testTargets": [
      "Hyperwallet#getTransferStatusTransition"
    ]
  },
  {
    "__docId__": 698,
    "kind": "test",
    "name": "it483",
    "testId": 483,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe480",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe480.it483",
    "access": null,
    "description": "should do get call if transferToken and statusTransitionToken is provided",
    "lineNumber": 5440,
    "testTargets": [
      "Hyperwallet#getTransferStatusTransition"
    ]
  },
  {
    "__docId__": 699,
    "kind": "test",
    "name": "describe484",
    "testId": 484,
    "memberof": "test/Hyperwallet.spec.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe484",
    "access": null,
    "description": "listTransferStatusTransition()",
    "lineNumber": 5449,
    "testTargets": [
      "Hyperwallet#listTransferStatusTransition"
    ]
  },
  {
    "__docId__": 700,
    "kind": "test",
    "name": "it485",
    "testId": 485,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe484",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe484.it485",
    "access": null,
    "description": "should throw error if transferToken is missing",
    "lineNumber": 5464,
    "testTargets": [
      "Hyperwallet#listTransferStatusTransition"
    ]
  },
  {
    "__docId__": 701,
    "kind": "test",
    "name": "it486",
    "testId": 486,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe484",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe484.it486",
    "access": null,
    "description": "should do get call with options",
    "lineNumber": 5470,
    "testTargets": [
      "Hyperwallet#listTransferStatusTransition"
    ]
  },
  {
    "__docId__": 702,
    "kind": "test",
    "name": "it487",
    "testId": 487,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe484",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe484.it487",
    "access": null,
    "description": "should do get call without options",
    "lineNumber": 5478,
    "testTargets": [
      "Hyperwallet#listTransferStatusTransition"
    ]
  },
  {
    "__docId__": 703,
    "kind": "test",
    "name": "it488",
    "testId": 488,
    "memberof": "test/Hyperwallet.spec.js~describe0.describe484",
    "testDepth": 2,
    "static": true,
    "longname": "test/Hyperwallet.spec.js~describe0.describe484.it488",
    "access": null,
    "description": "should handle 204 return",
    "lineNumber": 5486,
    "testTargets": [
      "Hyperwallet#listTransferStatusTransition"
    ]
  },
  {
    "__docId__": 704,
    "kind": "testFile",
    "name": "test/utils/ApiClient.spec.js",
    "content": "import chai, { expect } from \"chai\";\nimport dirtyChai from \"dirty-chai\";\nimport nock from \"nock\";\nimport path from \"path\";\nimport Encryption from \"../../src/utils/Encryption\";\n\nimport ApiClient from \"../../src/utils/ApiClient\";\n\nimport packageJson from \"../../package.json\";\n\nchai.should();\nchai.use(dirtyChai);\n\n/** @test {ApiClient} */\ndescribe(\"utils/ApiClient\", () => {\n    /** @test {ApiClient#constructor} */\n    describe(\"constructor()\", () => {\n        /** @test {ApiClient#constructor} */\n        it(\"should set provided values as private members\", () => {\n            const client = new ApiClient(\"test-username\", \"test-password\", \"test-server\");\n\n            client.username.should.be.equal(\"test-username\");\n            client.password.should.be.equal(\"test-password\");\n            client.server.should.be.equal(\"test-server\");\n        });\n\n        /** @test {ApiClient#constructor} */\n        it(\"should set the version to package.json version\", () => {\n            const client = new ApiClient(\"test-username\", \"test-password\", \"test-server\");\n            client.version.should.be.equal(packageJson.version);\n        });\n    });\n\n    /** @test {ApiClient#doPost} */\n    describe(\"doPost()\", () => {\n        let client;\n        let authHeader;\n\n        before(() => {\n            nock.disableNetConnect();\n        });\n        after(() => {\n            nock.enableNetConnect();\n        });\n\n        beforeEach(() => {\n            client = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\");\n\n            authHeader = \"Basic dGVzdC11c2VybmFtZTp0ZXN0LXBhc3N3b3Jk\";\n        });\n        afterEach(() => {\n            nock.cleanAll();\n        });\n\n        /** @test {ApiClient#doPost} */\n        it(\"should return response if call was successful (with query parameters)\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .matchHeader(\"Content-Type\", \"application/json\")\n                .post(\"/rest/v4/test\", {\n                    test: \"value\",\n                })\n                .query({ sort: \"test\" })\n                .reply(201, { response: \"value\" }, { \"Content-Type\": \"application/json\" });\n\n            client.doPost(\"test\", { test: \"value\" }, { sort: \"test\" }, (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                body.should.be.deep.equal({\n                    response: \"value\",\n                });\n\n                res.status.should.be.equal(201);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPost} */\n        it(\"should return response if call was successful (with query parameters) when content type contains charset\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .matchHeader(\"Content-Type\", \"application/json\")\n                .post(\"/rest/v4/test\", {\n                    test: \"value\",\n                })\n                .query({ sort: \"test\" })\n                .reply(201, { response: \"value\" }, {\n                    \"Content-Type\": \"application/json;charset=utf-8\",\n                });\n\n            client.doPost(\"test\", { test: \"value\" }, { sort: \"test\" }, (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                body.should.be.deep.equal({\n                    response: \"value\",\n                });\n\n                res.status.should.be.equal(201);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPost} */\n        it(\"should return response if call was successful (with query parameters) when content type contains charset ahead\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .matchHeader(\"Content-Type\", \"application/json\")\n                .post(\"/rest/v4/test\", {\n                    test: \"value\",\n                })\n                .query({ sort: \"test\" })\n                .reply(201, { response: \"value\" }, {\n                    \"Content-Type\": \"charset=utf-8;application/json\",\n                });\n\n            client.doPost(\"test\", { test: \"value\" }, { sort: \"test\" }, (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                JSON.parse(body.toString(\"utf8\")).should.be.deep.equal({\n                    response: \"value\",\n                });\n\n                res.status.should.be.equal(201);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPost} */\n        it(\"should return response if call was successful (without query parameters)\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .matchHeader(\"Content-Type\", \"application/json\")\n                .post(\"/rest/v4/test\", {\n                    test: \"value\",\n                })\n                .reply(201, { response: \"value\" }, { \"Content-Type\": \"application/json\" });\n\n            client.doPost(\"test\", { test: \"value\" }, {}, (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                body.should.be.deep.equal({\n                    response: \"value\",\n                });\n\n                res.status.should.be.equal(201);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPost} */\n        it(\"should return response if call was successful (without query parameters) and response body is empty\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .matchHeader(\"Content-Type\", \"application/json\")\n                .post(\"/rest/v4/test\", {\n                    test: \"value\",\n                })\n                .reply(202, null, { \"Content-Type\": \"application/json\" });\n\n            client.doPost(\"test\", { test: \"value\" }, {}, (err, body, res) => {\n                expect(err).to.be.undefined();\n                body.should.be.deep.equal(\"\");\n                res.status.should.be.equal(202);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPost} */\n        it(\"should return response if call was successful (without query parameters) and response body is empty no content type\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .matchHeader(\"Content-Type\", \"application/json\")\n                .post(\"/rest/v4/test\", {\n                    test: \"value\",\n                })\n                .reply(202);\n\n            client.doPost(\"test\", { test: \"value\" }, {}, (err, body, res) => {\n                expect(err).to.be.undefined();\n                body.should.be.deep.equal({});\n                res.status.should.be.equal(202);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPost} */\n        it(\"should return generic network error if no response was send by server\", (cb) => {\n            client.doPost(\"test\", { test: \"value\" }, {}, (err, body, res) => {\n                err.should.be.deep.equal([{\n                    message: \"Could not communicate with https://test-server\",\n                    code: \"COMMUNICATION_ERROR\",\n                }]);\n\n                expect(body).to.be.undefined();\n                expect(res).to.be.undefined();\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPost} */\n        it(\"should return error message if responses contains error\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .matchHeader(\"Content-Type\", \"application/json\")\n                .post(\"/rest/v4/test\", {\n                    test: \"value\",\n                })\n                .reply(404, {\n                    errors: [{\n                        message: \"message\",\n                        code: \"FORBIDDEN\",\n                        relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                            \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                    }],\n                }, { \"Content-Type\": \"application/json\" });\n\n            client.doPost(\"test\", { test: \"value\" }, {}, (err, body, res) => {\n                err.should.be.deep.equal([{\n                    message: \"message\",\n                    code: \"FORBIDDEN\",\n                    relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                        \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                }]);\n\n                body.should.be.deep.equal({\n                    errors: [{\n                        message: \"message\",\n                        code: \"FORBIDDEN\",\n                        relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                            \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                    }],\n                });\n\n                res.status.should.be.equal(404);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPost} */\n        it(\"should return error message from http status if empty error response\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .matchHeader(\"Content-Type\", \"application/json\")\n                .post(\"/rest/v4/test\", {\n                    test: \"value\",\n                })\n                .reply(404);\n\n            client.doPost(\"test\", { test: \"value\" }, {}, (err, body, res) => {\n                err.should.be.deep.equal([{\n                    message: \"Not Found\",\n                    code: \"404\",\n                }]);\n                body.should.be.deep.equal({});\n                res.status.should.be.equal(404);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPost} */\n        it(\"should return error message if response in unexpected format\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .matchHeader(\"Content-Type\", \"application/json\")\n                .post(\"/rest/v4/test\", {\n                    test: \"value\",\n                })\n                .reply(429, \"<html lang='en'><head><title>Request Rejected</title>\"\n                  + \"</head><body>The requested URL was rejected. Please consult with your administrator.</body></html>\",\n                { \"Content-Type\": \"text/html\" });\n\n            client.doPost(\"test\", { test: \"value\" }, {}, (err, body, res) => {\n                err.should.be.deep.equal([{\n                    message: \"Too Many Requests\",\n                    code: \"429\",\n                }]);\n                body.should.be.deep.equal({});\n                res.status.should.be.equal(429);\n                res.text.should.have.string(\"Request Rejected\");\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPost} */\n        it(\"should return error message if client using encryption and responses in application/json\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: clientPath,\n                hyperwalletKeySetPath: hwPath,\n            });\n\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/jose+json\")\n                .matchHeader(\"Content-Type\", \"application/jose+json\")\n                .post(\"/rest/v4/test\", /.+/)\n                .reply(404, {\n                    errors: [{\n                        message: \"message\",\n                        code: \"FORBIDDEN\",\n                        relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                            \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                    }],\n                }, { \"Content-Type\": \"application/json\" });\n\n            clientWithEncryption.doPost(\"test\", { test: \"value\" }, {}, (err, body, res) => {\n                err.should.be.deep.equal([{\n                    message: \"message\",\n                    code: \"FORBIDDEN\",\n                    relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                        \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                }]);\n\n                body.should.be.deep.equal({\n                    errors: [{\n                        message: \"message\",\n                        code: \"FORBIDDEN\",\n                        relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                            \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                    }],\n                });\n\n                res.status.should.be.equal(404);\n\n                cb();\n            });\n        });\n\n\n        /** @test {ApiClient#doPost} */\n        it(\"should return encrypted response if encrypted POST call was successful (without query parameters)\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: clientPath,\n                hyperwalletKeySetPath: hwPath,\n            });\n            const encryption = new Encryption(clientPath, hwPath);\n            const testMessage = {\n                message: \"Test message\",\n            };\n\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                nock(\"https://test-server\")\n                    .filteringPath(() => \"/\")\n                    .matchHeader(\"Authorization\", authHeader)\n                    .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                    .matchHeader(\"Accept\", \"application/jose+json\")\n                    .matchHeader(\"Content-Type\", \"application/jose+json\")\n                    .post(\"/\", /.+/)\n                    .reply(200, encryptedBody, {\n                        \"Content-Type\": \"application/jose+json\",\n                    });\n\n                clientWithEncryption.doPost(\"test\", { message: \"Test message\" }, {}, (err, body, res) => {\n                    expect(err).to.be.undefined();\n\n                    expect(res).to.not.be.undefined();\n\n                    body.should.be.deep.equal({\n                        message: \"Test message\",\n                    });\n\n                    cb();\n                });\n            });\n        });\n\n        /** @test {ApiClient#doPost} */\n        it(\"should return encrypted response if encrypted POST call was successful when content type contains charset\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: clientPath,\n                hyperwalletKeySetPath: hwPath,\n            });\n            const encryption = new Encryption(clientPath, hwPath);\n            const testMessage = {\n                message: \"Test message\",\n            };\n\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                nock(\"https://test-server\")\n                    .filteringPath(() => \"/\")\n                    .matchHeader(\"Authorization\", authHeader)\n                    .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                    .matchHeader(\"Accept\", \"application/jose+json\")\n                    .matchHeader(\"Content-Type\", \"application/jose+json\")\n                    .post(\"/\", /.+/)\n                    .reply(200, encryptedBody, {\n                        \"Content-Type\": \"application/jose+json;charset=utf-8\",\n                    });\n\n                clientWithEncryption.doPost(\"test\", { message: \"Test message\" }, {}, (err, body, res) => {\n                    expect(err).to.be.undefined();\n\n                    expect(res).to.not.be.undefined();\n\n                    body.should.be.deep.equal({\n                        message: \"Test message\",\n                    });\n\n                    cb();\n                });\n            });\n        });\n\n        /** @test {ApiClient#doPost} */\n        it(\"should not return error when encrypted response body is empty\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: clientPath,\n                hyperwalletKeySetPath: hwPath,\n            });\n            const encryption = new Encryption(clientPath, hwPath);\n            const testMessage = {\n                message: \"Test message\",\n            };\n\n            encryption.encrypt(testMessage).then(() => {\n                nock(\"https://test-server\")\n                    .filteringPath(() => \"/\")\n                    .matchHeader(\"Authorization\", authHeader)\n                    .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                    .matchHeader(\"Accept\", \"application/jose+json\")\n                    .matchHeader(\"Content-Type\", \"application/jose+json\")\n                    .post(\"/\", /.+/)\n                    .reply(200, null, {\n                        \"Content-Type\": \"application/jose+json\",\n                    });\n\n                clientWithEncryption.doPost(\"test\", { message: \"Test message\" }, {}, (err, body, res) => {\n                    expect(err).to.be.undefined();\n                    body.should.be.deep.equal(\"\");\n                    expect(res).to.not.be.undefined();\n\n                    cb();\n                });\n            });\n        });\n\n        /** @test {ApiClient#doPost} */\n        it(\"should return error when fail to encrypt POST request body\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: \"wrongPath\",\n                hyperwalletKeySetPath: hwPath,\n            });\n            const encryption = new Encryption(clientPath, hwPath);\n            const testMessage = {\n                message: \"Test message\",\n            };\n\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                nock(\"https://test-server\")\n                    .filteringPath(() => \"/\")\n                    .matchHeader(\"Authorization\", authHeader)\n                    .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                    .matchHeader(\"Accept\", \"application/json\")\n                    .matchHeader(\"Content-Type\", \"application/jose+json\")\n                    .post(\"/\", /.+/)\n                    .reply(201, encryptedBody);\n\n                clientWithEncryption.doPost(\"test\", { message: \"Test message\" }, {}, (err, body, res) => {\n                    expect(body).to.be.undefined();\n\n                    expect(res).to.be.undefined();\n\n                    err.should.be.deep.equal([{\n                        message: \"Failed to encrypt body for POST request\",\n                    }]);\n\n                    cb();\n                });\n            });\n        });\n    });\n\n    /** @test {ApiClient#doPut} */\n    describe(\"doPut()\", () => {\n        let client;\n        let authHeader;\n\n        before(() => {\n            nock.disableNetConnect();\n        });\n        after(() => {\n            nock.enableNetConnect();\n        });\n\n        beforeEach(() => {\n            client = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\");\n\n            authHeader = \"Basic dGVzdC11c2VybmFtZTp0ZXN0LXBhc3N3b3Jk\";\n        });\n        afterEach(() => {\n            nock.cleanAll();\n        });\n\n        /** @test {ApiClient#doPut} */\n        it(\"should return response if call was successful (with query parameters)\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .matchHeader(\"Content-Type\", \"application/json\")\n                .put(\"/rest/v4/test\", {\n                    test: \"value\",\n                })\n                .query({ sort: \"test\" })\n                .reply(200, { response: \"value\" }, { \"Content-Type\": \"application/json\" });\n\n            client.doPut(\"test\", { test: \"value\" }, { sort: \"test\" }, (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                body.should.be.deep.equal({\n                    response: \"value\",\n                });\n\n                res.status.should.be.equal(200);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPut} */\n        it(\"should return response if call was successful (with query parameters) when content type contains charset\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .matchHeader(\"Content-Type\", \"application/json\")\n                .put(\"/rest/v4/test\", {\n                    test: \"value\",\n                })\n                .query({ sort: \"test\" })\n                .reply(200, { response: \"value\" }, {\n                    \"Content-Type\": \"application/json;charset=utf-8\",\n                });\n\n            client.doPut(\"test\", { test: \"value\" }, { sort: \"test\" }, (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                body.should.be.deep.equal({\n                    response: \"value\",\n                });\n\n                res.status.should.be.equal(200);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPut} */\n        it(\"should return response if call was successful (with query parameters) when content type contains charset ahead\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .matchHeader(\"Content-Type\", \"application/json\")\n                .put(\"/rest/v4/test\", {\n                    test: \"value\",\n                })\n                .query({ sort: \"test\" })\n                .reply(200, { response: \"value\" }, {\n                    \"Content-Type\": \"charset=utf-8;application/json\",\n                });\n\n            client.doPut(\"test\", { test: \"value\" }, { sort: \"test\" }, (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                JSON.parse(body.toString(\"utf8\")).should.be.deep.equal({\n                    response: \"value\",\n                });\n\n                res.status.should.be.equal(200);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPut} */\n        it(\"should return response if call was successful (without query parameters)\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .matchHeader(\"Content-Type\", \"application/json\")\n                .put(\"/rest/v4/test\", {\n                    test: \"value\",\n                })\n                .reply(200, { response: \"value\" }, { \"Content-Type\": \"application/json\" });\n\n            client.doPut(\"test\", { test: \"value\" }, {}, (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                body.should.be.deep.equal({\n                    response: \"value\",\n                });\n\n                res.status.should.be.equal(200);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPut} */\n        it(\"should return response if call was successful (without query parameters) and response body is empty\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .matchHeader(\"Content-Type\", \"application/json\")\n                .put(\"/rest/v4/test\", {\n                    test: \"value\",\n                })\n                .reply(202, null, { \"Content-Type\": \"application/json\" });\n\n            client.doPut(\"test\", { test: \"value\" }, {}, (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                body.should.be.deep.equal(\"\");\n\n                res.status.should.be.equal(202);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPut} */\n        it(\"should return response if call was successful (without query parameters) and response body is empty no content-type\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .matchHeader(\"Content-Type\", \"application/json\")\n                .put(\"/rest/v4/test\", {\n                    test: \"value\",\n                })\n                .reply(202);\n\n            client.doPut(\"test\", { test: \"value\" }, {}, (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                body.should.be.deep.equal({});\n\n                res.status.should.be.equal(202);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPut} */\n        it(\"should return generic network error if no response was send by server\", (cb) => {\n            client.doPut(\"test\", { test: \"value\" }, {}, (err, body, res) => {\n                err.should.be.deep.equal([{\n                    message: \"Could not communicate with https://test-server\",\n                    code: \"COMMUNICATION_ERROR\",\n                }]);\n\n                expect(body).to.be.undefined();\n                expect(res).to.be.undefined();\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPut} */\n        it(\"should return error message if responses contains error\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .matchHeader(\"Content-Type\", \"application/json\")\n                .put(\"/rest/v4/test\", {\n                    test: \"value\",\n                })\n                .reply(404, {\n                    errors: [{\n                        message: \"message\",\n                        code: \"FORBIDDEN\",\n                        relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                            \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                    }],\n                }, { \"Content-Type\": \"application/json\" });\n\n            client.doPut(\"test\", { test: \"value\" }, {}, (err, body, res) => {\n                err.should.be.deep.equal([{\n                    message: \"message\",\n                    code: \"FORBIDDEN\",\n                    relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                        \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                }]);\n\n                body.should.be.deep.equal({\n                    errors: [{\n                        message: \"message\",\n                        code: \"FORBIDDEN\",\n                        relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                            \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                    }],\n                });\n\n                res.status.should.be.equal(404);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPut} */\n        it(\"should return error message from http status if empty error response\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .matchHeader(\"Content-Type\", \"application/json\")\n                .put(\"/rest/v4/test\", {\n                    test: \"value\",\n                })\n                .reply(400);\n\n            client.doPut(\"test\", { test: \"value\" }, {}, (err, body, res) => {\n                err.should.be.deep.equal([{\n                    message: \"Bad Request\",\n                    code: \"400\",\n                }]);\n                body.should.be.deep.equal({});\n                res.status.should.be.equal(400);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPut} */\n        it(\"should return error message if responses in unexpected format\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .matchHeader(\"Content-Type\", \"application/json\")\n                .put(\"/rest/v4/test\", {\n                    test: \"value\",\n                })\n                .reply(429, \"<html lang='en'><head><title>Request Rejected</title>\"\n                + \"</head><body>The requested URL was rejected. Please consult with your administrator.</body></html>\",\n                { \"Content-Type\": \"text/html\" });\n\n            client.doPut(\"test\", { test: \"value\" }, {}, (err, body, res) => {\n                err.should.be.deep.equal([{\n                    message: \"Too Many Requests\",\n                    code: \"429\",\n                }]);\n                body.should.be.deep.equal({});\n                res.status.should.be.equal(429);\n                res.text.should.have.string(\"Request Rejected\");\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPut} */\n        it(\"should return error message if client using encryption and responses in application/json\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: clientPath,\n                hyperwalletKeySetPath: hwPath,\n            });\n\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/jose+json\")\n                .matchHeader(\"Content-Type\", \"application/jose+json\")\n                .put(\"/rest/v4/test\", /.+/)\n                .reply(404, {\n                    errors: [{\n                        message: \"message\",\n                        code: \"FORBIDDEN\",\n                        relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                            \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                    }],\n                }, { \"Content-Type\": \"application/json\" });\n\n            clientWithEncryption.doPut(\"test\", { test: \"value\" }, {}, (err, body, res) => {\n                err.should.be.deep.equal([{\n                    message: \"message\",\n                    code: \"FORBIDDEN\",\n                    relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                        \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                }]);\n\n                body.should.be.deep.equal({\n                    errors: [{\n                        message: \"message\",\n                        code: \"FORBIDDEN\",\n                        relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                            \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                    }],\n                });\n\n                res.status.should.be.equal(404);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPut} */\n        it(\"should return encrypted response if encrypted PUT call was successful (without query parameters)\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: clientPath,\n                hyperwalletKeySetPath: hwPath,\n            });\n            const encryption = new Encryption(clientPath, hwPath);\n            const testMessage = {\n                message: \"Test message\",\n            };\n\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                nock(\"https://test-server\")\n                    .filteringPath(() => \"/\")\n                    .matchHeader(\"Authorization\", authHeader)\n                    .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                    .matchHeader(\"Accept\", \"application/jose+json\")\n                    .matchHeader(\"Content-Type\", \"application/jose+json\")\n                    .put(\"/\", /.+/)\n                    .reply(201, encryptedBody, { \"Content-Type\": \"application/jose+json\" });\n\n                clientWithEncryption.doPut(\"test\", { message: \"Test message\" }, {}, (err, body, res) => {\n                    expect(err).to.be.undefined();\n\n                    expect(res).to.not.be.undefined();\n\n                    body.should.be.deep.equal({\n                        message: \"Test message\",\n                    });\n\n                    cb();\n                });\n            });\n        });\n\n        /** @test {ApiClient#doPut} */\n        it(\"should return encrypted response if encrypted PUT call was successful when content type contains charset\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: clientPath,\n                hyperwalletKeySetPath: hwPath,\n            });\n            const encryption = new Encryption(clientPath, hwPath);\n            const testMessage = {\n                message: \"Test message\",\n            };\n\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                nock(\"https://test-server\")\n                    .filteringPath(() => \"/\")\n                    .matchHeader(\"Authorization\", authHeader)\n                    .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                    .matchHeader(\"Accept\", \"application/jose+json\")\n                    .matchHeader(\"Content-Type\", \"application/jose+json\")\n                    .put(\"/\", /.+/)\n                    .reply(201, encryptedBody, {\n                        \"Content-Type\": \"application/jose+json;charset=utf-8\",\n                    });\n\n                clientWithEncryption.doPut(\"test\", { message: \"Test message\" }, {}, (err, body, res) => {\n                    expect(err).to.be.undefined();\n\n                    expect(res).to.not.be.undefined();\n\n                    body.should.be.deep.equal({\n                        message: \"Test message\",\n                    });\n\n                    cb();\n                });\n            });\n        });\n\n        /** @test {ApiClient#doPut} */\n        it(\"should not return error response if encrypted PUT call was successful and response body is empty\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: clientPath,\n                hyperwalletKeySetPath: hwPath,\n            });\n\n            nock(\"https://test-server\")\n                .filteringPath(() => \"/\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/jose+json\")\n                .matchHeader(\"Content-Type\", \"application/jose+json\")\n                .put(\"/\", /.+/)\n                .reply(201, null, {\n                    \"Content-Type\": \"application/jose+json;\",\n                });\n\n            clientWithEncryption.doPut(\"test\", { message: \"Test message\" }, {}, (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                expect(res).to.not.be.undefined();\n\n                body.should.be.deep.equal(\"\");\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPut} */\n        it(\"should return error when fail to encrypt PUT request body\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: \"wrongPath\",\n                hyperwalletKeySetPath: hwPath,\n            });\n            const encryption = new Encryption(clientPath, hwPath);\n            const testMessage = {\n                message: \"Test message\",\n            };\n\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                nock(\"https://test-server\")\n                    .filteringPath(() => \"/\")\n                    .matchHeader(\"Authorization\", authHeader)\n                    .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                    .matchHeader(\"Accept\", \"application/json\")\n                    .matchHeader(\"Content-Type\", \"application/jose+json\")\n                    .put(\"/\", /.+/)\n                    .reply(201, encryptedBody);\n\n                clientWithEncryption.doPut(\"test\", { message: \"Test message\" }, {}, (err, body, res) => {\n                    expect(body).to.be.undefined();\n\n                    expect(res).to.be.undefined();\n\n                    err.should.be.deep.equal([{\n                        message: \"Failed to encrypt body for PUT request\",\n                    }]);\n\n                    cb();\n                });\n            });\n        });\n\n        /** @test {ApiClient#doPut} */\n        it(\"should return error when fail to decrypt PUT response body\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1-wrong-jwe\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: clientPath,\n                hyperwalletKeySetPath: hwPath,\n            });\n            const encryption = new Encryption(clientPath, hwPath);\n            const testMessage = {\n                message: \"Test message\",\n            };\n\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                nock(\"https://test-server\")\n                    .filteringPath(() => \"/\")\n                    .matchHeader(\"Authorization\", authHeader)\n                    .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                    .matchHeader(\"Accept\", \"application/jose+json\")\n                    .matchHeader(\"Content-Type\", \"application/jose+json\")\n                    .put(\"/\", /.+/)\n                    .reply(201, encryptedBody, { \"Content-Type\": \"application/jose+json\" });\n\n                clientWithEncryption.doPut(\"test\", { message: \"Test message\" }, {}, (err, body, res) => {\n                    err.should.be.deep.equal([{\n                        message: \"Failed to decrypt response for PUT request\",\n                    }]);\n\n                    expect(body).to.not.be.undefined();\n\n                    expect(res).to.not.be.undefined();\n\n                    cb();\n                });\n            });\n        });\n\n        /** @test {ApiClient#doPut} */\n        it(\"should return error when server responses with error on encrypted PUT request\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: clientPath,\n                hyperwalletKeySetPath: hwPath,\n            });\n            const encryption = new Encryption(clientPath, hwPath);\n            const errorMessage = {\n                errors: [\n                    \"test1\",\n                    \"test2\",\n                ],\n            };\n\n            encryption.encrypt(errorMessage).then((encryptedBody) => {\n                nock(\"https://test-server\")\n                    .filteringPath(() => \"/\")\n                    .matchHeader(\"Authorization\", authHeader)\n                    .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                    .matchHeader(\"Accept\", \"application/jose+json\")\n                    .matchHeader(\"Content-Type\", \"application/jose+json\")\n                    .put(\"/\", /.+/)\n                    .reply(404, encryptedBody, { \"Content-Type\": \"application/jose+json\" });\n\n                clientWithEncryption.doPut(\"test\", { message: \"Test message\" }, {}, (err, body, res) => {\n                    err.should.be.deep.equal([\n                        \"test1\",\n                        \"test2\",\n                    ]);\n\n                    body.should.be.deep.equal({\n                        errors: [\n                            \"test1\",\n                            \"test2\",\n                        ],\n                    });\n\n                    res.should.be.deep.equal({\n                        body: {\n                            errors: [\n                                \"test1\",\n                                \"test2\",\n                            ],\n                        },\n                    });\n\n                    cb();\n                });\n            });\n        });\n    });\n\n    /** @test {ApiClient#doPutMultipart} */\n    describe(\"doPutMultipart()\", () => {\n        let client;\n        let authHeader;\n\n        before(() => {\n            nock.disableNetConnect();\n        });\n        after(() => {\n            nock.enableNetConnect();\n        });\n\n        beforeEach(() => {\n            client = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\");\n\n            authHeader = \"Basic dGVzdC11c2VybmFtZTp0ZXN0LXBhc3N3b3Jk\";\n        });\n        afterEach(() => {\n            nock.cleanAll();\n        });\n        const testFile1 = path.join(__dirname, \"..\", \"resources\", \"TestFile1.png\");\n        const documents = {\n            documents: [{\n                type: \"DRIVERS_LICENSE\",\n                country: \"US\",\n                category: \"IDENTIFICATION\",\n            }],\n        };\n        const data = {\n            data: JSON.stringify(documents),\n            drivers_license_front: testFile1,\n        };\n\n        /** @test {ApiClient#doPutMultipart} */\n        it(\"should return error response for call\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                // .matchHeader(\"Content-Type\", \"multipart/form-data\")\n                .put(\"/rest/v4/testmultipart\", /.+/)\n                .reply(400, {\n                    errors: [{\n                        message: \"message\",\n                        code: \"FORBIDDEN\",\n                    }],\n                }, { \"Content-Type\": \"application/json\" });\n\n            client.doPutMultipart(\"testmultipart\", data, (err, body, res) => {\n                err.should.be.deep.equal([{\n                    message: \"message\",\n                    code: \"FORBIDDEN\",\n                }]);\n                body.should.be.deep.equal({\n                    errors: [{\n                        message: \"message\",\n                        code: \"FORBIDDEN\",\n                    }],\n                });\n                res.status.should.be.equal(400);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPutMultipart} */\n        xit(\"should return generic network error if no response was sent by server\", (cb) => {\n            client.doPut(\"test\", { test: \"value\" }, {}, (err, body, res) => {\n                err.should.be.deep.equal([{\n                    message: \"Could not communicate with https://test-server\",\n                    code: \"COMMUNICATION_ERROR\",\n                }]);\n\n                expect(body).to.be.undefined();\n                expect(res).to.be.undefined();\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doPutMultipart} */\n        xit(\"should return error when fail to encrypt PUT request body\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: \"wrongPath\",\n                hyperwalletKeySetPath: hwPath,\n            });\n            const encryption = new Encryption(clientPath, hwPath);\n            const testMessage = {\n                message: \"Test message\",\n            };\n\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                nock(\"https://test-server\")\n                    .filteringPath(() => \"/\")\n                    .matchHeader(\"Authorization\", authHeader)\n                    .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                    .matchHeader(\"Accept\", \"application/json\")\n                    .matchHeader(\"Content-Type\", \"multipart/form-data\")\n                    .put(\"/\", /.+/)\n                    .reply(201, encryptedBody, { \"Content-Type\": \"application/jose+json\" });\n\n                clientWithEncryption.doPutMultipart(\"test\", { message: \"Test message\" }, (err, body, res) => {\n                    expect(err).to.be.undefined();\n                    expect(body).to.be.undefined();\n\n                    expect(res).to.be.undefined();\n                    cb();\n                });\n            });\n        });\n    });\n\n    /** @test {ApiClient#doGet} */\n    describe(\"doGet()\", () => {\n        let client;\n        let authHeader;\n\n        before(() => {\n            nock.disableNetConnect();\n        });\n        after(() => {\n            nock.enableNetConnect();\n        });\n\n        beforeEach(() => {\n            client = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\");\n\n            authHeader = \"Basic dGVzdC11c2VybmFtZTp0ZXN0LXBhc3N3b3Jk\";\n        });\n        afterEach(() => {\n            nock.cleanAll();\n        });\n\n        /** @test {ApiClient#doGet} */\n        it(\"should return response if call was successful (with query parameters)\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .get(\"/rest/v4/test\")\n                .query({ sort: \"test\" })\n                .reply(200, { response: \"value\" }, { \"Content-Type\": \"application/json\" });\n\n            client.doGet(\"test\", { sort: \"test\" }, (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                body.should.be.deep.equal({\n                    response: \"value\",\n                });\n\n                res.status.should.be.equal(200);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doGet} */\n        it(\"should return response if call was successful (with query parameters) and response body is empty\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .get(\"/rest/v4/test\")\n                .query({ sort: \"test\" })\n                .reply(202, null, {\n                    \"Content-Type\": \"application/json\",\n                });\n\n            client.doGet(\"test\", { sort: \"test\" }, (err, body, res) => {\n                expect(err).to.be.undefined();\n                body.should.be.deep.equal(\"\");\n                res.status.should.be.equal(202);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doGet} */\n        it(\"should return response if call was successful (with query parameters) and response body is empty no content-type\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .get(\"/rest/v4/test\")\n                .query({ sort: \"test\" })\n                .reply(202);\n\n            client.doGet(\"test\", { sort: \"test\" }, (err, body, res) => {\n                expect(err).to.be.undefined();\n                body.should.be.deep.equal({});\n                res.status.should.be.equal(202);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doGet} */\n        it(\"should return response if call was successful (with query parameters) when content type contains charset\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .get(\"/rest/v4/test\")\n                .query({ sort: \"test\" })\n                .reply(200, { response: \"value\" }, {\n                    \"Content-Type\": \"application/json;charset=utf-8\",\n                });\n\n            client.doGet(\"test\", { sort: \"test\" }, (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                body.should.be.deep.equal({\n                    response: \"value\",\n                });\n\n                res.status.should.be.equal(200);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doGet} */\n        it(\"should return response if call was successful (with query parameters) when content type contains charset ahead\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .get(\"/rest/v4/test\")\n                .query({ sort: \"test\" })\n                .reply(200, { response: \"value\" }, {\n                    \"Content-Type\": \"charset=utf-8;application/json\",\n                });\n\n            client.doGet(\"test\", { sort: \"test\" }, (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                JSON.parse(body.toString(\"utf8\")).should.be.deep.equal({\n                    response: \"value\",\n                });\n\n                res.status.should.be.equal(200);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doGet} */\n        it(\"should return response if call was successful (without query parameters)\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .get(\"/rest/v4/test\")\n                .reply(200, { response: \"value\" }, { \"Content-Type\": \"application/json\" });\n\n            client.doGet(\"test\", {}, (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                body.should.be.deep.equal({\n                    response: \"value\",\n                });\n\n                res.status.should.be.equal(200);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doGet} */\n        it(\"should return generic network error if no response was send by server\", (cb) => {\n            client.doGet(\"test\", {}, (err, body, res) => {\n                err.should.be.deep.equal([{\n                    message: \"Could not communicate with https://test-server\",\n                    code: \"COMMUNICATION_ERROR\",\n                }]);\n\n                expect(body).to.be.undefined();\n                expect(res).to.be.undefined();\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doGet} */\n        it(\"should return error message if responses contains error\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .get(\"/rest/v4/test\")\n                .reply(404, {\n                    errors: [{\n                        message: \"message\",\n                        code: \"FORBIDDEN\",\n                        relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                            \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                    }],\n                }, { \"Content-Type\": \"application/json\" });\n\n            client.doGet(\"test\", {}, (err, body, res) => {\n                err.should.be.deep.equal([{\n                    message: \"message\",\n                    code: \"FORBIDDEN\",\n                    relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                        \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                }]);\n\n                body.should.be.deep.equal({\n                    errors: [{\n                        message: \"message\",\n                        code: \"FORBIDDEN\",\n                        relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                            \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                    }],\n                });\n\n                res.status.should.be.equal(404);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doGet} */\n        it(\"should return error message from http status if empty error response\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .get(\"/rest/v4/test\")\n                .reply(500);\n\n            client.doGet(\"test\", {}, (err, body, res) => {\n                err.should.be.deep.equal([{\n                    message: \"Internal Server Error\",\n                    code: \"500\",\n                }]);\n                body.should.be.deep.equal({});\n                res.status.should.be.equal(500);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doGet} */\n        it(\"should return error message if responses in unexpected format\", (cb) => {\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/json\")\n                .get(\"/rest/v4/test\")\n                .reply(429, \"<html lang='en'><head><title>Request Rejected</title>\"\n              + \"</head><body>The requested URL was rejected. Please consult with your administrator.</body></html>\",\n                { \"Content-Type\": \"text/html\" });\n\n            client.doGet(\"test\", {}, (err, body, res) => {\n                err.should.be.deep.equal([{\n                    message: \"Too Many Requests\",\n                    code: \"429\",\n                }]);\n                body.should.be.deep.equal({});\n                res.status.should.be.equal(429);\n                res.text.should.have.string(\"Request Rejected\");\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doGet} */\n        it(\"should return error message if client using encryption and responses in application/json\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: clientPath,\n                hyperwalletKeySetPath: hwPath,\n            });\n\n            nock(\"https://test-server\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/jose+json\")\n                .get(\"/rest/v4/test\")\n                .reply(404, {\n                    errors: [{\n                        message: \"message\",\n                        code: \"FORBIDDEN\",\n                        relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                            \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                    }],\n                }, { \"Content-Type\": \"application/json\" });\n\n            clientWithEncryption.doGet(\"test\", {}, (err, body, res) => {\n                err.should.be.deep.equal([{\n                    message: \"message\",\n                    code: \"FORBIDDEN\",\n                    relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                        \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                }]);\n\n                body.should.be.deep.equal({\n                    errors: [{\n                        message: \"message\",\n                        code: \"FORBIDDEN\",\n                        relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                            \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                    }],\n                });\n\n                res.status.should.be.equal(404);\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doGet} */\n        it(\"should return encrypted response if encrypted GET call was successful (without query parameters)\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: clientPath,\n                hyperwalletKeySetPath: hwPath,\n            });\n            const encryption = new Encryption(clientPath, hwPath);\n            const testMessage = {\n                message: \"Test message\",\n            };\n\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                nock(\"https://test-server\")\n                    .filteringPath(() => \"/\")\n                    .matchHeader(\"Authorization\", authHeader)\n                    .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                    .matchHeader(\"Accept\", \"application/jose+json\")\n                    .get(\"/\")\n                    .reply(200, encryptedBody, { \"Content-Type\": \"application/jose+json\" });\n\n                clientWithEncryption.doGet(\"test\", {}, (err, body, res) => {\n                    expect(err).to.be.undefined();\n\n                    expect(res).to.not.be.undefined();\n\n                    body.should.be.deep.equal({\n                        message: \"Test message\",\n                    });\n\n                    cb();\n                });\n            });\n        });\n\n        /** @test {ApiClient#doGet} */\n        it(\"should return encrypted response if encrypted GET call was successful when content type contains charset\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: clientPath,\n                hyperwalletKeySetPath: hwPath,\n            });\n            const encryption = new Encryption(clientPath, hwPath);\n            const testMessage = {\n                message: \"Test message\",\n            };\n\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                nock(\"https://test-server\")\n                    .filteringPath(() => \"/\")\n                    .matchHeader(\"Authorization\", authHeader)\n                    .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                    .matchHeader(\"Accept\", \"application/jose+json\")\n                    .get(\"/\")\n                    .reply(200, encryptedBody, {\n                        \"Content-Type\": \"application/jose+json;charset=utf-8\",\n                    });\n\n                clientWithEncryption.doGet(\"test\", {}, (err, body, res) => {\n                    expect(err).to.be.undefined();\n\n                    expect(res).to.not.be.undefined();\n\n                    body.should.be.deep.equal({\n                        message: \"Test message\",\n                    });\n\n                    cb();\n                });\n            });\n        });\n\n        /** @test {ApiClient#doGet} */\n        it(\"should return response if call was successful (with query parameters and encryption) and response body is empty\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: clientPath,\n                hyperwalletKeySetPath: hwPath,\n            });\n\n            nock(\"https://test-server\")\n                .filteringPath(() => \"/\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/jose+json\")\n                .get(\"/\")\n                .reply(202, null, {\n                    \"Content-Type\": \"application/jose+json\",\n                });\n\n            clientWithEncryption.doGet(\"test\", {}, (err, body, res) => {\n                expect(err).to.be.undefined();\n                expect(res).to.not.be.undefined();\n                body.should.be.deep.equal(\"\");\n\n                cb();\n            });\n        });\n\n        /** @test {ApiClient#doGet} */\n        it(\"should return response if call was successful (with query parameters and encryption) and response body is empty no content-type\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: clientPath,\n                hyperwalletKeySetPath: hwPath,\n            });\n\n            nock(\"https://test-server\")\n                .filteringPath(() => \"/\")\n                .matchHeader(\"Authorization\", authHeader)\n                .matchHeader(\"User-Agent\", `Hyperwallet Node SDK v${packageJson.version}`)\n                .matchHeader(\"Accept\", \"application/jose+json\")\n                .get(\"/\")\n                .reply(202);\n\n            clientWithEncryption.doGet(\"test\", {}, (err, body, res) => {\n                expect(err).to.be.undefined();\n                expect(res).to.not.be.undefined();\n                body.should.be.deep.equal({});\n\n                cb();\n            });\n        });\n    });\n\n    describe(\"wrapCallback()\", () => {\n        it(\"should return a 'function' without a argument\", () => {\n            const client = new ApiClient(\"test-username\", \"test-password\", \"test-server\");\n\n            client.wrapCallback().should.be.a(\"function\");\n        });\n\n        it(\"should return a 'function' with a argument\", () => {\n            const client = new ApiClient(\"test-username\", \"test-password\", \"test-server\");\n\n            client.wrapCallback(() => null).should.be.a(\"function\");\n        });\n\n        it(\"should be able to run without any arguments\", () => {\n            const client = new ApiClient(\"test-username\", \"test-password\", \"test-server\");\n            client.wrapCallback()(new Error());\n        });\n\n        it(\"should call callback with 'body' and 'res' if no error happened\", (cb) => {\n            const client = new ApiClient(\"test-username\", \"test-password\", \"test-server\");\n\n            const rawRes = {\n                body: \"test\",\n                status: 200,\n                header: {\n                    \"content-type\": \"application/json\",\n                },\n            };\n\n            const callback = client.wrapCallback(\"POST\", (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                body.should.be.equal(\"test\");\n                rawRes.should.be.deep.equal(res);\n\n                cb();\n            });\n            callback(undefined, rawRes);\n        });\n\n        it(\"should call callback with 'errors', 'body' and 'res' if 'body' contains errors\", (cb) => {\n            const client = new ApiClient(\"test-username\", \"test-password\", \"test-server\");\n\n            const rawRes = {\n                body: {\n                    errors: [{\n                        message: \"message\",\n                        code: \"FORBIDDEN\",\n                        relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                            \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                    }],\n                },\n                status: 404,\n                header: {\n                    \"content-type\": \"application/json\",\n                },\n            };\n\n            const callback = client.wrapCallback(\"POST\", (err, body, res) => {\n                err.should.be.deep.equal([{\n                    message: \"message\",\n                    code: \"FORBIDDEN\",\n                    relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                        \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                }]);\n                body.should.be.deep.equal({\n                    errors: [{\n                        message: \"message\",\n                        code: \"FORBIDDEN\",\n                        relatedResources: [\"trm-f3d38df1-adb7-4127-9858-e72ebe682a79\",\n                            \"trm-601b1401-4464-4f3f-97b3-09079ee7723b\"],\n                    }],\n                });\n                rawRes.should.be.deep.equal(res);\n\n                cb();\n            });\n            callback(new Error(), rawRes);\n        });\n\n        it(\"should call callback with static error message as 'errors', 'body' and 'res' if 'body' contains no errors\", (cb) => {\n            const client = new ApiClient(\"test-username\", \"test-password\", \"test-server\");\n\n            const rawRes = {\n                body: \"test\",\n                status: 404,\n                header: {\n                    \"content-type\": \"application/json\",\n                },\n            };\n\n            const callback = client.wrapCallback(\"POST\", (err, body, res) => {\n                err.should.be.deep.equal([{\n                    message: \"Could not communicate with test-server\",\n                    code: \"COMMUNICATION_ERROR\",\n                }]);\n                body.should.be.equal(\"test\");\n                rawRes.should.be.deep.equal(res);\n\n                cb();\n            });\n            callback(new Error(), rawRes);\n        });\n\n        it(\"should call callback with 'body' and 'res' and application/jose+json Content-Type\", (cb) => {\n            const clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            const hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            const clientWithEncryption = new ApiClient(\"test-username\", \"test-password\", \"https://test-server\", {\n                clientPrivateKeySetPath: clientPath,\n                hyperwalletKeySetPath: hwPath,\n            });\n\n            const encryption = new Encryption(clientPath, hwPath);\n            const testMessage = {\n                message: \"Test message\",\n            };\n\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                const callback = clientWithEncryption.wrapCallback(\"POST\", (err, body, res) => {\n                    expect(err).to.be.undefined();\n                    expect(res).not.to.be.undefined();\n                    body.should.be.deep.equal(testMessage);\n\n                    cb();\n                });\n                const rawRes = {\n                    body: encryptedBody,\n                    status: 200,\n                    header: {\n                        \"content-type\": \"application/jose+json\",\n                    },\n                };\n                callback(undefined, rawRes);\n            });\n        });\n\n        it(\"should call callback with static error message as 'errors', when Content-Type is wrong\", (cb) => {\n            const client = new ApiClient(\"test-username\", \"test-password\", \"test-server\");\n\n            const rawRes = {\n                body: \"test\",\n                status: 200,\n                header: {\n                    \"content-type\": \"wrongContentType\",\n                },\n            };\n\n            const callback = client.wrapCallback(\"POST\", (err, body, res) => {\n                err.should.be.deep.equal([{\n                    message: \"Invalid Content-Type specified in Response Header\",\n                }]);\n                body.should.be.equal(\"test\");\n                rawRes.should.be.deep.equal(res);\n\n                cb();\n            });\n            callback(undefined, rawRes);\n        });\n\n        it(\"should call callback with no errors if Content-type is missing and response is noContent\", (cb) => {\n            const client = new ApiClient(\"test-username\", \"test-password\", \"test-server\");\n\n            const rawRes = {\n                body: \"test\",\n                status: 204,\n                header: {\n                },\n            };\n\n            const callback = client.wrapCallback(\"POST\", (err, body, res) => {\n                expect(err).to.be.undefined();\n\n                body.should.be.equal(\"test\");\n                rawRes.should.be.deep.equal(res);\n\n                cb();\n            });\n            callback(undefined, rawRes);\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/node-sdk/node-sdk/test/utils/ApiClient.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 705,
    "kind": "test",
    "name": "describe489",
    "testId": 489,
    "memberof": "test/utils/ApiClient.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489",
    "access": null,
    "description": "utils/ApiClient",
    "lineNumber": 15,
    "testTargets": [
      "ApiClient"
    ]
  },
  {
    "__docId__": 706,
    "kind": "test",
    "name": "describe490",
    "testId": 490,
    "memberof": "test/utils/ApiClient.spec.js~describe489",
    "testDepth": 1,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe490",
    "access": null,
    "description": "constructor()",
    "lineNumber": 17,
    "testTargets": [
      "ApiClient#constructor"
    ]
  },
  {
    "__docId__": 707,
    "kind": "test",
    "name": "it491",
    "testId": 491,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe490",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe490.it491",
    "access": null,
    "description": "should set provided values as private members",
    "lineNumber": 19,
    "testTargets": [
      "ApiClient#constructor"
    ]
  },
  {
    "__docId__": 708,
    "kind": "test",
    "name": "it492",
    "testId": 492,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe490",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe490.it492",
    "access": null,
    "description": "should set the version to package.json version",
    "lineNumber": 28,
    "testTargets": [
      "ApiClient#constructor"
    ]
  },
  {
    "__docId__": 709,
    "kind": "test",
    "name": "describe493",
    "testId": 493,
    "memberof": "test/utils/ApiClient.spec.js~describe489",
    "testDepth": 1,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe493",
    "access": null,
    "description": "doPost()",
    "lineNumber": 35,
    "testTargets": [
      "ApiClient#doPost"
    ]
  },
  {
    "__docId__": 710,
    "kind": "test",
    "name": "it494",
    "testId": 494,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe493",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe493.it494",
    "access": null,
    "description": "should return response if call was successful (with query parameters)",
    "lineNumber": 56,
    "testTargets": [
      "ApiClient#doPost"
    ]
  },
  {
    "__docId__": 711,
    "kind": "test",
    "name": "it495",
    "testId": 495,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe493",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe493.it495",
    "access": null,
    "description": "should return response if call was successful (with query parameters) when content type contains charset",
    "lineNumber": 82,
    "testTargets": [
      "ApiClient#doPost"
    ]
  },
  {
    "__docId__": 712,
    "kind": "test",
    "name": "it496",
    "testId": 496,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe493",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe493.it496",
    "access": null,
    "description": "should return response if call was successful (with query parameters) when content type contains charset ahead",
    "lineNumber": 110,
    "testTargets": [
      "ApiClient#doPost"
    ]
  },
  {
    "__docId__": 713,
    "kind": "test",
    "name": "it497",
    "testId": 497,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe493",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe493.it497",
    "access": null,
    "description": "should return response if call was successful (without query parameters)",
    "lineNumber": 138,
    "testTargets": [
      "ApiClient#doPost"
    ]
  },
  {
    "__docId__": 714,
    "kind": "test",
    "name": "it498",
    "testId": 498,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe493",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe493.it498",
    "access": null,
    "description": "should return response if call was successful (without query parameters) and response body is empty",
    "lineNumber": 163,
    "testTargets": [
      "ApiClient#doPost"
    ]
  },
  {
    "__docId__": 715,
    "kind": "test",
    "name": "it499",
    "testId": 499,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe493",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe493.it499",
    "access": null,
    "description": "should return response if call was successful (without query parameters) and response body is empty no content type",
    "lineNumber": 184,
    "testTargets": [
      "ApiClient#doPost"
    ]
  },
  {
    "__docId__": 716,
    "kind": "test",
    "name": "it500",
    "testId": 500,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe493",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe493.it500",
    "access": null,
    "description": "should return generic network error if no response was send by server",
    "lineNumber": 205,
    "testTargets": [
      "ApiClient#doPost"
    ]
  },
  {
    "__docId__": 717,
    "kind": "test",
    "name": "it501",
    "testId": 501,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe493",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe493.it501",
    "access": null,
    "description": "should return error message if responses contains error",
    "lineNumber": 220,
    "testTargets": [
      "ApiClient#doPost"
    ]
  },
  {
    "__docId__": 718,
    "kind": "test",
    "name": "it502",
    "testId": 502,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe493",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe493.it502",
    "access": null,
    "description": "should return error message from http status if empty error response",
    "lineNumber": 262,
    "testTargets": [
      "ApiClient#doPost"
    ]
  },
  {
    "__docId__": 719,
    "kind": "test",
    "name": "it503",
    "testId": 503,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe493",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe493.it503",
    "access": null,
    "description": "should return error message if response in unexpected format",
    "lineNumber": 286,
    "testTargets": [
      "ApiClient#doPost"
    ]
  },
  {
    "__docId__": 720,
    "kind": "test",
    "name": "it504",
    "testId": 504,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe493",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe493.it504",
    "access": null,
    "description": "should return error message if client using encryption and responses in application/json",
    "lineNumber": 312,
    "testTargets": [
      "ApiClient#doPost"
    ]
  },
  {
    "__docId__": 721,
    "kind": "test",
    "name": "it505",
    "testId": 505,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe493",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe493.it505",
    "access": null,
    "description": "should return encrypted response if encrypted POST call was successful (without query parameters)",
    "lineNumber": 360,
    "testTargets": [
      "ApiClient#doPost"
    ]
  },
  {
    "__docId__": 722,
    "kind": "test",
    "name": "it506",
    "testId": 506,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe493",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe493.it506",
    "access": null,
    "description": "should return encrypted response if encrypted POST call was successful when content type contains charset",
    "lineNumber": 399,
    "testTargets": [
      "ApiClient#doPost"
    ]
  },
  {
    "__docId__": 723,
    "kind": "test",
    "name": "it507",
    "testId": 507,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe493",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe493.it507",
    "access": null,
    "description": "should not return error when encrypted response body is empty",
    "lineNumber": 438,
    "testTargets": [
      "ApiClient#doPost"
    ]
  },
  {
    "__docId__": 724,
    "kind": "test",
    "name": "it508",
    "testId": 508,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe493",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe493.it508",
    "access": null,
    "description": "should return error when fail to encrypt POST request body",
    "lineNumber": 473,
    "testTargets": [
      "ApiClient#doPost"
    ]
  },
  {
    "__docId__": 725,
    "kind": "test",
    "name": "describe509",
    "testId": 509,
    "memberof": "test/utils/ApiClient.spec.js~describe489",
    "testDepth": 1,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe509",
    "access": null,
    "description": "doPut()",
    "lineNumber": 511,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 726,
    "kind": "test",
    "name": "it510",
    "testId": 510,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe509",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe509.it510",
    "access": null,
    "description": "should return response if call was successful (with query parameters)",
    "lineNumber": 532,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 727,
    "kind": "test",
    "name": "it511",
    "testId": 511,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe509",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe509.it511",
    "access": null,
    "description": "should return response if call was successful (with query parameters) when content type contains charset",
    "lineNumber": 558,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 728,
    "kind": "test",
    "name": "it512",
    "testId": 512,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe509",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe509.it512",
    "access": null,
    "description": "should return response if call was successful (with query parameters) when content type contains charset ahead",
    "lineNumber": 586,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 729,
    "kind": "test",
    "name": "it513",
    "testId": 513,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe509",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe509.it513",
    "access": null,
    "description": "should return response if call was successful (without query parameters)",
    "lineNumber": 614,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 730,
    "kind": "test",
    "name": "it514",
    "testId": 514,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe509",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe509.it514",
    "access": null,
    "description": "should return response if call was successful (without query parameters) and response body is empty",
    "lineNumber": 639,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 731,
    "kind": "test",
    "name": "it515",
    "testId": 515,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe509",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe509.it515",
    "access": null,
    "description": "should return response if call was successful (without query parameters) and response body is empty no content-type",
    "lineNumber": 662,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 732,
    "kind": "test",
    "name": "it516",
    "testId": 516,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe509",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe509.it516",
    "access": null,
    "description": "should return generic network error if no response was send by server",
    "lineNumber": 685,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 733,
    "kind": "test",
    "name": "it517",
    "testId": 517,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe509",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe509.it517",
    "access": null,
    "description": "should return error message if responses contains error",
    "lineNumber": 700,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 734,
    "kind": "test",
    "name": "it518",
    "testId": 518,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe509",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe509.it518",
    "access": null,
    "description": "should return error message from http status if empty error response",
    "lineNumber": 742,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 735,
    "kind": "test",
    "name": "it519",
    "testId": 519,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe509",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe509.it519",
    "access": null,
    "description": "should return error message if responses in unexpected format",
    "lineNumber": 766,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 736,
    "kind": "test",
    "name": "it520",
    "testId": 520,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe509",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe509.it520",
    "access": null,
    "description": "should return error message if client using encryption and responses in application/json",
    "lineNumber": 792,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 737,
    "kind": "test",
    "name": "it521",
    "testId": 521,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe509",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe509.it521",
    "access": null,
    "description": "should return encrypted response if encrypted PUT call was successful (without query parameters)",
    "lineNumber": 839,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 738,
    "kind": "test",
    "name": "it522",
    "testId": 522,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe509",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe509.it522",
    "access": null,
    "description": "should return encrypted response if encrypted PUT call was successful when content type contains charset",
    "lineNumber": 876,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 739,
    "kind": "test",
    "name": "it523",
    "testId": 523,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe509",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe509.it523",
    "access": null,
    "description": "should not return error response if encrypted PUT call was successful and response body is empty",
    "lineNumber": 915,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 740,
    "kind": "test",
    "name": "it524",
    "testId": 524,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe509",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe509.it524",
    "access": null,
    "description": "should return error when fail to encrypt PUT request body",
    "lineNumber": 946,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 741,
    "kind": "test",
    "name": "it525",
    "testId": 525,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe509",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe509.it525",
    "access": null,
    "description": "should return error when fail to decrypt PUT response body",
    "lineNumber": 983,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 742,
    "kind": "test",
    "name": "it526",
    "testId": 526,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe509",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe509.it526",
    "access": null,
    "description": "should return error when server responses with error on encrypted PUT request",
    "lineNumber": 1020,
    "testTargets": [
      "ApiClient#doPut"
    ]
  },
  {
    "__docId__": 743,
    "kind": "test",
    "name": "describe527",
    "testId": 527,
    "memberof": "test/utils/ApiClient.spec.js~describe489",
    "testDepth": 1,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe527",
    "access": null,
    "description": "doPutMultipart()",
    "lineNumber": 1074,
    "testTargets": [
      "ApiClient#doPutMultipart"
    ]
  },
  {
    "__docId__": 744,
    "kind": "test",
    "name": "it528",
    "testId": 528,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe527",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe527.it528",
    "access": null,
    "description": "should return error response for call",
    "lineNumber": 1107,
    "testTargets": [
      "ApiClient#doPutMultipart"
    ]
  },
  {
    "__docId__": 745,
    "kind": "test",
    "name": "describe529",
    "testId": 529,
    "memberof": "test/utils/ApiClient.spec.js~describe489",
    "testDepth": 1,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe529",
    "access": null,
    "description": "doGet()",
    "lineNumber": 1189,
    "testTargets": [
      "ApiClient#doGet"
    ]
  },
  {
    "__docId__": 746,
    "kind": "test",
    "name": "it530",
    "testId": 530,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe529",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe529.it530",
    "access": null,
    "description": "should return response if call was successful (with query parameters)",
    "lineNumber": 1210,
    "testTargets": [
      "ApiClient#doGet"
    ]
  },
  {
    "__docId__": 747,
    "kind": "test",
    "name": "it531",
    "testId": 531,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe529",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe529.it531",
    "access": null,
    "description": "should return response if call was successful (with query parameters) and response body is empty",
    "lineNumber": 1233,
    "testTargets": [
      "ApiClient#doGet"
    ]
  },
  {
    "__docId__": 748,
    "kind": "test",
    "name": "it532",
    "testId": 532,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe529",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe529.it532",
    "access": null,
    "description": "should return response if call was successful (with query parameters) and response body is empty no content-type",
    "lineNumber": 1254,
    "testTargets": [
      "ApiClient#doGet"
    ]
  },
  {
    "__docId__": 749,
    "kind": "test",
    "name": "it533",
    "testId": 533,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe529",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe529.it533",
    "access": null,
    "description": "should return response if call was successful (with query parameters) when content type contains charset",
    "lineNumber": 1273,
    "testTargets": [
      "ApiClient#doGet"
    ]
  },
  {
    "__docId__": 750,
    "kind": "test",
    "name": "it534",
    "testId": 534,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe529",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe529.it534",
    "access": null,
    "description": "should return response if call was successful (with query parameters) when content type contains charset ahead",
    "lineNumber": 1298,
    "testTargets": [
      "ApiClient#doGet"
    ]
  },
  {
    "__docId__": 751,
    "kind": "test",
    "name": "it535",
    "testId": 535,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe529",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe529.it535",
    "access": null,
    "description": "should return response if call was successful (without query parameters)",
    "lineNumber": 1323,
    "testTargets": [
      "ApiClient#doGet"
    ]
  },
  {
    "__docId__": 752,
    "kind": "test",
    "name": "it536",
    "testId": 536,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe529",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe529.it536",
    "access": null,
    "description": "should return generic network error if no response was send by server",
    "lineNumber": 1345,
    "testTargets": [
      "ApiClient#doGet"
    ]
  },
  {
    "__docId__": 753,
    "kind": "test",
    "name": "it537",
    "testId": 537,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe529",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe529.it537",
    "access": null,
    "description": "should return error message if responses contains error",
    "lineNumber": 1360,
    "testTargets": [
      "ApiClient#doGet"
    ]
  },
  {
    "__docId__": 754,
    "kind": "test",
    "name": "it538",
    "testId": 538,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe529",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe529.it538",
    "access": null,
    "description": "should return error message from http status if empty error response",
    "lineNumber": 1399,
    "testTargets": [
      "ApiClient#doGet"
    ]
  },
  {
    "__docId__": 755,
    "kind": "test",
    "name": "it539",
    "testId": 539,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe529",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe529.it539",
    "access": null,
    "description": "should return error message if responses in unexpected format",
    "lineNumber": 1420,
    "testTargets": [
      "ApiClient#doGet"
    ]
  },
  {
    "__docId__": 756,
    "kind": "test",
    "name": "it540",
    "testId": 540,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe529",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe529.it540",
    "access": null,
    "description": "should return error message if client using encryption and responses in application/json",
    "lineNumber": 1443,
    "testTargets": [
      "ApiClient#doGet"
    ]
  },
  {
    "__docId__": 757,
    "kind": "test",
    "name": "it541",
    "testId": 541,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe529",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe529.it541",
    "access": null,
    "description": "should return encrypted response if encrypted GET call was successful (without query parameters)",
    "lineNumber": 1489,
    "testTargets": [
      "ApiClient#doGet"
    ]
  },
  {
    "__docId__": 758,
    "kind": "test",
    "name": "it542",
    "testId": 542,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe529",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe529.it542",
    "access": null,
    "description": "should return encrypted response if encrypted GET call was successful when content type contains charset",
    "lineNumber": 1525,
    "testTargets": [
      "ApiClient#doGet"
    ]
  },
  {
    "__docId__": 759,
    "kind": "test",
    "name": "it543",
    "testId": 543,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe529",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe529.it543",
    "access": null,
    "description": "should return response if call was successful (with query parameters and encryption) and response body is empty",
    "lineNumber": 1563,
    "testTargets": [
      "ApiClient#doGet"
    ]
  },
  {
    "__docId__": 760,
    "kind": "test",
    "name": "it544",
    "testId": 544,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe529",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe529.it544",
    "access": null,
    "description": "should return response if call was successful (with query parameters and encryption) and response body is empty no content-type",
    "lineNumber": 1591,
    "testTargets": [
      "ApiClient#doGet"
    ]
  },
  {
    "__docId__": 761,
    "kind": "test",
    "name": "describe545",
    "testId": 545,
    "memberof": "test/utils/ApiClient.spec.js~describe489",
    "testDepth": 1,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe545",
    "access": null,
    "description": "wrapCallback()",
    "lineNumber": 1617
  },
  {
    "__docId__": 762,
    "kind": "test",
    "name": "it546",
    "testId": 546,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe545",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe545.it546",
    "access": null,
    "description": "should return a 'function' without a argument",
    "lineNumber": 1618
  },
  {
    "__docId__": 763,
    "kind": "test",
    "name": "it547",
    "testId": 547,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe545",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe545.it547",
    "access": null,
    "description": "should return a 'function' with a argument",
    "lineNumber": 1624
  },
  {
    "__docId__": 764,
    "kind": "test",
    "name": "it548",
    "testId": 548,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe545",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe545.it548",
    "access": null,
    "description": "should be able to run without any arguments",
    "lineNumber": 1630
  },
  {
    "__docId__": 765,
    "kind": "test",
    "name": "it549",
    "testId": 549,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe545",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe545.it549",
    "access": null,
    "description": "should call callback with 'body' and 'res' if no error happened",
    "lineNumber": 1635
  },
  {
    "__docId__": 766,
    "kind": "test",
    "name": "it550",
    "testId": 550,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe545",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe545.it550",
    "access": null,
    "description": "should call callback with 'errors', 'body' and 'res' if 'body' contains errors",
    "lineNumber": 1657
  },
  {
    "__docId__": 767,
    "kind": "test",
    "name": "it551",
    "testId": 551,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe545",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe545.it551",
    "access": null,
    "description": "should call callback with static error message as 'errors', 'body' and 'res' if 'body' contains no errors",
    "lineNumber": 1697
  },
  {
    "__docId__": 768,
    "kind": "test",
    "name": "it552",
    "testId": 552,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe545",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe545.it552",
    "access": null,
    "description": "should call callback with 'body' and 'res' and application/jose+json Content-Type",
    "lineNumber": 1721
  },
  {
    "__docId__": 769,
    "kind": "test",
    "name": "it553",
    "testId": 553,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe545",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe545.it553",
    "access": null,
    "description": "should call callback with static error message as 'errors', when Content-Type is wrong",
    "lineNumber": 1753
  },
  {
    "__docId__": 770,
    "kind": "test",
    "name": "it554",
    "testId": 554,
    "memberof": "test/utils/ApiClient.spec.js~describe489.describe545",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/ApiClient.spec.js~describe489.describe545.it554",
    "access": null,
    "description": "should call callback with no errors if Content-type is missing and response is noContent",
    "lineNumber": 1776
  },
  {
    "__docId__": 771,
    "kind": "testFile",
    "name": "test/utils/Encryption.spec.js",
    "content": "import path from \"path\";\nimport nock from \"nock\";\nimport fs from \"fs\";\nimport chai from \"chai\";\nimport Encryption from \"../../src/utils/Encryption\";\n\nchai.should();\n\n/** @test {Encryption} */\ndescribe(\"utils/Encryption\", () => {\n    /** @test {Encryption#constructor} */\n    describe(\"constructor()\", () => {\n        /** @test {Encryption#constructor} */\n        it(\"should set default values for encryption properties\", () => {\n            const encryption = new Encryption(\"clientPrivateKeySetLocation\", \"hyperwalletKeySetLocation\");\n\n            encryption.clientPrivateKeySetLocation.should.be.equal(\"clientPrivateKeySetLocation\");\n            encryption.hyperwalletKeySetLocation.should.be.equal(\"hyperwalletKeySetLocation\");\n            encryption.encryptionAlgorithm.should.be.equal(\"RSA-OAEP-256\");\n            encryption.signAlgorithm.should.be.equal(\"RS256\");\n            encryption.encryptionMethod.should.be.equal(\"A256CBC-HS512\");\n            encryption.jwsExpirationMinutes.should.be.equal(5);\n        });\n\n        /** @test {Encryption#constructor} */\n        it(\"should set encryption properties by constructor\", () => {\n            const encryption = new Encryption(\"clientPrivateKeySetLocation\", \"hyperwalletKeySetLocation\",\n                \"encryptionAlgorithm\", \"signAlgorithm\", \"encryptionMethod\", 12);\n\n            encryption.clientPrivateKeySetLocation.should.be.equal(\"clientPrivateKeySetLocation\");\n            encryption.hyperwalletKeySetLocation.should.be.equal(\"hyperwalletKeySetLocation\");\n            encryption.encryptionAlgorithm.should.be.equal(\"encryptionAlgorithm\");\n            encryption.signAlgorithm.should.be.equal(\"signAlgorithm\");\n            encryption.encryptionMethod.should.be.equal(\"encryptionMethod\");\n            encryption.jwsExpirationMinutes.should.be.equal(12);\n        });\n    });\n\n    /** @test {Encryption#encrypt} */\n    describe(\"encrypt()\", () => {\n        let encryption;\n        let testMessage;\n        let clientPath;\n        let hwPath;\n\n        beforeEach(() => {\n            clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            encryption = new Encryption(clientPath, hwPath);\n            testMessage = {\n                message: \"Test message\",\n            };\n        });\n\n        /** @test {Encryption#encrypt} */\n        it(\"should successfully encrypt and decrypt text message\", (cb) => {\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                encryption.decrypt(encryptedBody).then((decryptedBody) => {\n                    decryptedBody.payload.toString(\"utf8\").should.be.deep.equal(JSON.stringify(testMessage));\n                    cb();\n                });\n            });\n        });\n\n        /** @test {Encryption#encrypt} */\n        it(\"should successfully decode and encode encrypted text message\", (cb) => {\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                const decodedMessage = Encryption.base64Decode(encryptedBody);\n                const encodedMessage = Encryption.base64Encode(decodedMessage);\n                encodedMessage.should.be.deep.equal(encryptedBody);\n                cb();\n            });\n        });\n\n        /** @test {Encryption#encrypt} */\n        it(\"should throw exception when wrong jwk key set location is given\", (cb) => {\n            encryption = new Encryption(\"wrong_keyset_path\", hwPath);\n            encryption.encrypt(testMessage)\n                .catch((error) => {\n                    error.message.should.be.equal(\"Wrong JWK set location path = wrong_keyset_path\");\n                    cb();\n                });\n        });\n\n        /** @test {Encryption#encrypt} */\n        it(\"should throw exception when wrong jwk key is set for encryption\", (cb) => {\n            encryption = new Encryption(clientPath, hwPath, \"RS256\");\n            encryption.encrypt(testMessage)\n                .catch((error) => {\n                    error.message.should.be.equal(\"Failed to encrypt payload with key id = 2018_sig_rsa_RS256_2048\");\n                    cb();\n                });\n        });\n\n        /** @test {Encryption#encrypt} */\n        it(\"should throw exception when signing body with key algorithm that doesn't present in jwkset\", (cb) => {\n            encryption = new Encryption(clientPath, hwPath, \"RSA-OAEP-256\", \"RS256-not-present\");\n            encryption.encrypt(testMessage)\n                .catch((error) => {\n                    error.message.should.be.equal(\"JWK set doesn't contain key with algorithm = RS256-not-present\");\n                    cb();\n                });\n        });\n\n        /** @test {Encryption#encrypt} */\n        it(\"should throw exception when signing body with wrong jwk key\", (cb) => {\n            encryption = new Encryption(clientPath, hwPath, \"RSA-OAEP-256\", \"RSA-OAEP-256\");\n            encryption.encrypt(testMessage)\n                .catch((error) => {\n                    error.message.should.be.equal(\"Failed to sign with key id = 2018_enc_rsa_RSA-OAEP-256\");\n                    cb();\n                });\n        });\n\n        /** @test {Encryption#encrypt} */\n        it(\"should throw exception when jwk keyset file is invalid\", (cb) => {\n            encryption = new Encryption(path.join(__dirname, \"..\", \"resources\", \"jwkset-invalid\"), hwPath);\n            encryption.encrypt(testMessage)\n                .catch((error) => {\n                    error.message.should.be.equal(\"Failed to create keyStore from given jwkSet\");\n                    cb();\n                });\n        });\n\n        /** @test {Encryption#encrypt} */\n        it(\"should throw exception when jwk keyset file location is wrong\", (cb) => {\n            encryption = new Encryption(path.join(__dirname, \"..\", \"resources\"), hwPath);\n            encryption.encrypt(testMessage)\n                .catch((error) => {\n                    error.message.should.be.equal(\"Error: EISDIR: illegal operation on a directory, read\");\n                    cb();\n                });\n        });\n\n        /** @test {Encryption#encrypt} */\n        it(\"should successfully encrypt and decrypt text message with url keyset path\", (cb) => {\n            fs.readFile(clientPath, { encoding: \"utf-8\" }, (err, keySetData) => {\n                nock(\"https://test-server\")\n                    .get(\"/test\")\n                    .reply(200, keySetData)\n                    .get(\"/test\")\n                    .reply(200, keySetData);\n                encryption = new Encryption(\"https://test-server/test\", hwPath);\n                const encryption2 = new Encryption(clientPath, hwPath);\n                encryption.encrypt(testMessage).then((encryptedBody) => {\n                    encryption2.decrypt(encryptedBody).then((decryptedBody) => {\n                        decryptedBody.payload.toString(\"utf8\").should.be.deep.equal(JSON.stringify(testMessage));\n                        cb();\n                    });\n                });\n            });\n        });\n\n        /** @test {Encryption#encrypt} */\n        it(\"should throw exception when not supported encryption algorithm is given\", (cb) => {\n            encryption = new Encryption(clientPath, hwPath, \"unsupported_encryption_algorithm\");\n            encryption.encrypt(testMessage)\n                .catch((error) => {\n                    error.message.should.be.equal(\"JWK set doesn't contain key with algorithm = unsupported_encryption_algorithm\");\n                    cb();\n                });\n        });\n    });\n\n    /** @test {Encryption#decrypt} */\n    describe(\"decrypt()\", () => {\n        let encryption;\n        let testMessage;\n        let clientPath;\n        let clientPath2;\n        let hwPath;\n        let hwPath2;\n\n        beforeEach(() => {\n            clientPath = path.join(__dirname, \"..\", \"resources\", \"private-jwkset1\");\n            hwPath = path.join(__dirname, \"..\", \"resources\", \"public-jwkset1\");\n            clientPath2 = path.join(__dirname, \"..\", \"resources\", \"private-jwkset2\");\n            hwPath2 = path.join(__dirname, \"..\", \"resources\", \"public-jwkset2\");\n            encryption = new Encryption(clientPath, hwPath);\n            testMessage = {\n                message: \"Test message\",\n            };\n        });\n\n        /** @test {Encryption#decrypt} */\n        it(\"should fail decryption when wrong private key is used\", (cb) => {\n            const encryption2 = new Encryption(clientPath2, hwPath2);\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                encryption2.decrypt(encryptedBody)\n                    .catch((error) => {\n                        error.message.should.be.equal(\"Failed to decrypt payload with key id = 2018_enc_rsa_RSA-OAEP-256\");\n                        cb();\n                    });\n            });\n        });\n\n        /** @test {Encryption#decrypt} */\n        it(\"should fail decryption when sign algorithm is not found in keyset\", (cb) => {\n            const encryption2 = new Encryption(clientPath, hwPath, \"RSA-OAEP-256\", \"RS256-OAEP-256\");\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                encryption2.decrypt(encryptedBody)\n                    .catch((error) => {\n                        error.message.should.be.equal(\"JWK set doesn't contain key with algorithm = RS256-OAEP-256\");\n                        cb();\n                    });\n            });\n        });\n\n        /** @test {Encryption#decrypt} */\n        it(\"should fail decryption when algorithm is not found in jwkset\", (cb) => {\n            const encryption2 = new Encryption(clientPath, hwPath, \"RSA-OAEP-256-absent\");\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                encryption2.decrypt(encryptedBody)\n                    .catch((error) => {\n                        error.message.should.be.equal(\"JWK set doesn't contain key with algorithm = RSA-OAEP-256-absent\");\n                        cb();\n                    });\n            });\n        });\n\n        /** @test {Encryption#decrypt} */\n        it(\"should fail signature verification when wrong public key is used\", (cb) => {\n            const encryption2 = new Encryption(clientPath, hwPath2);\n            encryption.encrypt(testMessage).then((encryptedBody) => {\n                encryption2.decrypt(encryptedBody)\n                    .catch((error) => {\n                        error.message.should.be.equal(\"Failed to verify signature with key id = 2018_sig_rsa_RS256_2048\");\n                        cb();\n                    });\n            });\n        });\n\n        /** @test {Encryption#decrypt} */\n        it(\"should throw exception when jws signature has expired\", (cb) => {\n            const encryption2 = new Encryption(clientPath, hwPath2, \"RSA-OAEP-256\", \"RS256\", \"A256CBC-HS512\", -5);\n            encryption2.encrypt(testMessage).then(() => {\n                encryption2.signBody(testMessage).then((signedBody) => {\n                    encryption2.checkSignature(signedBody)\n                        .catch((error) => {\n                            error.message.should.be.equal(\"JWS signature has expired\");\n                            cb();\n                        });\n                });\n            });\n        });\n    });\n});\n",
    "static": true,
    "longname": "/home/runner/work/node-sdk/node-sdk/test/utils/Encryption.spec.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 772,
    "kind": "test",
    "name": "describe555",
    "testId": 555,
    "memberof": "test/utils/Encryption.spec.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe555",
    "access": null,
    "description": "utils/Encryption",
    "lineNumber": 10,
    "testTargets": [
      "Encryption"
    ]
  },
  {
    "__docId__": 773,
    "kind": "test",
    "name": "describe556",
    "testId": 556,
    "memberof": "test/utils/Encryption.spec.js~describe555",
    "testDepth": 1,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe555.describe556",
    "access": null,
    "description": "constructor()",
    "lineNumber": 12,
    "testTargets": [
      "Encryption#constructor"
    ]
  },
  {
    "__docId__": 774,
    "kind": "test",
    "name": "it557",
    "testId": 557,
    "memberof": "test/utils/Encryption.spec.js~describe555.describe556",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe555.describe556.it557",
    "access": null,
    "description": "should set default values for encryption properties",
    "lineNumber": 14,
    "testTargets": [
      "Encryption#constructor"
    ]
  },
  {
    "__docId__": 775,
    "kind": "test",
    "name": "it558",
    "testId": 558,
    "memberof": "test/utils/Encryption.spec.js~describe555.describe556",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe555.describe556.it558",
    "access": null,
    "description": "should set encryption properties by constructor",
    "lineNumber": 26,
    "testTargets": [
      "Encryption#constructor"
    ]
  },
  {
    "__docId__": 776,
    "kind": "test",
    "name": "describe559",
    "testId": 559,
    "memberof": "test/utils/Encryption.spec.js~describe555",
    "testDepth": 1,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe555.describe559",
    "access": null,
    "description": "encrypt()",
    "lineNumber": 40,
    "testTargets": [
      "Encryption#encrypt"
    ]
  },
  {
    "__docId__": 777,
    "kind": "test",
    "name": "it560",
    "testId": 560,
    "memberof": "test/utils/Encryption.spec.js~describe555.describe559",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe555.describe559.it560",
    "access": null,
    "description": "should successfully encrypt and decrypt text message",
    "lineNumber": 56,
    "testTargets": [
      "Encryption#encrypt"
    ]
  },
  {
    "__docId__": 778,
    "kind": "test",
    "name": "it561",
    "testId": 561,
    "memberof": "test/utils/Encryption.spec.js~describe555.describe559",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe555.describe559.it561",
    "access": null,
    "description": "should successfully decode and encode encrypted text message",
    "lineNumber": 66,
    "testTargets": [
      "Encryption#encrypt"
    ]
  },
  {
    "__docId__": 779,
    "kind": "test",
    "name": "it562",
    "testId": 562,
    "memberof": "test/utils/Encryption.spec.js~describe555.describe559",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe555.describe559.it562",
    "access": null,
    "description": "should throw exception when wrong jwk key set location is given",
    "lineNumber": 76,
    "testTargets": [
      "Encryption#encrypt"
    ]
  },
  {
    "__docId__": 780,
    "kind": "test",
    "name": "it563",
    "testId": 563,
    "memberof": "test/utils/Encryption.spec.js~describe555.describe559",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe555.describe559.it563",
    "access": null,
    "description": "should throw exception when wrong jwk key is set for encryption",
    "lineNumber": 86,
    "testTargets": [
      "Encryption#encrypt"
    ]
  },
  {
    "__docId__": 781,
    "kind": "test",
    "name": "it564",
    "testId": 564,
    "memberof": "test/utils/Encryption.spec.js~describe555.describe559",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe555.describe559.it564",
    "access": null,
    "description": "should throw exception when signing body with key algorithm that doesn't present in jwkset",
    "lineNumber": 96,
    "testTargets": [
      "Encryption#encrypt"
    ]
  },
  {
    "__docId__": 782,
    "kind": "test",
    "name": "it565",
    "testId": 565,
    "memberof": "test/utils/Encryption.spec.js~describe555.describe559",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe555.describe559.it565",
    "access": null,
    "description": "should throw exception when signing body with wrong jwk key",
    "lineNumber": 106,
    "testTargets": [
      "Encryption#encrypt"
    ]
  },
  {
    "__docId__": 783,
    "kind": "test",
    "name": "it566",
    "testId": 566,
    "memberof": "test/utils/Encryption.spec.js~describe555.describe559",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe555.describe559.it566",
    "access": null,
    "description": "should throw exception when jwk keyset file is invalid",
    "lineNumber": 116,
    "testTargets": [
      "Encryption#encrypt"
    ]
  },
  {
    "__docId__": 784,
    "kind": "test",
    "name": "it567",
    "testId": 567,
    "memberof": "test/utils/Encryption.spec.js~describe555.describe559",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe555.describe559.it567",
    "access": null,
    "description": "should throw exception when jwk keyset file location is wrong",
    "lineNumber": 126,
    "testTargets": [
      "Encryption#encrypt"
    ]
  },
  {
    "__docId__": 785,
    "kind": "test",
    "name": "it568",
    "testId": 568,
    "memberof": "test/utils/Encryption.spec.js~describe555.describe559",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe555.describe559.it568",
    "access": null,
    "description": "should successfully encrypt and decrypt text message with url keyset path",
    "lineNumber": 136,
    "testTargets": [
      "Encryption#encrypt"
    ]
  },
  {
    "__docId__": 786,
    "kind": "test",
    "name": "it569",
    "testId": 569,
    "memberof": "test/utils/Encryption.spec.js~describe555.describe559",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe555.describe559.it569",
    "access": null,
    "description": "should throw exception when not supported encryption algorithm is given",
    "lineNumber": 155,
    "testTargets": [
      "Encryption#encrypt"
    ]
  },
  {
    "__docId__": 787,
    "kind": "test",
    "name": "describe570",
    "testId": 570,
    "memberof": "test/utils/Encryption.spec.js~describe555",
    "testDepth": 1,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe555.describe570",
    "access": null,
    "description": "decrypt()",
    "lineNumber": 166,
    "testTargets": [
      "Encryption#decrypt"
    ]
  },
  {
    "__docId__": 788,
    "kind": "test",
    "name": "it571",
    "testId": 571,
    "memberof": "test/utils/Encryption.spec.js~describe555.describe570",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe555.describe570.it571",
    "access": null,
    "description": "should fail decryption when wrong private key is used",
    "lineNumber": 186,
    "testTargets": [
      "Encryption#decrypt"
    ]
  },
  {
    "__docId__": 789,
    "kind": "test",
    "name": "it572",
    "testId": 572,
    "memberof": "test/utils/Encryption.spec.js~describe555.describe570",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe555.describe570.it572",
    "access": null,
    "description": "should fail decryption when sign algorithm is not found in keyset",
    "lineNumber": 198,
    "testTargets": [
      "Encryption#decrypt"
    ]
  },
  {
    "__docId__": 790,
    "kind": "test",
    "name": "it573",
    "testId": 573,
    "memberof": "test/utils/Encryption.spec.js~describe555.describe570",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe555.describe570.it573",
    "access": null,
    "description": "should fail decryption when algorithm is not found in jwkset",
    "lineNumber": 210,
    "testTargets": [
      "Encryption#decrypt"
    ]
  },
  {
    "__docId__": 791,
    "kind": "test",
    "name": "it574",
    "testId": 574,
    "memberof": "test/utils/Encryption.spec.js~describe555.describe570",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe555.describe570.it574",
    "access": null,
    "description": "should fail signature verification when wrong public key is used",
    "lineNumber": 222,
    "testTargets": [
      "Encryption#decrypt"
    ]
  },
  {
    "__docId__": 792,
    "kind": "test",
    "name": "it575",
    "testId": 575,
    "memberof": "test/utils/Encryption.spec.js~describe555.describe570",
    "testDepth": 2,
    "static": true,
    "longname": "test/utils/Encryption.spec.js~describe555.describe570.it575",
    "access": null,
    "description": "should throw exception when jws signature has expired",
    "lineNumber": 234,
    "testTargets": [
      "Encryption#decrypt"
    ]
  }
]